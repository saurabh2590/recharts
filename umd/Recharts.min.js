!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react"),require("prop-types"),require("react-dom")):"function"==typeof define&&define.amd?define(["react","prop-types","react-dom"],e):"object"==typeof exports?exports.Recharts=e(require("react"),require("prop-types"),require("react-dom")):t.Recharts=e(t.React,t.PropTypes,t.ReactDOM)}(window,(function(t,e,n){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=117)}([function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.adaptEventsOfChild=e.adaptEventHandlers=e.filterProps=void 0;var o=n(0),a=i(n(3)),u=["viewBox","children"],s=["className","color","height","id","lang","max","media","method","min","name","style","target","type","width","role","tabIndex","accentHeight","accumulate","additive","alignmentBaseline","allowReorder","alphabetic","amplitude","arabicForm","ascent","attributeName","attributeType","autoReverse","azimuth","baseFrequency","baselineShift","baseProfile","bbox","begin","bias","by","calcMode","capHeight","clip","clipPath","clipPathUnits","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","contentScriptType","contentStyleType","cursor","cx","cy","d","decelerate","descent","diffuseConstant","direction","display","divisor","dominantBaseline","dur","dx","dy","edgeMode","elevation","enableBackground","end","exponent","externalResourcesRequired","fill","fillOpacity","fillRule","filter","filterRes","filterUnits","floodColor","floodOpacity","focusable","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","format","from","fx","fy","g1","g2","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","glyphRef","gradientTransform","gradientUnits","hanging","horizAdvX","horizOriginX","href","ideographic","imageRendering","in2","in","intercept","k1","k2","k3","k4","k","kernelMatrix","kernelUnitLength","kerning","keyPoints","keySplines","keyTimes","lengthAdjust","letterSpacing","lightingColor","limitingConeAngle","local","markerEnd","markerHeight","markerMid","markerStart","markerUnits","markerWidth","mask","maskContentUnits","maskUnits","mathematical","mode","numOctaves","offset","opacity","operator","order","orient","orientation","origin","overflow","overlinePosition","overlineThickness","paintOrder","panose1","pathLength","patternContentUnits","patternTransform","patternUnits","pointerEvents","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","r","radius","refX","refY","renderingIntent","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","result","rotate","rx","ry","seed","shapeRendering","slope","spacing","specularConstant","specularExponent","speed","spreadMethod","startOffset","stdDeviation","stemh","stemv","stitchTiles","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","string","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","surfaceScale","systemLanguage","tableValues","targetX","targetY","textAnchor","textDecoration","textLength","textRendering","to","transform","u1","u2","underlinePosition","underlineThickness","unicode","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","values","vectorEffect","version","vertAdvY","vertOriginX","vertOriginY","vHanging","vIdeographic","viewTarget","visibility","vMathematical","widths","wordSpacing","writingMode","x1","x2","x","xChannelSelector","xHeight","xlinkActuate","xlinkArcrole","xlinkHref","xlinkRole","xlinkShow","xlinkTitle","xlinkType","xmlBase","xmlLang","xmlns","xmlnsXlink","xmlSpace","y1","y2","y","yChannelSelector","z","zoomAndPan","ref","key","angle"],l=["dangerouslySetInnerHTML","onCopy","onCopyCapture","onCut","onCutCapture","onPaste","onPasteCapture","onCompositionEnd","onCompositionEndCapture","onCompositionStart","onCompositionStartCapture","onCompositionUpdate","onCompositionUpdateCapture","onFocus","onFocusCapture","onBlur","onBlurCapture","onChange","onChangeCapture","onBeforeInput","onBeforeInputCapture","onInput","onInputCapture","onReset","onResetCapture","onSubmit","onSubmitCapture","onInvalid","onInvalidCapture","onLoad","onLoadCapture","onError","onErrorCapture","onKeyDown","onKeyDownCapture","onKeyPress","onKeyPressCapture","onKeyUp","onKeyUpCapture","onAbort","onAbortCapture","onCanPlay","onCanPlayCapture","onCanPlayThrough","onCanPlayThroughCapture","onDurationChange","onDurationChangeCapture","onEmptied","onEmptiedCapture","onEncrypted","onEncryptedCapture","onEnded","onEndedCapture","onLoadedData","onLoadedDataCapture","onLoadedMetadata","onLoadedMetadataCapture","onLoadStart","onLoadStartCapture","onPause","onPauseCapture","onPlay","onPlayCapture","onPlaying","onPlayingCapture","onProgress","onProgressCapture","onRateChange","onRateChangeCapture","onSeeked","onSeekedCapture","onSeeking","onSeekingCapture","onStalled","onStalledCapture","onSuspend","onSuspendCapture","onTimeUpdate","onTimeUpdateCapture","onVolumeChange","onVolumeChangeCapture","onWaiting","onWaitingCapture","onAuxClick","onAuxClickCapture","onClick","onClickCapture","onContextMenu","onContextMenuCapture","onDoubleClick","onDoubleClickCapture","onDrag","onDragCapture","onDragEnd","onDragEndCapture","onDragEnter","onDragEnterCapture","onDragExit","onDragExitCapture","onDragLeave","onDragLeaveCapture","onDragOver","onDragOverCapture","onDragStart","onDragStartCapture","onDrop","onDropCapture","onMouseDown","onMouseDownCapture","onMouseEnter","onMouseLeave","onMouseMove","onMouseMoveCapture","onMouseOut","onMouseOutCapture","onMouseOver","onMouseOverCapture","onMouseUp","onMouseUpCapture","onSelect","onSelectCapture","onTouchCancel","onTouchCancelCapture","onTouchEnd","onTouchEndCapture","onTouchMove","onTouchMoveCapture","onTouchStart","onTouchStartCapture","onPointerDown","onPointerDownCapture","onPointerMove","onPointerMoveCapture","onPointerUp","onPointerUpCapture","onPointerCancel","onPointerCancelCapture","onPointerEnter","onPointerEnterCapture","onPointerLeave","onPointerLeaveCapture","onPointerOver","onPointerOverCapture","onPointerOut","onPointerOutCapture","onGotPointerCapture","onGotPointerCaptureCapture","onLostPointerCapture","onLostPointerCaptureCapture","onScroll","onScrollCapture","onWheel","onWheelCapture","onAnimationStart","onAnimationStartCapture","onAnimationEnd","onAnimationEndCapture","onAnimationIteration","onAnimationIterationCapture","onTransitionEnd","onTransitionEndCapture"];e.filterProps=function(t,e,n){if(!t||"function"==typeof t||"boolean"==typeof t)return null;var r=t;if(o.isValidElement(t)&&(r=t.props),!a.default.isObject(r))return null;var i={};return Object.keys(r).forEach((function(t){(s.includes(t)||n&&u.includes(t)||e&&l.includes(t))&&(i[t]=r[t])})),i};e.adaptEventHandlers=function(t,e){if(!t||"function"==typeof t||"boolean"==typeof t)return null;var n=t;if(o.isValidElement(t)&&(n=t.props),!a.default.isObject(n))return null;var r={};return Object.keys(n).forEach((function(t){l.includes(t)&&(r[t]=e||function(e){return n[t](n,e)})})),r};e.adaptEventsOfChild=function(t,e,n){if(!a.default.isObject(t)||"object"!==r(t))return null;var i=null;return Object.keys(t).forEach((function(r){var o=t[r];l.includes(r)&&"function"==typeof o&&(i||(i={}),i[r]=function(t,e,n){return function(r){return t(e,n,r),null}}(o,e,n))})),i}},function(t,e,n){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o="Expected a function",a="__lodash_placeholder__",u=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],s="[object Arguments]",l="[object Array]",c="[object Boolean]",f="[object Date]",h="[object Error]",p="[object Function]",d="[object GeneratorFunction]",y="[object Map]",v="[object Number]",g="[object Object]",m="[object RegExp]",_="[object Set]",b="[object String]",x="[object Symbol]",O="[object WeakMap]",w="[object ArrayBuffer]",A="[object DataView]",E="[object Float32Array]",M="[object Float64Array]",P="[object Int8Array]",S="[object Int16Array]",k="[object Int32Array]",C="[object Uint8Array]",j="[object Uint16Array]",T="[object Uint32Array]",N=/\b__p \+= '';/g,D=/\b(__p \+=) '' \+/g,I=/(__e\(.*?\)|\b__t\)) \+\n'';/g,L=/&(?:amp|lt|gt|quot|#39);/g,R=/[&<>"']/g,B=RegExp(L.source),z=RegExp(R.source),F=/<%-([\s\S]+?)%>/g,V=/<%([\s\S]+?)%>/g,W=/<%=([\s\S]+?)%>/g,U=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,q=/^\w*$/,G=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,H=/[\\^$.*+?()[\]{}|]/g,K=RegExp(H.source),X=/^\s+|\s+$/g,Y=/^\s+/,$=/\s+$/,Z=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,J=/\{\n\/\* \[wrapped with (.+)\] \*/,Q=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,et=/\\(\\)?/g,nt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,rt=/\w*$/,it=/^[-+]0x[0-9a-f]+$/i,ot=/^0b[01]+$/i,at=/^\[object .+?Constructor\]$/,ut=/^0o[0-7]+$/i,st=/^(?:0|[1-9]\d*)$/,lt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ct=/($^)/,ft=/['\n\r\u2028\u2029\\]/g,ht="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",pt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",dt="[\\ud800-\\udfff]",yt="["+pt+"]",vt="["+ht+"]",gt="\\d+",mt="[\\u2700-\\u27bf]",_t="[a-z\\xdf-\\xf6\\xf8-\\xff]",bt="[^\\ud800-\\udfff"+pt+gt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",xt="\\ud83c[\\udffb-\\udfff]",Ot="[^\\ud800-\\udfff]",wt="(?:\\ud83c[\\udde6-\\uddff]){2}",At="[\\ud800-\\udbff][\\udc00-\\udfff]",Et="[A-Z\\xc0-\\xd6\\xd8-\\xde]",Mt="(?:"+_t+"|"+bt+")",Pt="(?:"+Et+"|"+bt+")",St="(?:"+vt+"|"+xt+")"+"?",kt="[\\ufe0e\\ufe0f]?"+St+("(?:\\u200d(?:"+[Ot,wt,At].join("|")+")[\\ufe0e\\ufe0f]?"+St+")*"),Ct="(?:"+[mt,wt,At].join("|")+")"+kt,jt="(?:"+[Ot+vt+"?",vt,wt,At,dt].join("|")+")",Tt=RegExp("['’]","g"),Nt=RegExp(vt,"g"),Dt=RegExp(xt+"(?="+xt+")|"+jt+kt,"g"),It=RegExp([Et+"?"+_t+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[yt,Et,"$"].join("|")+")",Pt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[yt,Et+Mt,"$"].join("|")+")",Et+"?"+Mt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",Et+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",gt,Ct].join("|"),"g"),Lt=RegExp("[\\u200d\\ud800-\\udfff"+ht+"\\ufe0e\\ufe0f]"),Rt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Bt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],zt=-1,Ft={};Ft[E]=Ft[M]=Ft[P]=Ft[S]=Ft[k]=Ft[C]=Ft["[object Uint8ClampedArray]"]=Ft[j]=Ft[T]=!0,Ft[s]=Ft[l]=Ft[w]=Ft[c]=Ft[A]=Ft[f]=Ft[h]=Ft[p]=Ft[y]=Ft[v]=Ft[g]=Ft[m]=Ft[_]=Ft[b]=Ft[O]=!1;var Vt={};Vt[s]=Vt[l]=Vt[w]=Vt[A]=Vt[c]=Vt[f]=Vt[E]=Vt[M]=Vt[P]=Vt[S]=Vt[k]=Vt[y]=Vt[v]=Vt[g]=Vt[m]=Vt[_]=Vt[b]=Vt[x]=Vt[C]=Vt["[object Uint8ClampedArray]"]=Vt[j]=Vt[T]=!0,Vt[h]=Vt[p]=Vt[O]=!1;var Wt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ut=parseFloat,qt=parseInt,Gt="object"==typeof t&&t&&t.Object===Object&&t,Ht="object"==typeof self&&self&&self.Object===Object&&self,Kt=Gt||Ht||Function("return this")(),Xt=e&&!e.nodeType&&e,Yt=Xt&&"object"==typeof r&&r&&!r.nodeType&&r,$t=Yt&&Yt.exports===Xt,Zt=$t&&Gt.process,Jt=function(){try{var t=Yt&&Yt.require&&Yt.require("util").types;return t||Zt&&Zt.binding&&Zt.binding("util")}catch(t){}}(),Qt=Jt&&Jt.isArrayBuffer,te=Jt&&Jt.isDate,ee=Jt&&Jt.isMap,ne=Jt&&Jt.isRegExp,re=Jt&&Jt.isSet,ie=Jt&&Jt.isTypedArray;function oe(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function ae(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var a=t[i];e(r,a,n(a),t)}return r}function ue(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function se(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function le(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function ce(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}function fe(t,e){return!!(null==t?0:t.length)&&xe(t,e,0)>-1}function he(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function pe(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function de(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function ye(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function ve(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function ge(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var me=Ee("length");function _e(t,e,n){var r;return n(t,(function(t,n,i){if(e(t,n,i))return r=n,!1})),r}function be(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function xe(t,e,n){return e==e?function(t,e,n){var r=n-1,i=t.length;for(;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):be(t,we,n)}function Oe(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function we(t){return t!=t}function Ae(t,e){var n=null==t?0:t.length;return n?Se(t,e)/n:NaN}function Ee(t){return function(e){return null==e?void 0:e[t]}}function Me(t){return function(e){return null==t?void 0:t[e]}}function Pe(t,e,n,r,i){return i(t,(function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)})),n}function Se(t,e){for(var n,r=-1,i=t.length;++r<i;){var o=e(t[r]);void 0!==o&&(n=void 0===n?o:n+o)}return n}function ke(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function Ce(t){return function(e){return t(e)}}function je(t,e){return pe(e,(function(e){return t[e]}))}function Te(t,e){return t.has(e)}function Ne(t,e){for(var n=-1,r=t.length;++n<r&&xe(e,t[n],0)>-1;);return n}function De(t,e){for(var n=t.length;n--&&xe(e,t[n],0)>-1;);return n}function Ie(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}var Le=Me({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Re=Me({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Be(t){return"\\"+Wt[t]}function ze(t){return Lt.test(t)}function Fe(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function Ve(t,e){return function(n){return t(e(n))}}function We(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var u=t[n];u!==e&&u!==a||(t[n]=a,o[i++]=n)}return o}function Ue(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function qe(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function Ge(t){return ze(t)?function(t){var e=Dt.lastIndex=0;for(;Dt.test(t);)++e;return e}(t):me(t)}function He(t){return ze(t)?function(t){return t.match(Dt)||[]}(t):function(t){return t.split("")}(t)}var Ke=Me({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Xe=function t(e){var n,r=(e=null==e?Kt:Xe.defaults(Kt.Object(),e,Xe.pick(Kt,Bt))).Array,i=e.Date,ht=e.Error,pt=e.Function,dt=e.Math,yt=e.Object,vt=e.RegExp,gt=e.String,mt=e.TypeError,_t=r.prototype,bt=pt.prototype,xt=yt.prototype,Ot=e["__core-js_shared__"],wt=bt.toString,At=xt.hasOwnProperty,Et=0,Mt=(n=/[^.]+$/.exec(Ot&&Ot.keys&&Ot.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Pt=xt.toString,St=wt.call(yt),kt=Kt._,Ct=vt("^"+wt.call(At).replace(H,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),jt=$t?e.Buffer:void 0,Dt=e.Symbol,Lt=e.Uint8Array,Wt=jt?jt.allocUnsafe:void 0,Gt=Ve(yt.getPrototypeOf,yt),Ht=yt.create,Xt=xt.propertyIsEnumerable,Yt=_t.splice,Zt=Dt?Dt.isConcatSpreadable:void 0,Jt=Dt?Dt.iterator:void 0,me=Dt?Dt.toStringTag:void 0,Me=function(){try{var t=Qi(yt,"defineProperty");return t({},"",{}),t}catch(t){}}(),Ye=e.clearTimeout!==Kt.clearTimeout&&e.clearTimeout,$e=i&&i.now!==Kt.Date.now&&i.now,Ze=e.setTimeout!==Kt.setTimeout&&e.setTimeout,Je=dt.ceil,Qe=dt.floor,tn=yt.getOwnPropertySymbols,en=jt?jt.isBuffer:void 0,nn=e.isFinite,rn=_t.join,on=Ve(yt.keys,yt),an=dt.max,un=dt.min,sn=i.now,ln=e.parseInt,cn=dt.random,fn=_t.reverse,hn=Qi(e,"DataView"),pn=Qi(e,"Map"),dn=Qi(e,"Promise"),yn=Qi(e,"Set"),vn=Qi(e,"WeakMap"),gn=Qi(yt,"create"),mn=vn&&new vn,_n={},bn=Po(hn),xn=Po(pn),On=Po(dn),wn=Po(yn),An=Po(vn),En=Dt?Dt.prototype:void 0,Mn=En?En.valueOf:void 0,Pn=En?En.toString:void 0;function Sn(t){if(qa(t)&&!Na(t)&&!(t instanceof Tn)){if(t instanceof jn)return t;if(At.call(t,"__wrapped__"))return So(t)}return new jn(t)}var kn=function(){function t(){}return function(e){if(!Ua(e))return{};if(Ht)return Ht(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();function Cn(){}function jn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=void 0}function Tn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Nn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Dn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function In(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Ln(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new In;++e<n;)this.add(t[e])}function Rn(t){var e=this.__data__=new Dn(t);this.size=e.size}function Bn(t,e){var n=Na(t),r=!n&&Ta(t),i=!n&&!r&&Ra(t),o=!n&&!r&&!i&&Ja(t),a=n||r||i||o,u=a?ke(t.length,gt):[],s=u.length;for(var l in t)!e&&!At.call(t,l)||a&&("length"==l||i&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||ao(l,s))||u.push(l);return u}function zn(t){var e=t.length;return e?t[Lr(0,e-1)]:void 0}function Fn(t,e){return Ao(gi(t),Yn(e,0,t.length))}function Vn(t){return Ao(gi(t))}function Wn(t,e,n){(void 0!==n&&!ka(t[e],n)||void 0===n&&!(e in t))&&Kn(t,e,n)}function Un(t,e,n){var r=t[e];At.call(t,e)&&ka(r,n)&&(void 0!==n||e in t)||Kn(t,e,n)}function qn(t,e){for(var n=t.length;n--;)if(ka(t[n][0],e))return n;return-1}function Gn(t,e,n,r){return tr(t,(function(t,i,o){e(r,t,n(t),o)})),r}function Hn(t,e){return t&&mi(e,bu(e),t)}function Kn(t,e,n){"__proto__"==e&&Me?Me(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function Xn(t,e){for(var n=-1,i=e.length,o=r(i),a=null==t;++n<i;)o[n]=a?void 0:yu(t,e[n]);return o}function Yn(t,e,n){return t==t&&(void 0!==n&&(t=t<=n?t:n),void 0!==e&&(t=t>=e?t:e)),t}function $n(t,e,n,r,i,o){var a,u=1&e,l=2&e,h=4&e;if(n&&(a=i?n(t,r,i,o):n(t)),void 0!==a)return a;if(!Ua(t))return t;var O=Na(t);if(O){if(a=function(t){var e=t.length,n=new t.constructor(e);e&&"string"==typeof t[0]&&At.call(t,"index")&&(n.index=t.index,n.input=t.input);return n}(t),!u)return gi(t,a)}else{var N=no(t),D=N==p||N==d;if(Ra(t))return fi(t,u);if(N==g||N==s||D&&!i){if(a=l||D?{}:io(t),!u)return l?function(t,e){return mi(t,eo(t),e)}(t,function(t,e){return t&&mi(e,xu(e),t)}(a,t)):function(t,e){return mi(t,to(t),e)}(t,Hn(a,t))}else{if(!Vt[N])return i?t:{};a=function(t,e,n){var r=t.constructor;switch(e){case w:return hi(t);case c:case f:return new r(+t);case A:return function(t,e){var n=e?hi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case E:case M:case P:case S:case k:case C:case"[object Uint8ClampedArray]":case j:case T:return pi(t,n);case y:return new r;case v:case b:return new r(t);case m:return function(t){var e=new t.constructor(t.source,rt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case _:return new r;case x:return i=t,Mn?yt(Mn.call(i)):{}}var i}(t,N,u)}}o||(o=new Rn);var I=o.get(t);if(I)return I;o.set(t,a),Ya(t)?t.forEach((function(r){a.add($n(r,e,n,r,t,o))})):Ga(t)&&t.forEach((function(r,i){a.set(i,$n(r,e,n,i,t,o))}));var L=O?void 0:(h?l?Hi:Gi:l?xu:bu)(t);return ue(L||t,(function(r,i){L&&(r=t[i=r]),Un(a,i,$n(r,e,n,i,t,o))})),a}function Zn(t,e,n){var r=n.length;if(null==t)return!r;for(t=yt(t);r--;){var i=n[r],o=e[i],a=t[i];if(void 0===a&&!(i in t)||!o(a))return!1}return!0}function Jn(t,e,n){if("function"!=typeof t)throw new mt(o);return bo((function(){t.apply(void 0,n)}),e)}function Qn(t,e,n,r){var i=-1,o=fe,a=!0,u=t.length,s=[],l=e.length;if(!u)return s;n&&(e=pe(e,Ce(n))),r?(o=he,a=!1):e.length>=200&&(o=Te,a=!1,e=new Ln(e));t:for(;++i<u;){var c=t[i],f=null==n?c:n(c);if(c=r||0!==c?c:0,a&&f==f){for(var h=l;h--;)if(e[h]===f)continue t;s.push(c)}else o(e,f,r)||s.push(c)}return s}Sn.templateSettings={escape:F,evaluate:V,interpolate:W,variable:"",imports:{_:Sn}},Sn.prototype=Cn.prototype,Sn.prototype.constructor=Sn,jn.prototype=kn(Cn.prototype),jn.prototype.constructor=jn,Tn.prototype=kn(Cn.prototype),Tn.prototype.constructor=Tn,Nn.prototype.clear=function(){this.__data__=gn?gn(null):{},this.size=0},Nn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Nn.prototype.get=function(t){var e=this.__data__;if(gn){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return At.call(e,t)?e[t]:void 0},Nn.prototype.has=function(t){var e=this.__data__;return gn?void 0!==e[t]:At.call(e,t)},Nn.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=gn&&void 0===e?"__lodash_hash_undefined__":e,this},Dn.prototype.clear=function(){this.__data__=[],this.size=0},Dn.prototype.delete=function(t){var e=this.__data__,n=qn(e,t);return!(n<0)&&(n==e.length-1?e.pop():Yt.call(e,n,1),--this.size,!0)},Dn.prototype.get=function(t){var e=this.__data__,n=qn(e,t);return n<0?void 0:e[n][1]},Dn.prototype.has=function(t){return qn(this.__data__,t)>-1},Dn.prototype.set=function(t,e){var n=this.__data__,r=qn(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},In.prototype.clear=function(){this.size=0,this.__data__={hash:new Nn,map:new(pn||Dn),string:new Nn}},In.prototype.delete=function(t){var e=Zi(this,t).delete(t);return this.size-=e?1:0,e},In.prototype.get=function(t){return Zi(this,t).get(t)},In.prototype.has=function(t){return Zi(this,t).has(t)},In.prototype.set=function(t,e){var n=Zi(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},Ln.prototype.add=Ln.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},Ln.prototype.has=function(t){return this.__data__.has(t)},Rn.prototype.clear=function(){this.__data__=new Dn,this.size=0},Rn.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Rn.prototype.get=function(t){return this.__data__.get(t)},Rn.prototype.has=function(t){return this.__data__.has(t)},Rn.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Dn){var r=n.__data__;if(!pn||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new In(r)}return n.set(t,e),this.size=n.size,this};var tr=xi(sr),er=xi(lr,!0);function nr(t,e){var n=!0;return tr(t,(function(t,r,i){return n=!!e(t,r,i)})),n}function rr(t,e,n){for(var r=-1,i=t.length;++r<i;){var o=t[r],a=e(o);if(null!=a&&(void 0===u?a==a&&!Za(a):n(a,u)))var u=a,s=o}return s}function ir(t,e){var n=[];return tr(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}function or(t,e,n,r,i){var o=-1,a=t.length;for(n||(n=oo),i||(i=[]);++o<a;){var u=t[o];e>0&&n(u)?e>1?or(u,e-1,n,r,i):de(i,u):r||(i[i.length]=u)}return i}var ar=Oi(),ur=Oi(!0);function sr(t,e){return t&&ar(t,e,bu)}function lr(t,e){return t&&ur(t,e,bu)}function cr(t,e){return ce(e,(function(e){return Fa(t[e])}))}function fr(t,e){for(var n=0,r=(e=ui(e,t)).length;null!=t&&n<r;)t=t[Mo(e[n++])];return n&&n==r?t:void 0}function hr(t,e,n){var r=e(t);return Na(t)?r:de(r,n(t))}function pr(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":me&&me in yt(t)?function(t){var e=At.call(t,me),n=t[me];try{t[me]=void 0;var r=!0}catch(t){}var i=Pt.call(t);r&&(e?t[me]=n:delete t[me]);return i}(t):function(t){return Pt.call(t)}(t)}function dr(t,e){return t>e}function yr(t,e){return null!=t&&At.call(t,e)}function vr(t,e){return null!=t&&e in yt(t)}function gr(t,e,n){for(var i=n?he:fe,o=t[0].length,a=t.length,u=a,s=r(a),l=1/0,c=[];u--;){var f=t[u];u&&e&&(f=pe(f,Ce(e))),l=un(f.length,l),s[u]=!n&&(e||o>=120&&f.length>=120)?new Ln(u&&f):void 0}f=t[0];var h=-1,p=s[0];t:for(;++h<o&&c.length<l;){var d=f[h],y=e?e(d):d;if(d=n||0!==d?d:0,!(p?Te(p,y):i(c,y,n))){for(u=a;--u;){var v=s[u];if(!(v?Te(v,y):i(t[u],y,n)))continue t}p&&p.push(y),c.push(d)}}return c}function mr(t,e,n){var r=null==(t=vo(t,e=ui(e,t)))?t:t[Mo(zo(e))];return null==r?void 0:oe(r,t,n)}function _r(t){return qa(t)&&pr(t)==s}function br(t,e,n,r,i){return t===e||(null==t||null==e||!qa(t)&&!qa(e)?t!=t&&e!=e:function(t,e,n,r,i,o){var a=Na(t),u=Na(e),p=a?l:no(t),d=u?l:no(e),O=(p=p==s?g:p)==g,E=(d=d==s?g:d)==g,M=p==d;if(M&&Ra(t)){if(!Ra(e))return!1;a=!0,O=!1}if(M&&!O)return o||(o=new Rn),a||Ja(t)?Ui(t,e,n,r,i,o):function(t,e,n,r,i,o,a){switch(n){case A:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case w:return!(t.byteLength!=e.byteLength||!o(new Lt(t),new Lt(e)));case c:case f:case v:return ka(+t,+e);case h:return t.name==e.name&&t.message==e.message;case m:case b:return t==e+"";case y:var u=Fe;case _:var s=1&r;if(u||(u=Ue),t.size!=e.size&&!s)return!1;var l=a.get(t);if(l)return l==e;r|=2,a.set(t,e);var p=Ui(u(t),u(e),r,i,o,a);return a.delete(t),p;case x:if(Mn)return Mn.call(t)==Mn.call(e)}return!1}(t,e,p,n,r,i,o);if(!(1&n)){var P=O&&At.call(t,"__wrapped__"),S=E&&At.call(e,"__wrapped__");if(P||S){var k=P?t.value():t,C=S?e.value():e;return o||(o=new Rn),i(k,C,n,r,o)}}if(!M)return!1;return o||(o=new Rn),function(t,e,n,r,i,o){var a=1&n,u=Gi(t),s=u.length,l=Gi(e).length;if(s!=l&&!a)return!1;var c=s;for(;c--;){var f=u[c];if(!(a?f in e:At.call(e,f)))return!1}var h=o.get(t),p=o.get(e);if(h&&p)return h==e&&p==t;var d=!0;o.set(t,e),o.set(e,t);var y=a;for(;++c<s;){f=u[c];var v=t[f],g=e[f];if(r)var m=a?r(g,v,f,e,t,o):r(v,g,f,t,e,o);if(!(void 0===m?v===g||i(v,g,n,r,o):m)){d=!1;break}y||(y="constructor"==f)}if(d&&!y){var _=t.constructor,b=e.constructor;_==b||!("constructor"in t)||!("constructor"in e)||"function"==typeof _&&_ instanceof _&&"function"==typeof b&&b instanceof b||(d=!1)}return o.delete(t),o.delete(e),d}(t,e,n,r,i,o)}(t,e,n,r,br,i))}function xr(t,e,n,r){var i=n.length,o=i,a=!r;if(null==t)return!o;for(t=yt(t);i--;){var u=n[i];if(a&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++i<o;){var s=(u=n[i])[0],l=t[s],c=u[1];if(a&&u[2]){if(void 0===l&&!(s in t))return!1}else{var f=new Rn;if(r)var h=r(l,c,s,t,e,f);if(!(void 0===h?br(c,l,3,r,f):h))return!1}}return!0}function Or(t){return!(!Ua(t)||(e=t,Mt&&Mt in e))&&(Fa(t)?Ct:at).test(Po(t));var e}function wr(t){return"function"==typeof t?t:null==t?Hu:"object"==typeof t?Na(t)?kr(t[0],t[1]):Sr(t):es(t)}function Ar(t){if(!fo(t))return on(t);var e=[];for(var n in yt(t))At.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Er(t){if(!Ua(t))return function(t){var e=[];if(null!=t)for(var n in yt(t))e.push(n);return e}(t);var e=fo(t),n=[];for(var r in t)("constructor"!=r||!e&&At.call(t,r))&&n.push(r);return n}function Mr(t,e){return t<e}function Pr(t,e){var n=-1,i=Ia(t)?r(t.length):[];return tr(t,(function(t,r,o){i[++n]=e(t,r,o)})),i}function Sr(t){var e=Ji(t);return 1==e.length&&e[0][2]?po(e[0][0],e[0][1]):function(n){return n===t||xr(n,t,e)}}function kr(t,e){return so(t)&&ho(e)?po(Mo(t),e):function(n){var r=yu(n,t);return void 0===r&&r===e?vu(n,t):br(e,r,3)}}function Cr(t,e,n,r,i){t!==e&&ar(e,(function(o,a){if(i||(i=new Rn),Ua(o))!function(t,e,n,r,i,o,a){var u=mo(t,n),s=mo(e,n),l=a.get(s);if(l)return void Wn(t,n,l);var c=o?o(u,s,n+"",t,e,a):void 0,f=void 0===c;if(f){var h=Na(s),p=!h&&Ra(s),d=!h&&!p&&Ja(s);c=s,h||p||d?Na(u)?c=u:La(u)?c=gi(u):p?(f=!1,c=fi(s,!0)):d?(f=!1,c=pi(s,!0)):c=[]:Ka(s)||Ta(s)?(c=u,Ta(u)?c=au(u):Ua(u)&&!Fa(u)||(c=io(s))):f=!1}f&&(a.set(s,c),i(c,s,r,o,a),a.delete(s));Wn(t,n,c)}(t,e,a,n,Cr,r,i);else{var u=r?r(mo(t,a),o,a+"",t,e,i):void 0;void 0===u&&(u=o),Wn(t,a,u)}}),xu)}function jr(t,e){var n=t.length;if(n)return ao(e+=e<0?n:0,n)?t[e]:void 0}function Tr(t,e,n){e=e.length?pe(e,(function(t){return Na(t)?function(e){return fr(e,1===t.length?t[0]:t)}:t})):[Hu];var r=-1;return e=pe(e,Ce($i())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(Pr(t,(function(t,n,i){return{criteria:pe(e,(function(e){return e(t)})),index:++r,value:t}})),(function(t,e){return function(t,e,n){var r=-1,i=t.criteria,o=e.criteria,a=i.length,u=n.length;for(;++r<a;){var s=di(i[r],o[r]);if(s){if(r>=u)return s;var l=n[r];return s*("desc"==l?-1:1)}}return t.index-e.index}(t,e,n)}))}function Nr(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var a=e[r],u=fr(t,a);n(u,a)&&Vr(o,ui(a,t),u)}return o}function Dr(t,e,n,r){var i=r?Oe:xe,o=-1,a=e.length,u=t;for(t===e&&(e=gi(e)),n&&(u=pe(t,Ce(n)));++o<a;)for(var s=0,l=e[o],c=n?n(l):l;(s=i(u,c,s,r))>-1;)u!==t&&Yt.call(u,s,1),Yt.call(t,s,1);return t}function Ir(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;ao(i)?Yt.call(t,i,1):Qr(t,i)}}return t}function Lr(t,e){return t+Qe(cn()*(e-t+1))}function Rr(t,e){var n="";if(!t||e<1||e>9007199254740991)return n;do{e%2&&(n+=t),(e=Qe(e/2))&&(t+=t)}while(e);return n}function Br(t,e){return xo(yo(t,e,Hu),t+"")}function zr(t){return zn(ku(t))}function Fr(t,e){var n=ku(t);return Ao(n,Yn(e,0,n.length))}function Vr(t,e,n,r){if(!Ua(t))return t;for(var i=-1,o=(e=ui(e,t)).length,a=o-1,u=t;null!=u&&++i<o;){var s=Mo(e[i]),l=n;if("__proto__"===s||"constructor"===s||"prototype"===s)return t;if(i!=a){var c=u[s];void 0===(l=r?r(c,s,u):void 0)&&(l=Ua(c)?c:ao(e[i+1])?[]:{})}Un(u,s,l),u=u[s]}return t}var Wr=mn?function(t,e){return mn.set(t,e),t}:Hu,Ur=Me?function(t,e){return Me(t,"toString",{configurable:!0,enumerable:!1,value:Uu(e),writable:!0})}:Hu;function qr(t){return Ao(ku(t))}function Gr(t,e,n){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var a=r(o);++i<o;)a[i]=t[i+e];return a}function Hr(t,e){var n;return tr(t,(function(t,r,i){return!(n=e(t,r,i))})),!!n}function Kr(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=2147483647){for(;r<i;){var o=r+i>>>1,a=t[o];null!==a&&!Za(a)&&(n?a<=e:a<e)?r=o+1:i=o}return i}return Xr(t,e,Hu,n)}function Xr(t,e,n,r){var i=0,o=null==t?0:t.length;if(0===o)return 0;for(var a=(e=n(e))!=e,u=null===e,s=Za(e),l=void 0===e;i<o;){var c=Qe((i+o)/2),f=n(t[c]),h=void 0!==f,p=null===f,d=f==f,y=Za(f);if(a)var v=r||d;else v=l?d&&(r||h):u?d&&h&&(r||!p):s?d&&h&&!p&&(r||!y):!p&&!y&&(r?f<=e:f<e);v?i=c+1:o=c}return un(o,4294967294)}function Yr(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n],u=e?e(a):a;if(!n||!ka(u,s)){var s=u;o[i++]=0===a?0:a}}return o}function $r(t){return"number"==typeof t?t:Za(t)?NaN:+t}function Zr(t){if("string"==typeof t)return t;if(Na(t))return pe(t,Zr)+"";if(Za(t))return Pn?Pn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Jr(t,e,n){var r=-1,i=fe,o=t.length,a=!0,u=[],s=u;if(n)a=!1,i=he;else if(o>=200){var l=e?null:Ri(t);if(l)return Ue(l);a=!1,i=Te,s=new Ln}else s=e?[]:u;t:for(;++r<o;){var c=t[r],f=e?e(c):c;if(c=n||0!==c?c:0,a&&f==f){for(var h=s.length;h--;)if(s[h]===f)continue t;e&&s.push(f),u.push(c)}else i(s,f,n)||(s!==u&&s.push(f),u.push(c))}return u}function Qr(t,e){return null==(t=vo(t,e=ui(e,t)))||delete t[Mo(zo(e))]}function ti(t,e,n,r){return Vr(t,e,n(fr(t,e)),r)}function ei(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?Gr(t,r?0:o,r?o+1:i):Gr(t,r?o+1:0,r?i:o)}function ni(t,e){var n=t;return n instanceof Tn&&(n=n.value()),ye(e,(function(t,e){return e.func.apply(e.thisArg,de([t],e.args))}),n)}function ri(t,e,n){var i=t.length;if(i<2)return i?Jr(t[0]):[];for(var o=-1,a=r(i);++o<i;)for(var u=t[o],s=-1;++s<i;)s!=o&&(a[o]=Qn(a[o]||u,t[s],e,n));return Jr(or(a,1),e,n)}function ii(t,e,n){for(var r=-1,i=t.length,o=e.length,a={};++r<i;){var u=r<o?e[r]:void 0;n(a,t[r],u)}return a}function oi(t){return La(t)?t:[]}function ai(t){return"function"==typeof t?t:Hu}function ui(t,e){return Na(t)?t:so(t,e)?[t]:Eo(uu(t))}var si=Br;function li(t,e,n){var r=t.length;return n=void 0===n?r:n,!e&&n>=r?t:Gr(t,e,n)}var ci=Ye||function(t){return Kt.clearTimeout(t)};function fi(t,e){if(e)return t.slice();var n=t.length,r=Wt?Wt(n):new t.constructor(n);return t.copy(r),r}function hi(t){var e=new t.constructor(t.byteLength);return new Lt(e).set(new Lt(t)),e}function pi(t,e){var n=e?hi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function di(t,e){if(t!==e){var n=void 0!==t,r=null===t,i=t==t,o=Za(t),a=void 0!==e,u=null===e,s=e==e,l=Za(e);if(!u&&!l&&!o&&t>e||o&&a&&s&&!u&&!l||r&&a&&s||!n&&s||!i)return 1;if(!r&&!o&&!l&&t<e||l&&n&&i&&!r&&!o||u&&n&&i||!a&&i||!s)return-1}return 0}function yi(t,e,n,i){for(var o=-1,a=t.length,u=n.length,s=-1,l=e.length,c=an(a-u,0),f=r(l+c),h=!i;++s<l;)f[s]=e[s];for(;++o<u;)(h||o<a)&&(f[n[o]]=t[o]);for(;c--;)f[s++]=t[o++];return f}function vi(t,e,n,i){for(var o=-1,a=t.length,u=-1,s=n.length,l=-1,c=e.length,f=an(a-s,0),h=r(f+c),p=!i;++o<f;)h[o]=t[o];for(var d=o;++l<c;)h[d+l]=e[l];for(;++u<s;)(p||o<a)&&(h[d+n[u]]=t[o++]);return h}function gi(t,e){var n=-1,i=t.length;for(e||(e=r(i));++n<i;)e[n]=t[n];return e}function mi(t,e,n,r){var i=!n;n||(n={});for(var o=-1,a=e.length;++o<a;){var u=e[o],s=r?r(n[u],t[u],u,n,t):void 0;void 0===s&&(s=t[u]),i?Kn(n,u,s):Un(n,u,s)}return n}function _i(t,e){return function(n,r){var i=Na(n)?ae:Gn,o=e?e():{};return i(n,t,$i(r,2),o)}}function bi(t){return Br((function(e,n){var r=-1,i=n.length,o=i>1?n[i-1]:void 0,a=i>2?n[2]:void 0;for(o=t.length>3&&"function"==typeof o?(i--,o):void 0,a&&uo(n[0],n[1],a)&&(o=i<3?void 0:o,i=1),e=yt(e);++r<i;){var u=n[r];u&&t(e,u,r,o)}return e}))}function xi(t,e){return function(n,r){if(null==n)return n;if(!Ia(n))return t(n,r);for(var i=n.length,o=e?i:-1,a=yt(n);(e?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function Oi(t){return function(e,n,r){for(var i=-1,o=yt(e),a=r(e),u=a.length;u--;){var s=a[t?u:++i];if(!1===n(o[s],s,o))break}return e}}function wi(t){return function(e){var n=ze(e=uu(e))?He(e):void 0,r=n?n[0]:e.charAt(0),i=n?li(n,1).join(""):e.slice(1);return r[t]()+i}}function Ai(t){return function(e){return ye(Fu(Tu(e).replace(Tt,"")),t,"")}}function Ei(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=kn(t.prototype),r=t.apply(n,e);return Ua(r)?r:n}}function Mi(t){return function(e,n,r){var i=yt(e);if(!Ia(e)){var o=$i(n,3);e=bu(e),n=function(t){return o(i[t],t,i)}}var a=t(e,n,r);return a>-1?i[o?e[a]:a]:void 0}}function Pi(t){return qi((function(e){var n=e.length,r=n,i=jn.prototype.thru;for(t&&e.reverse();r--;){var a=e[r];if("function"!=typeof a)throw new mt(o);if(i&&!u&&"wrapper"==Xi(a))var u=new jn([],!0)}for(r=u?r:n;++r<n;){var s=Xi(a=e[r]),l="wrapper"==s?Ki(a):void 0;u=l&&lo(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?u[Xi(l[0])].apply(u,l[3]):1==a.length&&lo(a)?u[s]():u.thru(a)}return function(){var t=arguments,r=t[0];if(u&&1==t.length&&Na(r))return u.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}}))}function Si(t,e,n,i,o,a,u,s,l,c){var f=128&e,h=1&e,p=2&e,d=24&e,y=512&e,v=p?void 0:Ei(t);return function g(){for(var m=arguments.length,_=r(m),b=m;b--;)_[b]=arguments[b];if(d)var x=Yi(g),O=Ie(_,x);if(i&&(_=yi(_,i,o,d)),a&&(_=vi(_,a,u,d)),m-=O,d&&m<c){var w=We(_,x);return Ii(t,e,Si,g.placeholder,n,_,w,s,l,c-m)}var A=h?n:this,E=p?A[t]:t;return m=_.length,s?_=go(_,s):y&&m>1&&_.reverse(),f&&l<m&&(_.length=l),this&&this!==Kt&&this instanceof g&&(E=v||Ei(E)),E.apply(A,_)}}function ki(t,e){return function(n,r){return function(t,e,n,r){return sr(t,(function(t,i,o){e(r,n(t),i,o)})),r}(n,t,e(r),{})}}function Ci(t,e){return function(n,r){var i;if(void 0===n&&void 0===r)return e;if(void 0!==n&&(i=n),void 0!==r){if(void 0===i)return r;"string"==typeof n||"string"==typeof r?(n=Zr(n),r=Zr(r)):(n=$r(n),r=$r(r)),i=t(n,r)}return i}}function ji(t){return qi((function(e){return e=pe(e,Ce($i())),Br((function(n){var r=this;return t(e,(function(t){return oe(t,r,n)}))}))}))}function Ti(t,e){var n=(e=void 0===e?" ":Zr(e)).length;if(n<2)return n?Rr(e,t):e;var r=Rr(e,Je(t/Ge(e)));return ze(e)?li(He(r),0,t).join(""):r.slice(0,t)}function Ni(t){return function(e,n,i){return i&&"number"!=typeof i&&uo(e,n,i)&&(n=i=void 0),e=nu(e),void 0===n?(n=e,e=0):n=nu(n),function(t,e,n,i){for(var o=-1,a=an(Je((e-t)/(n||1)),0),u=r(a);a--;)u[i?a:++o]=t,t+=n;return u}(e,n,i=void 0===i?e<n?1:-1:nu(i),t)}}function Di(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=ou(e),n=ou(n)),t(e,n)}}function Ii(t,e,n,r,i,o,a,u,s,l){var c=8&e;e|=c?32:64,4&(e&=~(c?64:32))||(e&=-4);var f=[t,e,i,c?o:void 0,c?a:void 0,c?void 0:o,c?void 0:a,u,s,l],h=n.apply(void 0,f);return lo(t)&&_o(h,f),h.placeholder=r,Oo(h,t,e)}function Li(t){var e=dt[t];return function(t,n){if(t=ou(t),(n=null==n?0:un(ru(n),292))&&nn(t)){var r=(uu(t)+"e").split("e");return+((r=(uu(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Ri=yn&&1/Ue(new yn([,-0]))[1]==1/0?function(t){return new yn(t)}:Zu;function Bi(t){return function(e){var n=no(e);return n==y?Fe(e):n==_?qe(e):function(t,e){return pe(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function zi(t,e,n,i,u,s,l,c){var f=2&e;if(!f&&"function"!=typeof t)throw new mt(o);var h=i?i.length:0;if(h||(e&=-97,i=u=void 0),l=void 0===l?l:an(ru(l),0),c=void 0===c?c:ru(c),h-=u?u.length:0,64&e){var p=i,d=u;i=u=void 0}var y=f?void 0:Ki(t),v=[t,e,n,i,u,p,d,s,l,c];if(y&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<131,u=128==r&&8==n||128==r&&256==n&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(!o&&!u)return t;1&r&&(t[2]=e[2],i|=1&n?0:4);var s=e[3];if(s){var l=t[3];t[3]=l?yi(l,s,e[4]):s,t[4]=l?We(t[3],a):e[4]}(s=e[5])&&(l=t[5],t[5]=l?vi(l,s,e[6]):s,t[6]=l?We(t[5],a):e[6]);(s=e[7])&&(t[7]=s);128&r&&(t[8]=null==t[8]?e[8]:un(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=i}(v,y),t=v[0],e=v[1],n=v[2],i=v[3],u=v[4],!(c=v[9]=void 0===v[9]?f?0:t.length:an(v[9]-h,0))&&24&e&&(e&=-25),e&&1!=e)g=8==e||16==e?function(t,e,n){var i=Ei(t);return function o(){for(var a=arguments.length,u=r(a),s=a,l=Yi(o);s--;)u[s]=arguments[s];var c=a<3&&u[0]!==l&&u[a-1]!==l?[]:We(u,l);if((a-=c.length)<n)return Ii(t,e,Si,o.placeholder,void 0,u,c,void 0,void 0,n-a);var f=this&&this!==Kt&&this instanceof o?i:t;return oe(f,this,u)}}(t,e,c):32!=e&&33!=e||u.length?Si.apply(void 0,v):function(t,e,n,i){var o=1&e,a=Ei(t);return function e(){for(var u=-1,s=arguments.length,l=-1,c=i.length,f=r(c+s),h=this&&this!==Kt&&this instanceof e?a:t;++l<c;)f[l]=i[l];for(;s--;)f[l++]=arguments[++u];return oe(h,o?n:this,f)}}(t,e,n,i);else var g=function(t,e,n){var r=1&e,i=Ei(t);return function e(){var o=this&&this!==Kt&&this instanceof e?i:t;return o.apply(r?n:this,arguments)}}(t,e,n);return Oo((y?Wr:_o)(g,v),t,e)}function Fi(t,e,n,r){return void 0===t||ka(t,xt[n])&&!At.call(r,n)?e:t}function Vi(t,e,n,r,i,o){return Ua(t)&&Ua(e)&&(o.set(e,t),Cr(t,e,void 0,Vi,o),o.delete(e)),t}function Wi(t){return Ka(t)?void 0:t}function Ui(t,e,n,r,i,o){var a=1&n,u=t.length,s=e.length;if(u!=s&&!(a&&s>u))return!1;var l=o.get(t),c=o.get(e);if(l&&c)return l==e&&c==t;var f=-1,h=!0,p=2&n?new Ln:void 0;for(o.set(t,e),o.set(e,t);++f<u;){var d=t[f],y=e[f];if(r)var v=a?r(y,d,f,e,t,o):r(d,y,f,t,e,o);if(void 0!==v){if(v)continue;h=!1;break}if(p){if(!ge(e,(function(t,e){if(!Te(p,e)&&(d===t||i(d,t,n,r,o)))return p.push(e)}))){h=!1;break}}else if(d!==y&&!i(d,y,n,r,o)){h=!1;break}}return o.delete(t),o.delete(e),h}function qi(t){return xo(yo(t,void 0,Do),t+"")}function Gi(t){return hr(t,bu,to)}function Hi(t){return hr(t,xu,eo)}var Ki=mn?function(t){return mn.get(t)}:Zu;function Xi(t){for(var e=t.name+"",n=_n[e],r=At.call(_n,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function Yi(t){return(At.call(Sn,"placeholder")?Sn:t).placeholder}function $i(){var t=Sn.iteratee||Ku;return t=t===Ku?wr:t,arguments.length?t(arguments[0],arguments[1]):t}function Zi(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function Ji(t){for(var e=bu(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,ho(i)]}return e}function Qi(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return Or(n)?n:void 0}var to=tn?function(t){return null==t?[]:(t=yt(t),ce(tn(t),(function(e){return Xt.call(t,e)})))}:is,eo=tn?function(t){for(var e=[];t;)de(e,to(t)),t=Gt(t);return e}:is,no=pr;function ro(t,e,n){for(var r=-1,i=(e=ui(e,t)).length,o=!1;++r<i;){var a=Mo(e[r]);if(!(o=null!=t&&n(t,a)))break;t=t[a]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Wa(i)&&ao(a,i)&&(Na(t)||Ta(t))}function io(t){return"function"!=typeof t.constructor||fo(t)?{}:kn(Gt(t))}function oo(t){return Na(t)||Ta(t)||!!(Zt&&t&&t[Zt])}function ao(t,e){var n=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&st.test(t))&&t>-1&&t%1==0&&t<e}function uo(t,e,n){if(!Ua(n))return!1;var r=typeof e;return!!("number"==r?Ia(n)&&ao(e,n.length):"string"==r&&e in n)&&ka(n[e],t)}function so(t,e){if(Na(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Za(t))||(q.test(t)||!U.test(t)||null!=e&&t in yt(e))}function lo(t){var e=Xi(t),n=Sn[e];if("function"!=typeof n||!(e in Tn.prototype))return!1;if(t===n)return!0;var r=Ki(n);return!!r&&t===r[0]}(hn&&no(new hn(new ArrayBuffer(1)))!=A||pn&&no(new pn)!=y||dn&&"[object Promise]"!=no(dn.resolve())||yn&&no(new yn)!=_||vn&&no(new vn)!=O)&&(no=function(t){var e=pr(t),n=e==g?t.constructor:void 0,r=n?Po(n):"";if(r)switch(r){case bn:return A;case xn:return y;case On:return"[object Promise]";case wn:return _;case An:return O}return e});var co=Ot?Fa:os;function fo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||xt)}function ho(t){return t==t&&!Ua(t)}function po(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in yt(n)))}}function yo(t,e,n){return e=an(void 0===e?t.length-1:e,0),function(){for(var i=arguments,o=-1,a=an(i.length-e,0),u=r(a);++o<a;)u[o]=i[e+o];o=-1;for(var s=r(e+1);++o<e;)s[o]=i[o];return s[e]=n(u),oe(t,this,s)}}function vo(t,e){return e.length<2?t:fr(t,Gr(e,0,-1))}function go(t,e){for(var n=t.length,r=un(e.length,n),i=gi(t);r--;){var o=e[r];t[r]=ao(o,n)?i[o]:void 0}return t}function mo(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var _o=wo(Wr),bo=Ze||function(t,e){return Kt.setTimeout(t,e)},xo=wo(Ur);function Oo(t,e,n){var r=e+"";return xo(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Z,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return ue(u,(function(n){var r="_."+n[0];e&n[1]&&!fe(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(J);return e?e[1].split(Q):[]}(r),n)))}function wo(t){var e=0,n=0;return function(){var r=sn(),i=16-(r-n);if(n=r,i>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}function Ao(t,e){var n=-1,r=t.length,i=r-1;for(e=void 0===e?r:e;++n<e;){var o=Lr(n,i),a=t[o];t[o]=t[n],t[n]=a}return t.length=e,t}var Eo=function(t){var e=wa(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(G,(function(t,n,r,i){e.push(r?i.replace(et,"$1"):n||t)})),e}));function Mo(t){if("string"==typeof t||Za(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Po(t){if(null!=t){try{return wt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function So(t){if(t instanceof Tn)return t.clone();var e=new jn(t.__wrapped__,t.__chain__);return e.__actions__=gi(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var ko=Br((function(t,e){return La(t)?Qn(t,or(e,1,La,!0)):[]})),Co=Br((function(t,e){var n=zo(e);return La(n)&&(n=void 0),La(t)?Qn(t,or(e,1,La,!0),$i(n,2)):[]})),jo=Br((function(t,e){var n=zo(e);return La(n)&&(n=void 0),La(t)?Qn(t,or(e,1,La,!0),void 0,n):[]}));function To(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:ru(n);return i<0&&(i=an(r+i,0)),be(t,$i(e,3),i)}function No(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return void 0!==n&&(i=ru(n),i=n<0?an(r+i,0):un(i,r-1)),be(t,$i(e,3),i,!0)}function Do(t){return(null==t?0:t.length)?or(t,1):[]}function Io(t){return t&&t.length?t[0]:void 0}var Lo=Br((function(t){var e=pe(t,oi);return e.length&&e[0]===t[0]?gr(e):[]})),Ro=Br((function(t){var e=zo(t),n=pe(t,oi);return e===zo(n)?e=void 0:n.pop(),n.length&&n[0]===t[0]?gr(n,$i(e,2)):[]})),Bo=Br((function(t){var e=zo(t),n=pe(t,oi);return(e="function"==typeof e?e:void 0)&&n.pop(),n.length&&n[0]===t[0]?gr(n,void 0,e):[]}));function zo(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}var Fo=Br(Vo);function Vo(t,e){return t&&t.length&&e&&e.length?Dr(t,e):t}var Wo=qi((function(t,e){var n=null==t?0:t.length,r=Xn(t,e);return Ir(t,pe(e,(function(t){return ao(t,n)?+t:t})).sort(di)),r}));function Uo(t){return null==t?t:fn.call(t)}var qo=Br((function(t){return Jr(or(t,1,La,!0))})),Go=Br((function(t){var e=zo(t);return La(e)&&(e=void 0),Jr(or(t,1,La,!0),$i(e,2))})),Ho=Br((function(t){var e=zo(t);return e="function"==typeof e?e:void 0,Jr(or(t,1,La,!0),void 0,e)}));function Ko(t){if(!t||!t.length)return[];var e=0;return t=ce(t,(function(t){if(La(t))return e=an(t.length,e),!0})),ke(e,(function(e){return pe(t,Ee(e))}))}function Xo(t,e){if(!t||!t.length)return[];var n=Ko(t);return null==e?n:pe(n,(function(t){return oe(e,void 0,t)}))}var Yo=Br((function(t,e){return La(t)?Qn(t,e):[]})),$o=Br((function(t){return ri(ce(t,La))})),Zo=Br((function(t){var e=zo(t);return La(e)&&(e=void 0),ri(ce(t,La),$i(e,2))})),Jo=Br((function(t){var e=zo(t);return e="function"==typeof e?e:void 0,ri(ce(t,La),void 0,e)})),Qo=Br(Ko);var ta=Br((function(t){var e=t.length,n=e>1?t[e-1]:void 0;return n="function"==typeof n?(t.pop(),n):void 0,Xo(t,n)}));function ea(t){var e=Sn(t);return e.__chain__=!0,e}function na(t,e){return e(t)}var ra=qi((function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,i=function(e){return Xn(e,t)};return!(e>1||this.__actions__.length)&&r instanceof Tn&&ao(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:na,args:[i],thisArg:void 0}),new jn(r,this.__chain__).thru((function(t){return e&&!t.length&&t.push(void 0),t}))):this.thru(i)}));var ia=_i((function(t,e,n){At.call(t,n)?++t[n]:Kn(t,n,1)}));var oa=Mi(To),aa=Mi(No);function ua(t,e){return(Na(t)?ue:tr)(t,$i(e,3))}function sa(t,e){return(Na(t)?se:er)(t,$i(e,3))}var la=_i((function(t,e,n){At.call(t,n)?t[n].push(e):Kn(t,n,[e])}));var ca=Br((function(t,e,n){var i=-1,o="function"==typeof e,a=Ia(t)?r(t.length):[];return tr(t,(function(t){a[++i]=o?oe(e,t,n):mr(t,e,n)})),a})),fa=_i((function(t,e,n){Kn(t,n,e)}));function ha(t,e){return(Na(t)?pe:Pr)(t,$i(e,3))}var pa=_i((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]}));var da=Br((function(t,e){if(null==t)return[];var n=e.length;return n>1&&uo(t,e[0],e[1])?e=[]:n>2&&uo(e[0],e[1],e[2])&&(e=[e[0]]),Tr(t,or(e,1),[])})),ya=$e||function(){return Kt.Date.now()};function va(t,e,n){return e=n?void 0:e,zi(t,128,void 0,void 0,void 0,void 0,e=t&&null==e?t.length:e)}function ga(t,e){var n;if("function"!=typeof e)throw new mt(o);return t=ru(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=void 0),n}}var ma=Br((function(t,e,n){var r=1;if(n.length){var i=We(n,Yi(ma));r|=32}return zi(t,r,e,n,i)})),_a=Br((function(t,e,n){var r=3;if(n.length){var i=We(n,Yi(_a));r|=32}return zi(e,r,t,n,i)}));function ba(t,e,n){var r,i,a,u,s,l,c=0,f=!1,h=!1,p=!0;if("function"!=typeof t)throw new mt(o);function d(e){var n=r,o=i;return r=i=void 0,c=e,u=t.apply(o,n)}function y(t){return c=t,s=bo(g,e),f?d(t):u}function v(t){var n=t-l;return void 0===l||n>=e||n<0||h&&t-c>=a}function g(){var t=ya();if(v(t))return m(t);s=bo(g,function(t){var n=e-(t-l);return h?un(n,a-(t-c)):n}(t))}function m(t){return s=void 0,p&&r?d(t):(r=i=void 0,u)}function _(){var t=ya(),n=v(t);if(r=arguments,i=this,l=t,n){if(void 0===s)return y(l);if(h)return ci(s),s=bo(g,e),d(l)}return void 0===s&&(s=bo(g,e)),u}return e=ou(e)||0,Ua(n)&&(f=!!n.leading,a=(h="maxWait"in n)?an(ou(n.maxWait)||0,e):a,p="trailing"in n?!!n.trailing:p),_.cancel=function(){void 0!==s&&ci(s),c=0,r=l=i=s=void 0},_.flush=function(){return void 0===s?u:m(ya())},_}var xa=Br((function(t,e){return Jn(t,1,e)})),Oa=Br((function(t,e,n){return Jn(t,ou(e)||0,n)}));function wa(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new mt(o);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(wa.Cache||In),n}function Aa(t){if("function"!=typeof t)throw new mt(o);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}wa.Cache=In;var Ea=si((function(t,e){var n=(e=1==e.length&&Na(e[0])?pe(e[0],Ce($i())):pe(or(e,1),Ce($i()))).length;return Br((function(r){for(var i=-1,o=un(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return oe(t,this,r)}))})),Ma=Br((function(t,e){return zi(t,32,void 0,e,We(e,Yi(Ma)))})),Pa=Br((function(t,e){return zi(t,64,void 0,e,We(e,Yi(Pa)))})),Sa=qi((function(t,e){return zi(t,256,void 0,void 0,void 0,e)}));function ka(t,e){return t===e||t!=t&&e!=e}var Ca=Di(dr),ja=Di((function(t,e){return t>=e})),Ta=_r(function(){return arguments}())?_r:function(t){return qa(t)&&At.call(t,"callee")&&!Xt.call(t,"callee")},Na=r.isArray,Da=Qt?Ce(Qt):function(t){return qa(t)&&pr(t)==w};function Ia(t){return null!=t&&Wa(t.length)&&!Fa(t)}function La(t){return qa(t)&&Ia(t)}var Ra=en||os,Ba=te?Ce(te):function(t){return qa(t)&&pr(t)==f};function za(t){if(!qa(t))return!1;var e=pr(t);return e==h||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!Ka(t)}function Fa(t){if(!Ua(t))return!1;var e=pr(t);return e==p||e==d||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Va(t){return"number"==typeof t&&t==ru(t)}function Wa(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Ua(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function qa(t){return null!=t&&"object"==typeof t}var Ga=ee?Ce(ee):function(t){return qa(t)&&no(t)==y};function Ha(t){return"number"==typeof t||qa(t)&&pr(t)==v}function Ka(t){if(!qa(t)||pr(t)!=g)return!1;var e=Gt(t);if(null===e)return!0;var n=At.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&wt.call(n)==St}var Xa=ne?Ce(ne):function(t){return qa(t)&&pr(t)==m};var Ya=re?Ce(re):function(t){return qa(t)&&no(t)==_};function $a(t){return"string"==typeof t||!Na(t)&&qa(t)&&pr(t)==b}function Za(t){return"symbol"==typeof t||qa(t)&&pr(t)==x}var Ja=ie?Ce(ie):function(t){return qa(t)&&Wa(t.length)&&!!Ft[pr(t)]};var Qa=Di(Mr),tu=Di((function(t,e){return t<=e}));function eu(t){if(!t)return[];if(Ia(t))return $a(t)?He(t):gi(t);if(Jt&&t[Jt])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Jt]());var e=no(t);return(e==y?Fe:e==_?Ue:ku)(t)}function nu(t){return t?(t=ou(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function ru(t){var e=nu(t),n=e%1;return e==e?n?e-n:e:0}function iu(t){return t?Yn(ru(t),0,4294967295):0}function ou(t){if("number"==typeof t)return t;if(Za(t))return NaN;if(Ua(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Ua(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(X,"");var n=ot.test(t);return n||ut.test(t)?qt(t.slice(2),n?2:8):it.test(t)?NaN:+t}function au(t){return mi(t,xu(t))}function uu(t){return null==t?"":Zr(t)}var su=bi((function(t,e){if(fo(e)||Ia(e))mi(e,bu(e),t);else for(var n in e)At.call(e,n)&&Un(t,n,e[n])})),lu=bi((function(t,e){mi(e,xu(e),t)})),cu=bi((function(t,e,n,r){mi(e,xu(e),t,r)})),fu=bi((function(t,e,n,r){mi(e,bu(e),t,r)})),hu=qi(Xn);var pu=Br((function(t,e){t=yt(t);var n=-1,r=e.length,i=r>2?e[2]:void 0;for(i&&uo(e[0],e[1],i)&&(r=1);++n<r;)for(var o=e[n],a=xu(o),u=-1,s=a.length;++u<s;){var l=a[u],c=t[l];(void 0===c||ka(c,xt[l])&&!At.call(t,l))&&(t[l]=o[l])}return t})),du=Br((function(t){return t.push(void 0,Vi),oe(wu,void 0,t)}));function yu(t,e,n){var r=null==t?void 0:fr(t,e);return void 0===r?n:r}function vu(t,e){return null!=t&&ro(t,e,vr)}var gu=ki((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Pt.call(e)),t[e]=n}),Uu(Hu)),mu=ki((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Pt.call(e)),At.call(t,e)?t[e].push(n):t[e]=[n]}),$i),_u=Br(mr);function bu(t){return Ia(t)?Bn(t):Ar(t)}function xu(t){return Ia(t)?Bn(t,!0):Er(t)}var Ou=bi((function(t,e,n){Cr(t,e,n)})),wu=bi((function(t,e,n,r){Cr(t,e,n,r)})),Au=qi((function(t,e){var n={};if(null==t)return n;var r=!1;e=pe(e,(function(e){return e=ui(e,t),r||(r=e.length>1),e})),mi(t,Hi(t),n),r&&(n=$n(n,7,Wi));for(var i=e.length;i--;)Qr(n,e[i]);return n}));var Eu=qi((function(t,e){return null==t?{}:function(t,e){return Nr(t,e,(function(e,n){return vu(t,n)}))}(t,e)}));function Mu(t,e){if(null==t)return{};var n=pe(Hi(t),(function(t){return[t]}));return e=$i(e),Nr(t,n,(function(t,n){return e(t,n[0])}))}var Pu=Bi(bu),Su=Bi(xu);function ku(t){return null==t?[]:je(t,bu(t))}var Cu=Ai((function(t,e,n){return e=e.toLowerCase(),t+(n?ju(e):e)}));function ju(t){return zu(uu(t).toLowerCase())}function Tu(t){return(t=uu(t))&&t.replace(lt,Le).replace(Nt,"")}var Nu=Ai((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),Du=Ai((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),Iu=wi("toLowerCase");var Lu=Ai((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}));var Ru=Ai((function(t,e,n){return t+(n?" ":"")+zu(e)}));var Bu=Ai((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),zu=wi("toUpperCase");function Fu(t,e,n){return t=uu(t),void 0===(e=n?void 0:e)?function(t){return Rt.test(t)}(t)?function(t){return t.match(It)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(e)||[]}var Vu=Br((function(t,e){try{return oe(t,void 0,e)}catch(t){return za(t)?t:new ht(t)}})),Wu=qi((function(t,e){return ue(e,(function(e){e=Mo(e),Kn(t,e,ma(t[e],t))})),t}));function Uu(t){return function(){return t}}var qu=Pi(),Gu=Pi(!0);function Hu(t){return t}function Ku(t){return wr("function"==typeof t?t:$n(t,1))}var Xu=Br((function(t,e){return function(n){return mr(n,t,e)}})),Yu=Br((function(t,e){return function(n){return mr(t,n,e)}}));function $u(t,e,n){var r=bu(e),i=cr(e,r);null!=n||Ua(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=cr(e,bu(e)));var o=!(Ua(n)&&"chain"in n&&!n.chain),a=Fa(t);return ue(i,(function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__),i=n.__actions__=gi(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,de([this.value()],arguments))})})),t}function Zu(){}var Ju=ji(pe),Qu=ji(le),ts=ji(ge);function es(t){return so(t)?Ee(Mo(t)):function(t){return function(e){return fr(e,t)}}(t)}var ns=Ni(),rs=Ni(!0);function is(){return[]}function os(){return!1}var as=Ci((function(t,e){return t+e}),0),us=Li("ceil"),ss=Ci((function(t,e){return t/e}),1),ls=Li("floor");var cs,fs=Ci((function(t,e){return t*e}),1),hs=Li("round"),ps=Ci((function(t,e){return t-e}),0);return Sn.after=function(t,e){if("function"!=typeof e)throw new mt(o);return t=ru(t),function(){if(--t<1)return e.apply(this,arguments)}},Sn.ary=va,Sn.assign=su,Sn.assignIn=lu,Sn.assignInWith=cu,Sn.assignWith=fu,Sn.at=hu,Sn.before=ga,Sn.bind=ma,Sn.bindAll=Wu,Sn.bindKey=_a,Sn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Na(t)?t:[t]},Sn.chain=ea,Sn.chunk=function(t,e,n){e=(n?uo(t,e,n):void 0===e)?1:an(ru(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var o=0,a=0,u=r(Je(i/e));o<i;)u[a++]=Gr(t,o,o+=e);return u},Sn.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},Sn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return de(Na(n)?gi(n):[n],or(e,1))},Sn.cond=function(t){var e=null==t?0:t.length,n=$i();return t=e?pe(t,(function(t){if("function"!=typeof t[1])throw new mt(o);return[n(t[0]),t[1]]})):[],Br((function(n){for(var r=-1;++r<e;){var i=t[r];if(oe(i[0],this,n))return oe(i[1],this,n)}}))},Sn.conforms=function(t){return function(t){var e=bu(t);return function(n){return Zn(n,t,e)}}($n(t,1))},Sn.constant=Uu,Sn.countBy=ia,Sn.create=function(t,e){var n=kn(t);return null==e?n:Hn(n,e)},Sn.curry=function t(e,n,r){var i=zi(e,8,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return i.placeholder=t.placeholder,i},Sn.curryRight=function t(e,n,r){var i=zi(e,16,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return i.placeholder=t.placeholder,i},Sn.debounce=ba,Sn.defaults=pu,Sn.defaultsDeep=du,Sn.defer=xa,Sn.delay=Oa,Sn.difference=ko,Sn.differenceBy=Co,Sn.differenceWith=jo,Sn.drop=function(t,e,n){var r=null==t?0:t.length;return r?Gr(t,(e=n||void 0===e?1:ru(e))<0?0:e,r):[]},Sn.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?Gr(t,0,(e=r-(e=n||void 0===e?1:ru(e)))<0?0:e):[]},Sn.dropRightWhile=function(t,e){return t&&t.length?ei(t,$i(e,3),!0,!0):[]},Sn.dropWhile=function(t,e){return t&&t.length?ei(t,$i(e,3),!0):[]},Sn.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&uo(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=ru(n))<0&&(n=-n>i?0:i+n),(r=void 0===r||r>i?i:ru(r))<0&&(r+=i),r=n>r?0:iu(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},Sn.filter=function(t,e){return(Na(t)?ce:ir)(t,$i(e,3))},Sn.flatMap=function(t,e){return or(ha(t,e),1)},Sn.flatMapDeep=function(t,e){return or(ha(t,e),1/0)},Sn.flatMapDepth=function(t,e,n){return n=void 0===n?1:ru(n),or(ha(t,e),n)},Sn.flatten=Do,Sn.flattenDeep=function(t){return(null==t?0:t.length)?or(t,1/0):[]},Sn.flattenDepth=function(t,e){return(null==t?0:t.length)?or(t,e=void 0===e?1:ru(e)):[]},Sn.flip=function(t){return zi(t,512)},Sn.flow=qu,Sn.flowRight=Gu,Sn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},Sn.functions=function(t){return null==t?[]:cr(t,bu(t))},Sn.functionsIn=function(t){return null==t?[]:cr(t,xu(t))},Sn.groupBy=la,Sn.initial=function(t){return(null==t?0:t.length)?Gr(t,0,-1):[]},Sn.intersection=Lo,Sn.intersectionBy=Ro,Sn.intersectionWith=Bo,Sn.invert=gu,Sn.invertBy=mu,Sn.invokeMap=ca,Sn.iteratee=Ku,Sn.keyBy=fa,Sn.keys=bu,Sn.keysIn=xu,Sn.map=ha,Sn.mapKeys=function(t,e){var n={};return e=$i(e,3),sr(t,(function(t,r,i){Kn(n,e(t,r,i),t)})),n},Sn.mapValues=function(t,e){var n={};return e=$i(e,3),sr(t,(function(t,r,i){Kn(n,r,e(t,r,i))})),n},Sn.matches=function(t){return Sr($n(t,1))},Sn.matchesProperty=function(t,e){return kr(t,$n(e,1))},Sn.memoize=wa,Sn.merge=Ou,Sn.mergeWith=wu,Sn.method=Xu,Sn.methodOf=Yu,Sn.mixin=$u,Sn.negate=Aa,Sn.nthArg=function(t){return t=ru(t),Br((function(e){return jr(e,t)}))},Sn.omit=Au,Sn.omitBy=function(t,e){return Mu(t,Aa($i(e)))},Sn.once=function(t){return ga(2,t)},Sn.orderBy=function(t,e,n,r){return null==t?[]:(Na(e)||(e=null==e?[]:[e]),Na(n=r?void 0:n)||(n=null==n?[]:[n]),Tr(t,e,n))},Sn.over=Ju,Sn.overArgs=Ea,Sn.overEvery=Qu,Sn.overSome=ts,Sn.partial=Ma,Sn.partialRight=Pa,Sn.partition=pa,Sn.pick=Eu,Sn.pickBy=Mu,Sn.property=es,Sn.propertyOf=function(t){return function(e){return null==t?void 0:fr(t,e)}},Sn.pull=Fo,Sn.pullAll=Vo,Sn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?Dr(t,e,$i(n,2)):t},Sn.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?Dr(t,e,void 0,n):t},Sn.pullAt=Wo,Sn.range=ns,Sn.rangeRight=rs,Sn.rearg=Sa,Sn.reject=function(t,e){return(Na(t)?ce:ir)(t,Aa($i(e,3)))},Sn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=$i(e,3);++r<o;){var a=t[r];e(a,r,t)&&(n.push(a),i.push(r))}return Ir(t,i),n},Sn.rest=function(t,e){if("function"!=typeof t)throw new mt(o);return Br(t,e=void 0===e?e:ru(e))},Sn.reverse=Uo,Sn.sampleSize=function(t,e,n){return e=(n?uo(t,e,n):void 0===e)?1:ru(e),(Na(t)?Fn:Fr)(t,e)},Sn.set=function(t,e,n){return null==t?t:Vr(t,e,n)},Sn.setWith=function(t,e,n,r){return r="function"==typeof r?r:void 0,null==t?t:Vr(t,e,n,r)},Sn.shuffle=function(t){return(Na(t)?Vn:qr)(t)},Sn.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&uo(t,e,n)?(e=0,n=r):(e=null==e?0:ru(e),n=void 0===n?r:ru(n)),Gr(t,e,n)):[]},Sn.sortBy=da,Sn.sortedUniq=function(t){return t&&t.length?Yr(t):[]},Sn.sortedUniqBy=function(t,e){return t&&t.length?Yr(t,$i(e,2)):[]},Sn.split=function(t,e,n){return n&&"number"!=typeof n&&uo(t,e,n)&&(e=n=void 0),(n=void 0===n?4294967295:n>>>0)?(t=uu(t))&&("string"==typeof e||null!=e&&!Xa(e))&&!(e=Zr(e))&&ze(t)?li(He(t),0,n):t.split(e,n):[]},Sn.spread=function(t,e){if("function"!=typeof t)throw new mt(o);return e=null==e?0:an(ru(e),0),Br((function(n){var r=n[e],i=li(n,0,e);return r&&de(i,r),oe(t,this,i)}))},Sn.tail=function(t){var e=null==t?0:t.length;return e?Gr(t,1,e):[]},Sn.take=function(t,e,n){return t&&t.length?Gr(t,0,(e=n||void 0===e?1:ru(e))<0?0:e):[]},Sn.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?Gr(t,(e=r-(e=n||void 0===e?1:ru(e)))<0?0:e,r):[]},Sn.takeRightWhile=function(t,e){return t&&t.length?ei(t,$i(e,3),!1,!0):[]},Sn.takeWhile=function(t,e){return t&&t.length?ei(t,$i(e,3)):[]},Sn.tap=function(t,e){return e(t),t},Sn.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new mt(o);return Ua(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),ba(t,e,{leading:r,maxWait:e,trailing:i})},Sn.thru=na,Sn.toArray=eu,Sn.toPairs=Pu,Sn.toPairsIn=Su,Sn.toPath=function(t){return Na(t)?pe(t,Mo):Za(t)?[t]:gi(Eo(uu(t)))},Sn.toPlainObject=au,Sn.transform=function(t,e,n){var r=Na(t),i=r||Ra(t)||Ja(t);if(e=$i(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:Ua(t)&&Fa(o)?kn(Gt(t)):{}}return(i?ue:sr)(t,(function(t,r,i){return e(n,t,r,i)})),n},Sn.unary=function(t){return va(t,1)},Sn.union=qo,Sn.unionBy=Go,Sn.unionWith=Ho,Sn.uniq=function(t){return t&&t.length?Jr(t):[]},Sn.uniqBy=function(t,e){return t&&t.length?Jr(t,$i(e,2)):[]},Sn.uniqWith=function(t,e){return e="function"==typeof e?e:void 0,t&&t.length?Jr(t,void 0,e):[]},Sn.unset=function(t,e){return null==t||Qr(t,e)},Sn.unzip=Ko,Sn.unzipWith=Xo,Sn.update=function(t,e,n){return null==t?t:ti(t,e,ai(n))},Sn.updateWith=function(t,e,n,r){return r="function"==typeof r?r:void 0,null==t?t:ti(t,e,ai(n),r)},Sn.values=ku,Sn.valuesIn=function(t){return null==t?[]:je(t,xu(t))},Sn.without=Yo,Sn.words=Fu,Sn.wrap=function(t,e){return Ma(ai(e),t)},Sn.xor=$o,Sn.xorBy=Zo,Sn.xorWith=Jo,Sn.zip=Qo,Sn.zipObject=function(t,e){return ii(t||[],e||[],Un)},Sn.zipObjectDeep=function(t,e){return ii(t||[],e||[],Vr)},Sn.zipWith=ta,Sn.entries=Pu,Sn.entriesIn=Su,Sn.extend=lu,Sn.extendWith=cu,$u(Sn,Sn),Sn.add=as,Sn.attempt=Vu,Sn.camelCase=Cu,Sn.capitalize=ju,Sn.ceil=us,Sn.clamp=function(t,e,n){return void 0===n&&(n=e,e=void 0),void 0!==n&&(n=(n=ou(n))==n?n:0),void 0!==e&&(e=(e=ou(e))==e?e:0),Yn(ou(t),e,n)},Sn.clone=function(t){return $n(t,4)},Sn.cloneDeep=function(t){return $n(t,5)},Sn.cloneDeepWith=function(t,e){return $n(t,5,e="function"==typeof e?e:void 0)},Sn.cloneWith=function(t,e){return $n(t,4,e="function"==typeof e?e:void 0)},Sn.conformsTo=function(t,e){return null==e||Zn(t,e,bu(e))},Sn.deburr=Tu,Sn.defaultTo=function(t,e){return null==t||t!=t?e:t},Sn.divide=ss,Sn.endsWith=function(t,e,n){t=uu(t),e=Zr(e);var r=t.length,i=n=void 0===n?r:Yn(ru(n),0,r);return(n-=e.length)>=0&&t.slice(n,i)==e},Sn.eq=ka,Sn.escape=function(t){return(t=uu(t))&&z.test(t)?t.replace(R,Re):t},Sn.escapeRegExp=function(t){return(t=uu(t))&&K.test(t)?t.replace(H,"\\$&"):t},Sn.every=function(t,e,n){var r=Na(t)?le:nr;return n&&uo(t,e,n)&&(e=void 0),r(t,$i(e,3))},Sn.find=oa,Sn.findIndex=To,Sn.findKey=function(t,e){return _e(t,$i(e,3),sr)},Sn.findLast=aa,Sn.findLastIndex=No,Sn.findLastKey=function(t,e){return _e(t,$i(e,3),lr)},Sn.floor=ls,Sn.forEach=ua,Sn.forEachRight=sa,Sn.forIn=function(t,e){return null==t?t:ar(t,$i(e,3),xu)},Sn.forInRight=function(t,e){return null==t?t:ur(t,$i(e,3),xu)},Sn.forOwn=function(t,e){return t&&sr(t,$i(e,3))},Sn.forOwnRight=function(t,e){return t&&lr(t,$i(e,3))},Sn.get=yu,Sn.gt=Ca,Sn.gte=ja,Sn.has=function(t,e){return null!=t&&ro(t,e,yr)},Sn.hasIn=vu,Sn.head=Io,Sn.identity=Hu,Sn.includes=function(t,e,n,r){t=Ia(t)?t:ku(t),n=n&&!r?ru(n):0;var i=t.length;return n<0&&(n=an(i+n,0)),$a(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&xe(t,e,n)>-1},Sn.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:ru(n);return i<0&&(i=an(r+i,0)),xe(t,e,i)},Sn.inRange=function(t,e,n){return e=nu(e),void 0===n?(n=e,e=0):n=nu(n),function(t,e,n){return t>=un(e,n)&&t<an(e,n)}(t=ou(t),e,n)},Sn.invoke=_u,Sn.isArguments=Ta,Sn.isArray=Na,Sn.isArrayBuffer=Da,Sn.isArrayLike=Ia,Sn.isArrayLikeObject=La,Sn.isBoolean=function(t){return!0===t||!1===t||qa(t)&&pr(t)==c},Sn.isBuffer=Ra,Sn.isDate=Ba,Sn.isElement=function(t){return qa(t)&&1===t.nodeType&&!Ka(t)},Sn.isEmpty=function(t){if(null==t)return!0;if(Ia(t)&&(Na(t)||"string"==typeof t||"function"==typeof t.splice||Ra(t)||Ja(t)||Ta(t)))return!t.length;var e=no(t);if(e==y||e==_)return!t.size;if(fo(t))return!Ar(t).length;for(var n in t)if(At.call(t,n))return!1;return!0},Sn.isEqual=function(t,e){return br(t,e)},Sn.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:void 0)?n(t,e):void 0;return void 0===r?br(t,e,void 0,n):!!r},Sn.isError=za,Sn.isFinite=function(t){return"number"==typeof t&&nn(t)},Sn.isFunction=Fa,Sn.isInteger=Va,Sn.isLength=Wa,Sn.isMap=Ga,Sn.isMatch=function(t,e){return t===e||xr(t,e,Ji(e))},Sn.isMatchWith=function(t,e,n){return n="function"==typeof n?n:void 0,xr(t,e,Ji(e),n)},Sn.isNaN=function(t){return Ha(t)&&t!=+t},Sn.isNative=function(t){if(co(t))throw new ht("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Or(t)},Sn.isNil=function(t){return null==t},Sn.isNull=function(t){return null===t},Sn.isNumber=Ha,Sn.isObject=Ua,Sn.isObjectLike=qa,Sn.isPlainObject=Ka,Sn.isRegExp=Xa,Sn.isSafeInteger=function(t){return Va(t)&&t>=-9007199254740991&&t<=9007199254740991},Sn.isSet=Ya,Sn.isString=$a,Sn.isSymbol=Za,Sn.isTypedArray=Ja,Sn.isUndefined=function(t){return void 0===t},Sn.isWeakMap=function(t){return qa(t)&&no(t)==O},Sn.isWeakSet=function(t){return qa(t)&&"[object WeakSet]"==pr(t)},Sn.join=function(t,e){return null==t?"":rn.call(t,e)},Sn.kebabCase=Nu,Sn.last=zo,Sn.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return void 0!==n&&(i=(i=ru(n))<0?an(r+i,0):un(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):be(t,we,i,!0)},Sn.lowerCase=Du,Sn.lowerFirst=Iu,Sn.lt=Qa,Sn.lte=tu,Sn.max=function(t){return t&&t.length?rr(t,Hu,dr):void 0},Sn.maxBy=function(t,e){return t&&t.length?rr(t,$i(e,2),dr):void 0},Sn.mean=function(t){return Ae(t,Hu)},Sn.meanBy=function(t,e){return Ae(t,$i(e,2))},Sn.min=function(t){return t&&t.length?rr(t,Hu,Mr):void 0},Sn.minBy=function(t,e){return t&&t.length?rr(t,$i(e,2),Mr):void 0},Sn.stubArray=is,Sn.stubFalse=os,Sn.stubObject=function(){return{}},Sn.stubString=function(){return""},Sn.stubTrue=function(){return!0},Sn.multiply=fs,Sn.nth=function(t,e){return t&&t.length?jr(t,ru(e)):void 0},Sn.noConflict=function(){return Kt._===this&&(Kt._=kt),this},Sn.noop=Zu,Sn.now=ya,Sn.pad=function(t,e,n){t=uu(t);var r=(e=ru(e))?Ge(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return Ti(Qe(i),n)+t+Ti(Je(i),n)},Sn.padEnd=function(t,e,n){t=uu(t);var r=(e=ru(e))?Ge(t):0;return e&&r<e?t+Ti(e-r,n):t},Sn.padStart=function(t,e,n){t=uu(t);var r=(e=ru(e))?Ge(t):0;return e&&r<e?Ti(e-r,n)+t:t},Sn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),ln(uu(t).replace(Y,""),e||0)},Sn.random=function(t,e,n){if(n&&"boolean"!=typeof n&&uo(t,e,n)&&(e=n=void 0),void 0===n&&("boolean"==typeof e?(n=e,e=void 0):"boolean"==typeof t&&(n=t,t=void 0)),void 0===t&&void 0===e?(t=0,e=1):(t=nu(t),void 0===e?(e=t,t=0):e=nu(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=cn();return un(t+i*(e-t+Ut("1e-"+((i+"").length-1))),e)}return Lr(t,e)},Sn.reduce=function(t,e,n){var r=Na(t)?ye:Pe,i=arguments.length<3;return r(t,$i(e,4),n,i,tr)},Sn.reduceRight=function(t,e,n){var r=Na(t)?ve:Pe,i=arguments.length<3;return r(t,$i(e,4),n,i,er)},Sn.repeat=function(t,e,n){return e=(n?uo(t,e,n):void 0===e)?1:ru(e),Rr(uu(t),e)},Sn.replace=function(){var t=arguments,e=uu(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Sn.result=function(t,e,n){var r=-1,i=(e=ui(e,t)).length;for(i||(i=1,t=void 0);++r<i;){var o=null==t?void 0:t[Mo(e[r])];void 0===o&&(r=i,o=n),t=Fa(o)?o.call(t):o}return t},Sn.round=hs,Sn.runInContext=t,Sn.sample=function(t){return(Na(t)?zn:zr)(t)},Sn.size=function(t){if(null==t)return 0;if(Ia(t))return $a(t)?Ge(t):t.length;var e=no(t);return e==y||e==_?t.size:Ar(t).length},Sn.snakeCase=Lu,Sn.some=function(t,e,n){var r=Na(t)?ge:Hr;return n&&uo(t,e,n)&&(e=void 0),r(t,$i(e,3))},Sn.sortedIndex=function(t,e){return Kr(t,e)},Sn.sortedIndexBy=function(t,e,n){return Xr(t,e,$i(n,2))},Sn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Kr(t,e);if(r<n&&ka(t[r],e))return r}return-1},Sn.sortedLastIndex=function(t,e){return Kr(t,e,!0)},Sn.sortedLastIndexBy=function(t,e,n){return Xr(t,e,$i(n,2),!0)},Sn.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var n=Kr(t,e,!0)-1;if(ka(t[n],e))return n}return-1},Sn.startCase=Ru,Sn.startsWith=function(t,e,n){return t=uu(t),n=null==n?0:Yn(ru(n),0,t.length),e=Zr(e),t.slice(n,n+e.length)==e},Sn.subtract=ps,Sn.sum=function(t){return t&&t.length?Se(t,Hu):0},Sn.sumBy=function(t,e){return t&&t.length?Se(t,$i(e,2)):0},Sn.template=function(t,e,n){var r=Sn.templateSettings;n&&uo(t,e,n)&&(e=void 0),t=uu(t),e=cu({},e,r,Fi);var i,o,a=cu({},e.imports,r.imports,Fi),u=bu(a),s=je(a,u),l=0,c=e.interpolate||ct,f="__p += '",h=vt((e.escape||ct).source+"|"+c.source+"|"+(c===W?nt:ct).source+"|"+(e.evaluate||ct).source+"|$","g"),p="//# sourceURL="+(At.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++zt+"]")+"\n";t.replace(h,(function(e,n,r,a,u,s){return r||(r=a),f+=t.slice(l,s).replace(ft,Be),n&&(i=!0,f+="' +\n__e("+n+") +\n'"),u&&(o=!0,f+="';\n"+u+";\n__p += '"),r&&(f+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=s+e.length,e})),f+="';\n";var d=At.call(e,"variable")&&e.variable;d||(f="with (obj) {\n"+f+"\n}\n"),f=(o?f.replace(N,""):f).replace(D,"$1").replace(I,"$1;"),f="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var y=Vu((function(){return pt(u,p+"return "+f).apply(void 0,s)}));if(y.source=f,za(y))throw y;return y},Sn.times=function(t,e){if((t=ru(t))<1||t>9007199254740991)return[];var n=4294967295,r=un(t,4294967295);t-=4294967295;for(var i=ke(r,e=$i(e));++n<t;)e(n);return i},Sn.toFinite=nu,Sn.toInteger=ru,Sn.toLength=iu,Sn.toLower=function(t){return uu(t).toLowerCase()},Sn.toNumber=ou,Sn.toSafeInteger=function(t){return t?Yn(ru(t),-9007199254740991,9007199254740991):0===t?t:0},Sn.toString=uu,Sn.toUpper=function(t){return uu(t).toUpperCase()},Sn.trim=function(t,e,n){if((t=uu(t))&&(n||void 0===e))return t.replace(X,"");if(!t||!(e=Zr(e)))return t;var r=He(t),i=He(e);return li(r,Ne(r,i),De(r,i)+1).join("")},Sn.trimEnd=function(t,e,n){if((t=uu(t))&&(n||void 0===e))return t.replace($,"");if(!t||!(e=Zr(e)))return t;var r=He(t);return li(r,0,De(r,He(e))+1).join("")},Sn.trimStart=function(t,e,n){if((t=uu(t))&&(n||void 0===e))return t.replace(Y,"");if(!t||!(e=Zr(e)))return t;var r=He(t);return li(r,Ne(r,He(e))).join("")},Sn.truncate=function(t,e){var n=30,r="...";if(Ua(e)){var i="separator"in e?e.separator:i;n="length"in e?ru(e.length):n,r="omission"in e?Zr(e.omission):r}var o=(t=uu(t)).length;if(ze(t)){var a=He(t);o=a.length}if(n>=o)return t;var u=n-Ge(r);if(u<1)return r;var s=a?li(a,0,u).join(""):t.slice(0,u);if(void 0===i)return s+r;if(a&&(u+=s.length-u),Xa(i)){if(t.slice(u).search(i)){var l,c=s;for(i.global||(i=vt(i.source,uu(rt.exec(i))+"g")),i.lastIndex=0;l=i.exec(c);)var f=l.index;s=s.slice(0,void 0===f?u:f)}}else if(t.indexOf(Zr(i),u)!=u){var h=s.lastIndexOf(i);h>-1&&(s=s.slice(0,h))}return s+r},Sn.unescape=function(t){return(t=uu(t))&&B.test(t)?t.replace(L,Ke):t},Sn.uniqueId=function(t){var e=++Et;return uu(t)+e},Sn.upperCase=Bu,Sn.upperFirst=zu,Sn.each=ua,Sn.eachRight=sa,Sn.first=Io,$u(Sn,(cs={},sr(Sn,(function(t,e){At.call(Sn.prototype,e)||(cs[e]=t)})),cs),{chain:!1}),Sn.VERSION="4.17.20",ue(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Sn[t].placeholder=Sn})),ue(["drop","take"],(function(t,e){Tn.prototype[t]=function(n){n=void 0===n?1:an(ru(n),0);var r=this.__filtered__&&!e?new Tn(this):this.clone();return r.__filtered__?r.__takeCount__=un(n,r.__takeCount__):r.__views__.push({size:un(n,4294967295),type:t+(r.__dir__<0?"Right":"")}),r},Tn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),ue(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;Tn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:$i(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),ue(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Tn.prototype[t]=function(){return this[n](1).value()[0]}})),ue(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Tn.prototype[t]=function(){return this.__filtered__?new Tn(this):this[n](1)}})),Tn.prototype.compact=function(){return this.filter(Hu)},Tn.prototype.find=function(t){return this.filter(t).head()},Tn.prototype.findLast=function(t){return this.reverse().find(t)},Tn.prototype.invokeMap=Br((function(t,e){return"function"==typeof t?new Tn(this):this.map((function(n){return mr(n,t,e)}))})),Tn.prototype.reject=function(t){return this.filter(Aa($i(t)))},Tn.prototype.slice=function(t,e){t=ru(t);var n=this;return n.__filtered__&&(t>0||e<0)?new Tn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),void 0!==e&&(n=(e=ru(e))<0?n.dropRight(-e):n.take(e-t)),n)},Tn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Tn.prototype.toArray=function(){return this.take(4294967295)},sr(Tn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=Sn[r?"take"+("last"==e?"Right":""):e],o=r||/^find/.test(e);i&&(Sn.prototype[e]=function(){var e=this.__wrapped__,a=r?[1]:arguments,u=e instanceof Tn,s=a[0],l=u||Na(e),c=function(t){var e=i.apply(Sn,de([t],a));return r&&f?e[0]:e};l&&n&&"function"==typeof s&&1!=s.length&&(u=l=!1);var f=this.__chain__,h=!!this.__actions__.length,p=o&&!f,d=u&&!h;if(!o&&l){e=d?e:new Tn(this);var y=t.apply(e,a);return y.__actions__.push({func:na,args:[c],thisArg:void 0}),new jn(y,f)}return p&&d?t.apply(this,a):(y=this.thru(c),p?r?y.value()[0]:y.value():y)})})),ue(["pop","push","shift","sort","splice","unshift"],(function(t){var e=_t[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Sn.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(Na(i)?i:[],t)}return this[n]((function(n){return e.apply(Na(n)?n:[],t)}))}})),sr(Tn.prototype,(function(t,e){var n=Sn[e];if(n){var r=n.name+"";At.call(_n,r)||(_n[r]=[]),_n[r].push({name:e,func:n})}})),_n[Si(void 0,2).name]=[{name:"wrapper",func:void 0}],Tn.prototype.clone=function(){var t=new Tn(this.__wrapped__);return t.__actions__=gi(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=gi(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=gi(this.__views__),t},Tn.prototype.reverse=function(){if(this.__filtered__){var t=new Tn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Tn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=Na(t),r=e<0,i=n?t.length:0,o=function(t,e,n){var r=-1,i=n.length;for(;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=un(e,t+a);break;case"takeRight":t=an(t,e-a)}}return{start:t,end:e}}(0,i,this.__views__),a=o.start,u=o.end,s=u-a,l=r?u:a-1,c=this.__iteratees__,f=c.length,h=0,p=un(s,this.__takeCount__);if(!n||!r&&i==s&&p==s)return ni(t,this.__actions__);var d=[];t:for(;s--&&h<p;){for(var y=-1,v=t[l+=e];++y<f;){var g=c[y],m=g.iteratee,_=g.type,b=m(v);if(2==_)v=b;else if(!b){if(1==_)continue t;break t}}d[h++]=v}return d},Sn.prototype.at=ra,Sn.prototype.chain=function(){return ea(this)},Sn.prototype.commit=function(){return new jn(this.value(),this.__chain__)},Sn.prototype.next=function(){void 0===this.__values__&&(this.__values__=eu(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Sn.prototype.plant=function(t){for(var e,n=this;n instanceof Cn;){var r=So(n);r.__index__=0,r.__values__=void 0,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},Sn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Tn){var e=t;return this.__actions__.length&&(e=new Tn(this)),(e=e.reverse()).__actions__.push({func:na,args:[Uo],thisArg:void 0}),new jn(e,this.__chain__)}return this.thru(Uo)},Sn.prototype.toJSON=Sn.prototype.valueOf=Sn.prototype.value=function(){return ni(this.__wrapped__,this.__actions__)},Sn.prototype.first=Sn.prototype.head,Jt&&(Sn.prototype[Jt]=function(){return this}),Sn}();Kt._=Xe,void 0===(i=function(){return Xe}.call(e,n,e,r))||(r.exports=i)}).call(this)}).call(this,n(34),n(54)(t))},function(t,e,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function i(){for(var t=[],e=0;e<arguments.length;e++){var r=arguments[e];if(r){var o=typeof r;if("string"===o||"number"===o)t.push(r);else if(Array.isArray(r)&&r.length){var a=i.apply(null,r);a&&t.push(a)}else if("object"===o)for(var u in r)n.call(r,u)&&r[u]&&t.push(u)}}return t.join(" ")}t.exports?(i.default=i,t.exports=i):void 0===(r=function(){return i}.apply(e,[]))||(t.exports=r)}()},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.getLinearRegression=e.findEntryInArray=e.interpolateNumber=e.hasDuplicate=e.getAnyElementOfObject=e.getPercentValue=e.uniqueId=e.isNumOrStr=e.isNumber=e.isPercent=e.mathSign=void 0;var i=r(n(3));e.mathSign=function(t){return 0===t?0:t>0?1:-1};e.isPercent=function(t){return i.default.isString(t)&&t.indexOf("%")===t.length-1};e.isNumber=function(t){return i.default.isNumber(t)&&!i.default.isNaN(t)};e.isNumOrStr=function(t){return e.isNumber(t)||i.default.isString(t)};var o=0;e.uniqueId=function(t){return""+(t||"")+ ++o};e.getPercentValue=function(t,n,r,o){if(void 0===r&&(r=0),void 0===o&&(o=!1),!e.isNumber(t)&&!i.default.isString(t))return r;var a;if(e.isPercent(t)){var u=t.indexOf("%");a=n*parseFloat(t.slice(0,u))/100}else a=+t;return i.default.isNaN(a)&&(a=r),o&&a>n&&(a=n),a};e.getAnyElementOfObject=function(t){if(!t)return null;var e=Object.keys(t);return e&&e.length?t[e[0]]:null};e.hasDuplicate=function(t){if(!i.default.isArray(t))return!1;for(var e=t.length,n={},r=0;r<e;r++){if(n[t[r]])return!0;n[t[r]]=!0}return!1};e.interpolateNumber=function(t,n){return e.isNumber(t)&&e.isNumber(n)?function(e){return t+e*(n-t)}:function(){return n}},e.findEntryInArray=function(t,e,n){return t&&t.length?t.find((function(t){return t&&("function"==typeof e?e(t):i.default.get(t,e))===n})):null};e.getLinearRegression=function(t){if(!t||!t.length)return null;for(var e=t.length,n=0,r=0,i=0,o=0,a=1/0,u=-1/0,s=0;s<e;s++)n+=t[s].cx,r+=t[s].cy,i+=t[s].cx*t[s].cy,o+=t[s].cx*t[s].cx,a=Math.min(a,t[s].cx),u=Math.max(u,t[s].cx);var l=e*o!=n*n?(e*i-n*r)/(e*o-n*n):0;return{xmin:a,xmax:u,a:l,b:(r-l*n)/e}}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Layer=void 0;var a=o(n(0)),u=o(n(4)),s=n(2);e.Layer=function(t){var e=t.children,n=t.className,o=i(t,["children","className"]),l=u.default("recharts-layer",n);return a.default.createElement("g",r({className:l},s.filterProps(o,!0)),e)}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&i(e,t,n);return o(e,t),e},u=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.parseDomainOfCategoryAxis=e.getBandSizeOfAxis=e.parseSpecifiedDomain=e.MAX_VALUE_REG=e.MIN_VALUE_REG=e.getDomainOfStackGroups=e.getStackedDataOfItem=e.getBaseValueOfBar=e.getCateCoordinateOfBar=e.getCateCoordinateOfLine=e.getTicksOfScale=e.calculateDomainOfTicks=e.getStackGroupsByAxisId=e.getStackedData=e.offsetPositive=e.offsetSign=e.truncateByDomain=e.findPositionOfBar=e.checkDomainOfScale=e.parseScale=e.combineEventHandlers=e.getTicksOfAxis=e.getCoordinatesOfGrid=e.isCategoricalAxis=e.getDomainOfItemsWithSameAxis=e.parseErrorBarsOfAxis=e.getDomainOfErrorBars=e.appendOffsetOfLegend=e.getBarPosition=e.getBarSizeList=e.getLegendProps=e.getMainColorOfGraphicItem=e.calculateActiveTickIndex=e.getDomainOfDataByKey=e.getValueByDataKey=void 0;var l=s(n(3)),c=n(242),f=a(n(111)),h=n(70),p=n(5),d=n(55),y=n(9);function v(t,e,n){return l.default.isNil(t)||l.default.isNil(e)?n:p.isNumOrStr(e)?l.default.get(t,e,n):l.default.isFunction(e)?e(t):n}function g(t,e,n,r){var i=l.default.flatMap(t,(function(t){return v(t,e)}));if("number"===n){var o=i.filter((function(t){return p.isNumber(t)||parseFloat(t)}));return o.length?[l.default.min(o),l.default.max(o)]:[1/0,-1/0]}return(r?i.filter((function(t){return!l.default.isNil(t)})):i).map((function(t){return p.isNumOrStr(t)||t instanceof Date?t:""}))}e.getValueByDataKey=v,e.getDomainOfDataByKey=g;e.calculateActiveTickIndex=function(t,e,n,r){var i;void 0===e&&(e=[]);var o=-1,a=null!==(i=null==e?void 0:e.length)&&void 0!==i?i:0;if(a>1){if(r&&"angleAxis"===r.axisType&&Math.abs(Math.abs(r.range[1]-r.range[0])-360)<=1e-6)for(var u=r.range,s=0;s<a;s++){var l=s>0?n[s-1].coordinate:n[a-1].coordinate,c=n[s].coordinate,f=s>=a-1?n[0].coordinate:n[s+1].coordinate,h=void 0;if(p.mathSign(c-l)!==p.mathSign(f-c)){var d=[];if(p.mathSign(f-c)===p.mathSign(u[1]-u[0])){h=f;var y=c+u[1]-u[0];d[0]=Math.min(y,(y+l)/2),d[1]=Math.max(y,(y+l)/2)}else{h=l;var v=f+u[1]-u[0];d[0]=Math.min(c,(v+c)/2),d[1]=Math.max(c,(v+c)/2)}var g=[Math.min(c,(h+c)/2),Math.max(c,(h+c)/2)];if(t>g[0]&&t<=g[1]||t>=d[0]&&t<=d[1]){o=n[s].index;break}}else{var m=Math.min(l,f),_=Math.max(l,f);if(t>(m+c)/2&&t<=(_+c)/2){o=n[s].index;break}}}else for(s=0;s<a;s++)if(0===s&&t<=(e[s].coordinate+e[s+1].coordinate)/2||s>0&&s<a-1&&t>(e[s].coordinate+e[s-1].coordinate)/2&&t<=(e[s].coordinate+e[s+1].coordinate)/2||s===a-1&&t>(e[s].coordinate+e[s-1].coordinate)/2){o=e[s].index;break}}else o=0;return o};e.getMainColorOfGraphicItem=function(t){var e,n=t.type.displayName,r=t.props,i=r.stroke,o=r.fill;switch(n){case"Line":e=i;break;case"Area":case"Radar":e=i&&"none"!==i?i:o;break;default:e=o}return e};e.getLegendProps=function(t){var n,i=t.children,o=t.formatedGraphicalItems,a=t.legendWidth,u=t.legendContent,s=y.findChildByType(i,d.Legend.displayName);return s?(n=s.props&&s.props.payload?s.props&&s.props.payload:"children"===u?(o||[]).reduce((function(t,e){var n=e.item,r=e.props,i=r.sectors||r.data||[];return t.concat(i.map((function(t){return{type:s.props.iconType||n.props.legendType,value:t.name,color:t.fill,payload:t}})))}),[]):(o||[]).map((function(t){var n=t.item,r=n.props,i=r.dataKey,o=r.name,a=r.legendType;return{inactive:r.hide,dataKey:i,type:s.props.iconType||a||"square",color:e.getMainColorOfGraphicItem(n),value:o||i,payload:n.props}})),r(r(r({},s.props),d.Legend.getWithHeight(s,a)),{payload:n,item:s})):null};e.getBarSizeList=function(t){var e=t.barSize,n=t.stackGroups,r=void 0===n?{}:n;if(!r)return{};for(var i={},o=Object.keys(r),a=0,u=o.length;a<u;a++)for(var s=r[o[a]].stackGroups,c=Object.keys(s),f=0,h=c.length;f<h;f++){var p=s[c[f]],d=p.items,v=p.cateAxisId,g=d.filter((function(t){return y.getDisplayName(t.type).indexOf("Bar")>=0}));if(g&&g.length){var m=g[0].props.barSize,_=g[0].props[v];i[_]||(i[_]=[]),i[_].push({item:g[0],stackList:g.slice(1),barSize:l.default.isNil(m)?e:m})}}return i};e.getBarPosition=function(t){var e=t.barGap,n=t.barCategoryGap,r=t.bandSize,i=t.sizeList,o=void 0===i?[]:i,a=t.maxBarSize,s=o.length;if(s<1)return null;var l,c=p.getPercentValue(e,r,0,!0);if(o[0].barSize===+o[0].barSize){var f=!1,h=r/s,d=o.reduce((function(t,e){return t+e.barSize||0}),0);(d+=(s-1)*c)>=r&&(d-=(s-1)*c,c=0),d>=r&&h>0&&(f=!0,d=s*(h*=.9));var y={offset:((r-d)/2>>0)-c,size:0};l=o.reduce((function(t,e){var n=u(t,[{item:e.item,position:{offset:y.offset+y.size+c,size:f?h:e.barSize}}]);return y=n[n.length-1].position,e.stackList&&e.stackList.length&&e.stackList.forEach((function(t){n.push({item:t,position:y})})),n}),[])}else{var v=p.getPercentValue(n,r,0,!0);r-2*v-(s-1)*c<=0&&(c=0);var g=(r-2*v-(s-1)*c)/s;g>1&&(g>>=0);var m=a===+a?Math.min(g,a):g;l=o.reduce((function(t,e,n){var r=u(t,[{item:e.item,position:{offset:v+(g+c)*n+(g-m)/2,size:m}}]);return e.stackList&&e.stackList.length&&e.stackList.forEach((function(t){r.push({item:t,position:r[r.length-1].position})})),r}),[])}return l};e.appendOffsetOfLegend=function(t,n,i,o){var a,u,s=i.children,l=i.width,c=i.margin,f=l-(c.left||0)-(c.right||0),h=e.getLegendProps({children:s,legendWidth:f}),d=t;if(h){var y=o||{},v=h.align,g=h.verticalAlign,m=h.layout;("vertical"===m||"horizontal"===m&&"center"===g)&&p.isNumber(t[v])&&(d=r(r({},t),((a={})[v]=d[v]+(y.width||0),a))),("horizontal"===m||"vertical"===m&&"center"===v)&&p.isNumber(t[g])&&(d=r(r({},t),((u={})[g]=d[g]+(y.height||0),u)))}return d};e.getDomainOfErrorBars=function(t,e,n,r){var i=e.props.children,o=y.findAllByType(i,"ErrorBar").filter((function(t){var e=t.props.direction;return!(!l.default.isNil(e)&&!l.default.isNil(r))||r.indexOf(e)>=0}));if(o&&o.length){var a=o.map((function(t){return t.props.dataKey}));return t.reduce((function(t,e){var r=v(e,n,0),i=l.default.isArray(r)?[l.default.min(r),l.default.max(r)]:[r,r],o=a.reduce((function(t,n){var r=v(e,n,0),o=i[0]-Math.abs(l.default.isArray(r)?r[0]:r),a=i[1]+Math.abs(l.default.isArray(r)?r[1]:r);return[Math.min(o,t[0]),Math.max(a,t[1])]}),[1/0,-1/0]);return[Math.min(o[0],t[0]),Math.max(o[1],t[1])]}),[1/0,-1/0])}return null};e.parseErrorBarsOfAxis=function(t,n,r,i){var o=n.map((function(n){return e.getDomainOfErrorBars(t,n,r,i)})).filter((function(t){return!l.default.isNil(t)}));return o&&o.length?o.reduce((function(t,e){return[Math.min(t[0],e[0]),Math.max(t[1],e[1])]}),[1/0,-1/0]):null};e.getDomainOfItemsWithSameAxis=function(t,n,r,i){var o=n.map((function(n){var o=n.props.dataKey;return"number"===r&&o&&e.getDomainOfErrorBars(t,n,o)||g(t,o,r,i)}));if("number"===r)return o.reduce((function(t,e){return[Math.min(t[0],e[0]),Math.max(t[1],e[1])]}),[1/0,-1/0]);var a={};return o.reduce((function(t,e){for(var n=0,r=e.length;n<r;n++)a[e[n]]||(a[e[n]]=!0,t.push(e[n]));return t}),[])};e.isCategoricalAxis=function(t,e){return"horizontal"===t&&"xAxis"===e||"vertical"===t&&"yAxis"===e||"centric"===t&&"angleAxis"===e||"radial"===t&&"radiusAxis"===e};e.getCoordinatesOfGrid=function(t,e,n){var r,i,o=t.map((function(t){return t.coordinate===e&&(r=!0),t.coordinate===n&&(i=!0),t.coordinate}));return r||o.push(e),i||o.push(n),o};e.getTicksOfAxis=function(t,e,n){if(!t)return null;var r=t.scale,i=t.duplicateDomain,o=t.type,a=t.range,u=(e||n)&&"category"===o&&r.bandwidth?r.bandwidth()/2:0;return u="angleAxis"===t.axisType?2*p.mathSign(a[0]-a[1])*u:u,e&&(t.ticks||t.niceTicks)?(t.ticks||t.niceTicks).map((function(t){var e=i?i.indexOf(t):t;return{coordinate:r(e)+u,value:t,offset:u}})):t.isCategorical&&t.categoricalDomain?t.categoricalDomain.map((function(t,e){return{coordinate:r(t)+u,value:t,index:e,offset:u}})):r.ticks&&!n?r.ticks(t.tickCount).map((function(t){return{coordinate:r(t)+u,value:t,offset:u}})):r.domain().map((function(t,e){return{coordinate:r(t)+u,value:i?i[t]:t,index:e,offset:u}}))};e.combineEventHandlers=function(t,e,n){var r;return l.default.isFunction(n)?r=n:l.default.isFunction(e)&&(r=e),l.default.isFunction(t)||r?function(e,n,i,o){l.default.isFunction(t)&&t(e,n,i,o),l.default.isFunction(r)&&r(e,n,i,o)}:null};e.parseScale=function(t,e){var n=t.scale,r=t.type,i=t.layout,o=t.axisType;if("auto"===n)return"radial"===i&&"radiusAxis"===o?{scale:f.scaleBand(),realScaleType:"band"}:"radial"===i&&"angleAxis"===o?{scale:f.scaleLinear(),realScaleType:"linear"}:"category"===r&&e&&(e.indexOf("LineChart")>=0||e.indexOf("AreaChart")>=0||e.indexOf("ComposedChart")>=0)?{scale:f.scalePoint(),realScaleType:"point"}:"category"===r?{scale:f.scaleBand(),realScaleType:"band"}:{scale:f.scaleLinear(),realScaleType:"linear"};if(l.default.isString(n)){var a="scale"+l.default.upperFirst(n);return{scale:(f[a]||f.scalePoint)(),realScaleType:f[a]?a:"point"}}return l.default.isFunction(n)?{scale:n}:{scale:f.scalePoint(),realScaleType:"point"}};e.checkDomainOfScale=function(t){var e=t.domain();if(e&&!(e.length<=2)){var n=e.length,r=t.range(),i=Math.min(r[0],r[1])-1e-4,o=Math.max(r[0],r[1])+1e-4,a=t(e[0]),u=t(e[n-1]);(a<i||a>o||u<i||u>o)&&t.domain([e[0],e[n-1]])}};e.findPositionOfBar=function(t,e){if(!t)return null;for(var n=0,r=t.length;n<r;n++)if(t[n].item===e)return t[n].position;return null};e.truncateByDomain=function(t,e){if(!e||2!==e.length||!p.isNumber(e[0])||!p.isNumber(e[1]))return t;var n=Math.min(e[0],e[1]),r=Math.max(e[0],e[1]),i=[t[0],t[1]];return(!p.isNumber(t[0])||t[0]<n)&&(i[0]=n),(!p.isNumber(t[1])||t[1]>r)&&(i[1]=r),i[0]>r&&(i[0]=r),i[1]<n&&(i[1]=n),i};e.offsetSign=function(t){var e=t.length;if(!(e<=0))for(var n=0,r=t[0].length;n<r;++n)for(var i=0,o=0,a=0;a<e;++a){var u=l.default.isNaN(t[a][n][1])?t[a][n][0]:t[a][n][1];u>=0?(t[a][n][0]=i,t[a][n][1]=i+u,i=t[a][n][1]):(t[a][n][0]=o,t[a][n][1]=o+u,o=t[a][n][1])}};e.offsetPositive=function(t){var e=t.length;if(!(e<=0))for(var n=0,r=t[0].length;n<r;++n)for(var i=0,o=0;o<e;++o){var a=l.default.isNaN(t[o][n][1])?t[o][n][0]:t[o][n][1];a>=0?(t[o][n][0]=i,t[o][n][1]=i+a,i=t[o][n][1]):(t[o][n][0]=0,t[o][n][1]=0)}};var m={sign:e.offsetSign,expand:h.stackOffsetExpand,none:h.stackOffsetNone,silhouette:h.stackOffsetSilhouette,wiggle:h.stackOffsetWiggle,positive:e.offsetPositive};e.getStackedData=function(t,e,n){var r=e.map((function(t){return t.props.dataKey}));return h.stack().keys(r).value((function(t,e){return+v(t,e,0)})).order(h.stackOrderNone).offset(m[n])(t)};e.getStackGroupsByAxisId=function(t,n,i,o,a,u){if(!t)return null;var s=(u?n.reverse():n).reduce((function(t,e){var n,a=e.props,u=a.stackId;if(a.hide)return t;var s=e.props[i],l=t[s]||{hasStack:!1,stackGroups:{}};if(p.isNumOrStr(u)){var c=l.stackGroups[u]||{numericAxisId:i,cateAxisId:o,items:[]};c.items.push(e),l.hasStack=!0,l.stackGroups[u]=c}else l.stackGroups[p.uniqueId("_stackId_")]={numericAxisId:i,cateAxisId:o,items:[e]};return r(r({},t),((n={})[s]=l,n))}),{});return Object.keys(s).reduce((function(n,u){var l,c=s[u];return c.hasStack&&(c.stackGroups=Object.keys(c.stackGroups).reduce((function(n,u){var s,l=c.stackGroups[u];return r(r({},n),((s={})[u]={numericAxisId:i,cateAxisId:o,items:l.items,stackedData:e.getStackedData(t,l.items,a)},s))}),{})),r(r({},n),((l={})[u]=c,l))}),{})};e.calculateDomainOfTicks=function(t,e){return"number"===e?[l.default.min(t),l.default.max(t)]:t};e.getTicksOfScale=function(t,n){var r=n.realScaleType,i=n.type,o=n.tickCount,a=n.originalDomain,u=n.allowDecimals,s=r||n.scale;if("auto"!==s&&"linear"!==s)return null;if(o&&"number"===i&&a&&("auto"===a[0]||"auto"===a[1])){if(!(f=t.domain()).length)return null;var l=c.getNiceTickValues(f,o,u);return t.domain(e.calculateDomainOfTicks(l,i)),{niceTicks:l}}if(o&&"number"===i){var f=t.domain();return{niceTicks:l=c.getTickValuesFixedDomain(f,o,u)}}return null};e.getCateCoordinateOfLine=function(t){var e=t.axis,n=t.ticks,r=t.bandSize,i=t.entry,o=t.index,a=t.dataKey;if("category"===e.type){if(!e.allowDuplicatedCategory&&e.dataKey&&!l.default.isNil(i[e.dataKey])){var u=p.findEntryInArray(n,"value",i[e.dataKey]);if(u)return u.coordinate+r/2}return n[o]?n[o].coordinate+r/2:null}var s=v(i,l.default.isNil(a)?e.dataKey:a);return l.default.isNil(s)?null:e.scale(s)};e.getCateCoordinateOfBar=function(t){var e=t.axis,n=t.ticks,r=t.offset,i=t.bandSize,o=t.entry,a=t.index;if("category"===e.type)return n[a]?n[a].coordinate+r:null;var u=v(o,e.dataKey,e.domain[a]);return l.default.isNil(u)?null:e.scale(u)-i/2+r};e.getBaseValueOfBar=function(t){var e=t.numericAxis,n=e.scale.domain();if("number"===e.type){var r=Math.min(n[0],n[1]),i=Math.max(n[0],n[1]);return r<=0&&i>=0?0:i<0?i:r}return n[0]};e.getStackedDataOfItem=function(t,e){var n=t.props.stackId;if(p.isNumOrStr(n)){var r=e[n];if(r&&r.items.length){for(var i=-1,o=0,a=r.items.length;o<a;o++)if(r.items[o]===t){i=o;break}return i>=0?r.stackedData[i]:null}}return null};e.getDomainOfStackGroups=function(t,e,n){return Object.keys(t).reduce((function(r,i){var o=t[i].stackedData.reduce((function(t,r){var i=r.slice(e,n+1).reduce((function(t,e){return[l.default.min(e.concat([t[0]]).filter(p.isNumber)),l.default.max(e.concat([t[1]]).filter(p.isNumber))]}),[1/0,-1/0]);return[Math.min(t[0],i[0]),Math.max(t[1],i[1])]}),[1/0,-1/0]);return[Math.min(o[0],r[0]),Math.max(o[1],r[1])]}),[1/0,-1/0]).map((function(t){return t===1/0||t===-1/0?0:t}))},e.MIN_VALUE_REG=/^dataMin[\s]*-[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/,e.MAX_VALUE_REG=/^dataMax[\s]*\+[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;e.parseSpecifiedDomain=function(t,n,r){if(!l.default.isArray(t))return n;var i=[];if(p.isNumber(t[0]))i[0]=r?t[0]:Math.min(t[0],n[0]);else if(e.MIN_VALUE_REG.test(t[0])){var o=+e.MIN_VALUE_REG.exec(t[0])[1];i[0]=n[0]-o}else l.default.isFunction(t[0])?i[0]=t[0](n[0]):i[0]=n[0];if(p.isNumber(t[1]))i[1]=r?t[1]:Math.max(t[1],n[1]);else if(e.MAX_VALUE_REG.test(t[1])){o=+e.MAX_VALUE_REG.exec(t[1])[1];i[1]=n[1]+o}else l.default.isFunction(t[1])?i[1]=t[1](n[1]):i[1]=n[1];return i};e.getBandSizeOfAxis=function(t,e,n){if(t&&t.scale&&t.scale.bandwidth){var r=t.scale.bandwidth();if(!n||r>0)return r}if(t&&e&&e.length>=2){for(var i=l.default.sortBy(e,(function(t){return t.coordinate})),o=1/0,a=1,u=i.length;a<u;a++){var s=i[a],c=i[a-1];o=Math.min((s.coordinate||0)-(c.coordinate||0),o)}return o===1/0?0:o}return 0};e.parseDomainOfCategoryAxis=function(t,e,n){return t&&t.length?l.default.isEqual(t,l.default.get(n,"type.defaultProps.domain"))?e:t:e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Global=void 0;e.Global={isSsr:!("undefined"!=typeof window&&window.document&&window.document.createElement&&window.setTimeout),get:function(t){return e.Global[t]},set:function(t,n){if("string"==typeof t)e.Global[t]=n;else{var r=Object.keys(t);r&&r.length&&r.forEach((function(n){e.Global[n]=t[n]}))}}}},function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return i(e,t),e},a=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.parseChildIndex=e.getReactEventByType=e.renderByOrder=e.isSingleChildEqual=e.isChildrenEqual=e.filterSvgElements=e.validateWidthHeight=e.withoutType=e.findChildByType=e.findAllByType=e.getDisplayName=e.TOOLTIP_TYPES=e.LEGEND_TYPES=e.SCALE_TYPES=void 0;var s=o(n(0)),l=u(n(3)),c=n(5),f=n(44),h={click:"onClick",mousedown:"onMouseDown",mouseup:"onMouseUp",mouseover:"onMouseOver",mousemove:"onMouseMove",mouseout:"onMouseOut",mouseenter:"onMouseEnter",mouseleave:"onMouseLeave",touchcancel:"onTouchCancel",touchend:"onTouchEnd",touchmove:"onTouchMove",touchstart:"onTouchStart"};e.SCALE_TYPES=["auto","linear","pow","sqrt","log","identity","time","band","point","ordinal","quantile","quantize","utc","sequential","threshold"],e.LEGEND_TYPES=["plainline","line","square","rect","circle","cross","diamond","star","triangle","wye","none"],e.TOOLTIP_TYPES=["none"];e.getDisplayName=function(t){return"string"==typeof t?t:t?t.displayName||t.name||"Component":""};e.findAllByType=function(t,n){var r=[],i=[];return i=l.default.isArray(n)?n.map((function(t){return e.getDisplayName(t)})):[e.getDisplayName(n)],s.default.Children.forEach(t,(function(t){var e=l.default.get(t,"type.displayName")||l.default.get(t,"type.name");-1!==i.indexOf(e)&&r.push(t)})),r};e.findChildByType=function(t,n){var r=e.findAllByType(t,n);return r&&r[0]};e.withoutType=function(t,n){var r,i=[];return r=l.default.isArray(n)?n.map((function(t){return e.getDisplayName(t)})):[e.getDisplayName(n)],s.default.Children.forEach(t,(function(t){var e=l.default.get(t,"type.displayName");e&&-1!==r.indexOf(e)||i.push(t)})),i};e.validateWidthHeight=function(t){if(!t||!t.props)return!1;var e=t.props,n=e.width,r=e.height;return!(!c.isNumber(n)||n<=0||!c.isNumber(r)||r<=0)};var p=["a","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","ellipse","feBlend","feColormatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-url","foreignObject","g","glyph","glyphRef","hkern","image","line","lineGradient","marker","mask","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","stop","style","svg","switch","symbol","text","textPath","title","tref","tspan","use","view","vkern"],d=function(t){return t&&t.type&&l.default.isString(t.type)&&p.indexOf(t.type)>=0};e.filterSvgElements=function(t){var e=[];return s.default.Children.forEach(t,(function(t){d(t)&&e.push(t)})),e};e.isChildrenEqual=function(t,n){if(t===n)return!0;if(s.Children.count(t)!==s.Children.count(n))return!1;var r=s.Children.count(t);if(0===r)return!0;if(1===r)return e.isSingleChildEqual(l.default.isArray(t)?t[0]:t,l.default.isArray(n)?n[0]:n);for(var i=0;i<r;i++){var o=t[i],a=n[i];if(l.default.isArray(o)||l.default.isArray(a)){if(!e.isChildrenEqual(o,a))return!1}else if(!e.isSingleChildEqual(o,a))return!1}return!0};e.isSingleChildEqual=function(t,n){if(l.default.isNil(t)&&l.default.isNil(n))return!0;if(!l.default.isNil(t)&&!l.default.isNil(n)){var r=t.props||{},i=r.children,o=a(r,["children"]),u=n.props||{},s=u.children,c=a(u,["children"]);return i&&s?f.shallowEqual(o,c)&&e.isChildrenEqual(i,s):!i&&!s&&f.shallowEqual(o,c)}return!1};e.renderByOrder=function(t,n){var r=[],i={};return s.Children.forEach(t,(function(t,o){if(d(t))r.push(t);else if(t){var a=e.getDisplayName(t.type),u=n[a]||{},s=u.handler,l=u.once;if(s&&(!l||!i[a])){var c=s(t,a,o);r.push(c),i[a]=!0}}})),l.default.flatten(r)};e.getReactEventByType=function(t){var e=t&&t.type;return e&&h[e]?h[e]:null};e.parseChildIndex=function(t,e){var n=-1;return s.Children.forEach(e,(function(e,r){e===t&&(n=r)})),n}},function(t,e,n){"use strict";n.r(e),n.d(e,"configSpring",(function(){return N})),n.d(e,"configBezier",(function(){return T})),n.d(e,"AnimateGroup",(function(){return gt})),n.d(e,"translateStyle",(function(){return A}));var r=n(112),i=n.n(r),o=n(0),a=n.n(o),u=n(1),s=n.n(u),l=n(19),c=n.n(l);function f(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=-1,r=function r(i){n<0&&(n=i),i-n>e?(t(i),n=-1):c()(r)};c()(r)}function h(t){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function p(t){return function(t){if(Array.isArray(t))return t}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function d(){var t=function(){return null},e=!1;return{stop:function(){e=!0},start:function(n){e=!1,function n(r){if(!e){if(Array.isArray(r)){if(!r.length)return;var i=p(r),o=i[0],a=i.slice(1);return"number"==typeof o?void f(n.bind(null,a),o):(n(o),void f(n.bind(null,a)))}"object"===h(r)&&t(r),"function"==typeof r&&r()}}(n)},subscribe:function(e){return t=e,function(){t=function(){return null}}}}}var y=n(113),v=n.n(y);function g(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){m(t,e,n[e])}))}return t}function m(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var _=["Webkit","Moz","O","ms"],b=["-webkit-","-moz-","-o-","-ms-"],x=["transform","transformOrigin","transition"],O=function(t){return t},w=function(t,e){return Object.keys(e).reduce((function(n,r){return g({},n,m({},r,t(r,e[r])))}),{})},A=function(t){return Object.keys(t).reduce((function(t,e){return g({},t,function(t,e){if(-1===x.indexOf(t))return m({},t,e);var n="transition"===t,r=t.replace(/(\w)/,(function(t){return t.toUpperCase()})),i=e;return _.reduce((function(t,o,a){return n&&(i=e.replace(/(transform|transform-origin)/gim,"".concat(b[a],"$1"))),g({},t,m({},o+r,i))}),{})}(e,t[e]))}),t)},E=function(t,e,n){return t.map((function(t){return"".concat((r=t,r.replace(/([A-Z])/g,(function(t){return"-".concat(t.toLowerCase())})))," ").concat(e,"ms ").concat(n);var r})).join(",")};function M(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function P(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var S=function(t,e){return[0,3*t,3*e-6*t,3*t-3*e+1]},k=function(t,e){return t.map((function(t,n){return t*Math.pow(e,n)})).reduce((function(t,e){return t+e}))},C=function(t,e){return function(n){var r=S(t,e);return k(r,n)}},j=function(t,e){return function(n){var r=P(S(t,e).map((function(t,e){return t*e})).slice(1)).concat([0]);return k(r,n)}},T=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e[0],i=e[1],o=e[2],a=e[3];if(1===e.length)switch(e[0]){case"linear":r=0,i=0,o=1,a=1;break;case"ease":r=.25,i=.1,o=.25,a=1;break;case"ease-in":r=.42,i=0,o=1,a=1;break;case"ease-out":r=.42,i=0,o=.58,a=1;break;case"ease-in-out":r=0,i=0,o=.58,a=1;break;default:var u=e[0].split("(");if("cubic-bezier"===u[0]&&4===u[1].split(")")[0].split(",").length){var s=u[1].split(")")[0].split(",").map((function(t){return parseFloat(t)})),l=M(s,4);r=l[0],i=l[1],o=l[2],a=l[3]}}[r,o,i,a].every((function(t){return"number"==typeof t&&t>=0&&t<=1}));var c=C(r,o),f=C(i,a),h=j(r,o),p=function(t){return t>1?1:t<0?0:t},d=function(t){for(var e=t>1?1:t,n=e,r=0;r<8;++r){var i=c(n)-e,o=h(n);if(Math.abs(i-e)<1e-4||o<1e-4)return f(n);n=p(n-i/o)}return f(n)};return d.isStepper=!1,d},N=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.stiff,n=void 0===e?100:e,r=t.damping,i=void 0===r?8:r,o=t.dt,a=void 0===o?17:o,u=function(t,e,r){var o=r+(-(t-e)*n-r*i)*a/1e3,u=r*a/1e3+t;return Math.abs(u-e)<1e-4&&Math.abs(o)<1e-4?[e,0]:[u,o]};return u.isStepper=!0,u.dt=a,u},D=n(114),I=n.n(D);function L(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function R(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){B(t,e,n[e])}))}return t}function B(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function z(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var F=function(t,e,n){return t+(e-t)*n},V=function(t){return t.from!==t.to},W=function(t,e,n,r,i){var o,a,u,s,f=(o=t,a=e,v()(Object.keys(o),Object.keys(a))),h=f.reduce((function(n,r){return R({},n,B({},r,[t[r],e[r]]))}),{}),p=f.reduce((function(n,r){return R({},n,B({},r,{from:t[r],velocity:0,to:e[r]}))}),{}),d=-1,y=function(){return null};return y=n.isStepper?function(r){u||(u=r);var o=(r-u)/n.dt;p=function t(e,n,r){var i=w((function(t,n){if(V(n)){var r=z(e(n.from,n.to,n.velocity),2);return R({},n,{from:r[0],velocity:r[1]})}return n}),n);return r<1?w((function(t,e){return V(e)?R({},e,{velocity:F(e.velocity,i[t].velocity,r),from:F(e.from,i[t].from,r)}):e}),n):t(e,i,r-1)}(n,p,o),i(R({},t,e,w((function(t,e){return e.from}),p))),u=r,I()(p,V).length&&(d=c()(y))}:function(o){s||(s=o);var a=(o-s)/r,u=w((function(t,e){return F.apply(void 0,L(e).concat([n(a)]))}),h);if(i(R({},t,e,u)),a<1)d=c()(y);else{var l=w((function(t,e){return F.apply(void 0,L(e).concat([n(1)]))}),h);i(R({},t,e,l))}},function(){return c()(y),function(){Object(l.cancel)(d)}}};function U(t){return(U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function q(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function G(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function H(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){K(t,e,n[e])}))}return t}function K(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function X(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Y(t,e){return!e||"object"!==U(e)&&"function"!=typeof e?J(t):e}function $(t){return($=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Z(t,e){return(Z=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function J(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var Q=function(t){function e(t,n){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=(r=Y(this,$(e).call(this,t,n))).props,o=i.isActive,a=i.attributeName,u=i.from,s=i.to,l=i.steps,c=i.children;if(r.handleStyleChange=r.handleStyleChange.bind(J(J(r))),r.changeStyle=r.changeStyle.bind(J(J(r))),!o)return r.state={style:{}},"function"==typeof c&&(r.state={style:s}),Y(r);if(l&&l.length)r.state={style:l[0].style};else if(u){if("function"==typeof c)return r.state={style:u},Y(r);r.state={style:a?K({},a,u):u}}else r.state={style:{}};return r}var n,r,u;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Z(t,e)}(e,t),n=e,(r=[{key:"componentDidMount",value:function(){var t=this.props,e=t.isActive,n=t.canBegin;this.mounted=!0,e&&n&&this.runAnimation(this.props)}},{key:"componentDidUpdate",value:function(t){var e=this.props,n=e.isActive,r=e.canBegin,o=e.attributeName,a=e.shouldReAnimate;if(r)if(n){if(!(i()(t.to,this.props.to)&&t.canBegin&&t.isActive)){var u=!t.canBegin||!t.isActive;this.manager&&this.manager.stop(),this.stopJSAnimation&&this.stopJSAnimation();var s=u||a?this.props.from:t.to;if(this.state&&this.state.style){var l={style:o?K({},o,s):s};(o&&this.state.style[o]!==s||!o&&this.state.style!==s)&&this.setState(l)}this.runAnimation(H({},this.props,{from:s,begin:0}))}}else{var c={style:o?K({},o,this.props.to):this.props.to};this.state&&this.state.style&&(o&&this.state.style[o]!==this.props.to||!o&&this.state.style!==this.props.to)&&this.setState(c)}}},{key:"componentWillUnmount",value:function(){this.mounted=!1,this.unSubscribe&&this.unSubscribe(),this.manager&&(this.manager.stop(),this.manager=null),this.stopJSAnimation&&this.stopJSAnimation()}},{key:"runJSAnimation",value:function(t){var e=this,n=t.from,r=t.to,i=t.duration,o=t.easing,a=t.begin,u=t.onAnimationEnd,s=t.onAnimationStart,l=W(n,r,function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e[0];if("string"==typeof r)switch(r){case"ease":case"ease-in-out":case"ease-out":case"ease-in":case"linear":return T(r);case"spring":return N();default:if("cubic-bezier"===r.split("(")[0])return T(r)}return"function"==typeof r?r:null}(o),i,this.changeStyle);this.manager.start([s,a,function(){e.stopJSAnimation=l()},i,u])}},{key:"runStepAnimation",value:function(t){var e=this,n=t.steps,r=t.begin,i=t.onAnimationStart,o=n[0],a=o.style,u=o.duration,s=void 0===u?0:u;return this.manager.start([i].concat(G(n.reduce((function(t,r,i){if(0===i)return t;var o=r.duration,a=r.easing,u=void 0===a?"ease":a,s=r.style,l=r.properties,c=r.onAnimationEnd,f=i>0?n[i-1]:r,h=l||Object.keys(s);if("function"==typeof u||"spring"===u)return G(t).concat([e.runJSAnimation.bind(e,{from:f.style,to:s,duration:o,easing:u}),o]);var p=E(h,o,u),d=H({},f.style,s,{transition:p});return G(t).concat([d,o,c]).filter(O)}),[a,Math.max(s,r)])),[t.onAnimationEnd]))}},{key:"runAnimation",value:function(t){this.manager||(this.manager=d());var e=t.begin,n=t.duration,r=t.attributeName,i=t.to,o=t.easing,a=t.onAnimationStart,u=t.onAnimationEnd,s=t.steps,l=t.children,c=this.manager;if(this.unSubscribe=c.subscribe(this.handleStyleChange),"function"!=typeof o&&"function"!=typeof l&&"spring"!==o)if(s.length>1)this.runStepAnimation(t);else{var f=r?K({},r,i):i,h=E(Object.keys(f),n,o);c.start([a,e,H({},f,{transition:h}),n,u])}else this.runJSAnimation(t)}},{key:"handleStyleChange",value:function(t){this.changeStyle(t)}},{key:"changeStyle",value:function(t){this.mounted&&this.setState({style:t})}},{key:"render",value:function(){var t=this.props,e=t.children,n=(t.begin,t.duration,t.attributeName,t.easing,t.isActive),r=(t.steps,t.from,t.to,t.canBegin,t.onAnimationEnd,t.shouldReAnimate,t.onAnimationReStart,q(t,["children","begin","duration","attributeName","easing","isActive","steps","from","to","canBegin","onAnimationEnd","shouldReAnimate","onAnimationReStart"])),i=o.Children.count(e),u=A(this.state.style);if("function"==typeof e)return e(u);if(!n||0===i)return e;var s=function(t){var e=t.props,n=e.style,i=void 0===n?{}:n,a=e.className;return Object(o.cloneElement)(t,H({},r,{style:H({},i,u),className:a}))};return 1===i?s(o.Children.only(e)):a.a.createElement("div",null,o.Children.map(e,(function(t){return s(t)})))}}])&&X(n.prototype,r),u&&X(n,u),e}(o.PureComponent);Q.displayName="Animate",Q.propTypes={from:s.a.oneOfType([s.a.object,s.a.string]),to:s.a.oneOfType([s.a.object,s.a.string]),attributeName:s.a.string,duration:s.a.number,begin:s.a.number,easing:s.a.oneOfType([s.a.string,s.a.func]),steps:s.a.arrayOf(s.a.shape({duration:s.a.number.isRequired,style:s.a.object.isRequired,easing:s.a.oneOfType([s.a.oneOf(["ease","ease-in","ease-out","ease-in-out","linear"]),s.a.func]),properties:s.a.arrayOf("string"),onAnimationEnd:s.a.func})),children:s.a.oneOfType([s.a.node,s.a.func]),isActive:s.a.bool,canBegin:s.a.bool,onAnimationEnd:s.a.func,shouldReAnimate:s.a.bool,onAnimationStart:s.a.func,onAnimationReStart:s.a.func},Q.defaultProps={begin:0,duration:1e3,from:"",to:"",attributeName:"",easing:"ease",isActive:!0,canBegin:!0,steps:[],onAnimationEnd:function(){},onAnimationStart:function(){}};var tt=Q,et=n(53),nt=n(72),rt=n.n(nt);function it(t){return(it="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ot(){return(ot=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function at(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function ut(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function st(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function lt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ct(t,e){return!e||"object"!==it(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function ft(t){return(ft=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ht(t,e){return(ht=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var pt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.steps,n=t.duration;return e&&e.length?e.reduce((function(t,e){return t+(rt()(e.duration)&&e.duration>0?e.duration:0)}),0):rt()(n)?n:0},dt=function(t){function e(){var t,n;st(this,e);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return(n=ct(this,(t=ft(e)).call.apply(t,[this].concat(i)))).state={isActive:!1},n.handleEnter=function(t,e){var r=n.props,i=r.appearOptions,o=r.enterOptions;n.handleStyleActive(e?i:o)},n.handleExit=function(){n.handleStyleActive(n.props.leaveOptions)},n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ht(t,e)}(e,t),n=e,(r=[{key:"handleStyleActive",value:function(t){if(t){var e=t.onAnimationEnd?function(){t.onAnimationEnd()}:null;this.setState(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){ut(t,e,n[e])}))}return t}({},t,{onAnimationEnd:e,isActive:!0}))}}},{key:"parseTimeout",value:function(){var t=this.props,e=t.appearOptions,n=t.enterOptions,r=t.leaveOptions;return pt(e)+pt(n)+pt(r)}},{key:"render",value:function(){var t=this,e=this.props,n=e.children,r=(e.appearOptions,e.enterOptions,e.leaveOptions,at(e,["children","appearOptions","enterOptions","leaveOptions"]));return a.a.createElement(et.Transition,ot({},r,{onEnter:this.handleEnter,onExit:this.handleExit,timeout:this.parseTimeout()}),(function(){return a.a.createElement(tt,t.state,o.Children.only(n))}))}}])&&lt(n.prototype,r),i&&lt(n,i),e}(o.Component);dt.propTypes={appearOptions:s.a.object,enterOptions:s.a.object,leaveOptions:s.a.object,children:s.a.element};var yt=dt;function vt(t){var e=t.component,n=t.children,r=t.appear,i=t.enter,u=t.leave;return a.a.createElement(et.TransitionGroup,{component:e},o.Children.map(n,(function(t,e){return a.a.createElement(yt,{appearOptions:r,enterOptions:i,leaveOptions:u,key:"child-".concat(e)},t)})))}vt.propTypes={appear:s.a.object,enter:s.a.object,leave:s.a.object,children:s.a.oneOfType([s.a.array,s.a.element]),component:s.a.any},vt.defaultProps={component:"span"};var gt=vt;e.default=tt},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.inRangeOfSector=e.formatAngleOfSector=e.getAngleOfPoint=e.distanceBetweenPoints=e.formatAxisMap=e.getMaxRadius=e.polarToCartesian=e.radianToDegree=e.degreeToRadian=e.RADIAN=void 0;var o=i(n(3)),a=n(5),u=n(7);e.RADIAN=Math.PI/180;e.degreeToRadian=function(t){return t*Math.PI/180};e.radianToDegree=function(t){return 180*t/Math.PI};e.polarToCartesian=function(t,n,r,i){return{x:t+Math.cos(-e.RADIAN*i)*r,y:n+Math.sin(-e.RADIAN*i)*r}};e.getMaxRadius=function(t,e,n){return void 0===n&&(n={top:0,right:0,bottom:0,left:0}),Math.min(Math.abs(t-(n.left||0)-(n.right||0)),Math.abs(e-(n.top||0)-(n.bottom||0)))/2};e.formatAxisMap=function(t,n,i,s,l){var c=t.width,f=t.height,h=t.startAngle,p=t.endAngle,d=a.getPercentValue(t.cx,c,c/2),y=a.getPercentValue(t.cy,f,f/2),v=e.getMaxRadius(c,f,i),g=a.getPercentValue(t.innerRadius,v,0),m=a.getPercentValue(t.outerRadius,v,.8*v);return Object.keys(n).reduce((function(t,e){var i,a,c=n[e],f=c.domain,v=c.reversed;o.default.isNil(c.range)?("angleAxis"===s?a=[h,p]:"radiusAxis"===s&&(a=[g,m]),v&&(a=[a[1],a[0]])):(a=c.range,h=a[0],p=a[1]);var _=u.parseScale(c,l),b=_.realScaleType,x=_.scale;x.domain(f).range(a),u.checkDomainOfScale(x);var O=u.getTicksOfScale(x,r(r({},c),{realScaleType:b})),w=r(r(r({},c),O),{range:a,radius:m,realScaleType:b,scale:x,cx:d,cy:y,innerRadius:g,outerRadius:m,startAngle:h,endAngle:p});return r(r({},t),((i={})[e]=w,i))}),{})};e.distanceBetweenPoints=function(t,e){var n=t.x,r=t.y,i=e.x,o=e.y;return Math.sqrt(Math.pow(n-i,2)+Math.pow(r-o,2))};e.getAngleOfPoint=function(t,n){var r=t.x,i=t.y,o=n.cx,a=n.cy,u=e.distanceBetweenPoints({x:r,y:i},{x:o,y:a});if(u<=0)return{radius:u};var s=(r-o)/u,l=Math.acos(s);return i>a&&(l=2*Math.PI-l),{radius:u,angle:e.radianToDegree(l),angleInRadian:l}};e.formatAngleOfSector=function(t){var e=t.startAngle,n=t.endAngle,r=Math.floor(e/360),i=Math.floor(n/360),o=Math.min(r,i);return{startAngle:e-360*o,endAngle:n-360*o}};var s=function(t,e){var n=e.startAngle,r=e.endAngle,i=Math.floor(n/360),o=Math.floor(r/360);return t+360*Math.min(i,o)};e.inRangeOfSector=function(t,n){var i=t.x,o=t.y,a=e.getAngleOfPoint({x:i,y:o},n),u=a.radius,l=a.angle,c=n.innerRadius,f=n.outerRadius;if(u<c||u>f)return!1;if(0===u)return!0;var h,p=e.formatAngleOfSector(n),d=p.startAngle,y=p.endAngle,v=l;if(d<=y){for(;v>y;)v-=360;for(;v<d;)v+=360;h=v>=d&&v<=y}else{for(;v>d;)v-=360;for(;v<y;)v+=360;h=v>=y&&v<=d}return h?r(r({},n),{radius:u,angle:s(v,n)}):null}},function(t,e,n){var r=n(78),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();t.exports=o},,function(t,e){var n=Array.isArray;t.exports=n},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&i(e,t,n);return o(e,t),e},u=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},s=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.LabelList=void 0;var c=a(n(0)),f=l(n(3)),h=n(17),p=n(6),d=n(9),y=n(7),v=n(2),g={valueAccessor:function(t){return f.default.isArray(t.value)?f.default.last(t.value):t.value}};function m(t){var e=t.data,n=t.valueAccessor,i=t.dataKey,o=t.clockWise,a=t.id,s=t.textBreakAll,l=u(t,["data","valueAccessor","dataKey","clockWise","id","textBreakAll"]);return e&&e.length?c.default.createElement(p.Layer,{className:"recharts-label-list"},e.map((function(t,e){var u=f.default.isNil(i)?n(t,e):y.getValueByDataKey(t&&t.payload,i),p=f.default.isNil(a)?{}:{id:a+"-"+e};return c.default.createElement(h.Label,r({},v.filterProps(t,!0),l,p,{parentViewBox:t.parentViewBox,index:e,value:u,textBreakAll:s,viewBox:h.Label.parseViewBox(f.default.isNil(o)?t:r(r({},t),{clockWise:o})),key:"label-"+e}))}))):null}e.LabelList=m,m.displayName="LabelList",m.renderCallByParent=function(t,e,n){if(void 0===n&&(n=!0),!t||!t.children&&n&&!t.label)return null;var i=t.children,o=d.findAllByType(i,m.displayName).map((function(t,n){return c.cloneElement(t,{data:e,key:"labelList-"+n})}));if(!n)return o;var a=function(t,e){return t?!0===t?c.default.createElement(m,{key:"labelList-implicit",data:e}):c.default.isValidElement(t)||f.default.isFunction(t)?c.default.createElement(m,{key:"labelList-implicit",data:e,content:t}):f.default.isObject(t)?c.default.createElement(m,r({data:e},t,{key:"labelList-implicit"})):null:null}(t.label,e);return s([a],o)},m.defaultProps=g},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},f=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.generateCategoricalChart=void 0;var h=s(n(0)),p=f(n(4)),d=f(n(3)),y=n(32),v=n(6),g=n(35),m=n(55),_=n(28),b=n(100),x=n(45),O=n(23),w=n(29),A=n(9),E=n(108),M=n(104),P=n(43),S=n(5),k=n(7),C=n(250),j=n(11),T=n(44),N=n(251),D=n(2),I={xAxis:["bottom","top"],yAxis:["left","right"]},L={x:0,y:0},R=Number.isFinite?Number.isFinite:isFinite,B=function(t,e,n){var r=e.graphicalItems,i=e.dataStartIndex,o=e.dataEndIndex,a=(r||[]).reduce((function(t,e){var n=e.props.data;return n&&n.length?c(t,n):t}),[]);return a&&a.length>0?a:n&&n.props&&n.props.data&&n.props.data.length>0?n.props.data:t&&t.length&&S.isNumber(i)&&S.isNumber(o)?t.slice(i,o+1):[]},z=function(t,e,n,r){var i=t.graphicalItems,a=t.tooltipAxis,u=B(e,t);return n<0||!i||!i.length||n>=u.length?null:i.reduce((function(t,e){if(e.props.hide)return t;var i,s=e.props,l=s.dataKey,f=s.name,h=s.unit,p=s.formatter,d=s.data,y=s.tooltipType;if(a.dataKey&&!a.allowDuplicatedCategory){var v=void 0===d?u:d;i=S.findEntryInArray(v,a.dataKey,r)}else i=d&&d[n]||u[n];return i?c(t,[o(o({},D.filterProps(e)),{dataKey:l,unit:h,formatter:p,name:f||l,color:k.getMainColorOfGraphicItem(e),value:k.getValueByDataKey(i,l),type:y,payload:i})]):t}),[])},F=function(t,e,n,r){var i=r||{x:t.chartX,y:t.chartY},a=function(t,e){return"horizontal"===e?t.x:"vertical"===e?t.y:"centric"===e?t.angle:t.radius}(i,n),u=t.orderedTooltipTicks,s=t.tooltipAxis,l=t.tooltipTicks,c=k.calculateActiveTickIndex(a,u,l,s);if(c>=0&&l){var f=l[c]&&l[c].value;return{activeTooltipIndex:c,activeLabel:f,activePayload:z(t,e,c,f),activeCoordinate:function(t,e,n,r){var i=e.find((function(t){return t&&t.index===n}));if(i){if("horizontal"===t)return{x:i.coordinate,y:r.y};if("vertical"===t)return{x:r.x,y:i.coordinate};if("centric"===t){var a=i.coordinate,u=r.radius;return o(o(o({},r),j.polarToCartesian(r.cx,r.cy,u,a)),{angle:a,radius:u})}var s=i.coordinate,l=r.angle;return o(o(o({},r),j.polarToCartesian(r.cx,r.cy,s,l)),{angle:l,radius:s})}return L}(n,u,c,i)}}return null},V=function(t,e){var n=e.axisType,r=void 0===n?"xAxis":n,i=e.AxisComp,a=e.graphicalItems,u=e.stackGroups,s=e.dataStartIndex,l=e.dataEndIndex,f=t.children,h=r+"Id",p=A.findAllByType(f,i),y={};return p&&p.length?y=function(t,e){var n=e.axes,r=e.graphicalItems,i=e.axisType,a=e.axisIdKey,u=e.stackGroups,s=e.dataStartIndex,l=e.dataEndIndex,f=t.layout,h=t.children,p=t.stackOffset,y=k.isCategoricalAxis(f,i);return n.reduce((function(e,n){var v,g=n.props,m=g.type,_=g.dataKey,b=g.allowDataOverflow,x=g.allowDuplicatedCategory,O=g.scale,w=g.ticks,A=n.props[a],E=B(t.data,{graphicalItems:r.filter((function(t){return t.props[a]===A})),dataStartIndex:s,dataEndIndex:l}),M=E.length;if(!e[A]){var P=void 0,j=void 0,T=void 0;if(_){if(P=k.getDomainOfDataByKey(E,_,m),"category"===m&&y){var N=S.hasDuplicate(P);x&&N?(j=P,P=d.default.range(0,M)):x||(P=k.parseDomainOfCategoryAxis(n.props.domain,P,n).reduce((function(t,e){return t.indexOf(e)>=0?t:c(t,[e])}),[]))}else if("category"===m)P=x?P.filter((function(t){return""!==t&&!d.default.isNil(t)})):k.parseDomainOfCategoryAxis(n.props.domain,P,n).reduce((function(t,e){return t.indexOf(e)>=0||""===e||d.default.isNil(e)?t:c(t,[e])}),[]);else if("number"===m){var D=k.parseErrorBarsOfAxis(E,r.filter((function(t){return t.props[a]===A&&!t.props.hide})),_,i);D&&(P=D)}!y||"number"!==m&&"auto"===O||(T=k.getDomainOfDataByKey(E,_,"category"))}else P=y?d.default.range(0,M):u&&u[A]&&u[A].hasStack&&"number"===m?"expand"===p?[0,1]:k.getDomainOfStackGroups(u[A].stackGroups,s,l):k.getDomainOfItemsWithSameAxis(E,r.filter((function(t){return t.props[a]===A&&!t.props.hide})),m,!0);if("number"===m)P=C.detectReferenceElementsDomain(h,P,A,i,w),n.props.domain&&(P=k.parseSpecifiedDomain(n.props.domain,P,b));else if("category"===m&&n.props.domain){var I=n.props.domain;P.every((function(t){return I.indexOf(t)>=0}))&&(P=I)}return o(o({},e),((v={})[A]=o(o({},n.props),{axisType:i,domain:P,categoricalDomain:T,duplicateDomain:j,originalDomain:n.props.domain,isCategorical:y,layout:f}),v))}return e}),{})}(t,{axes:p,graphicalItems:a,axisType:r,axisIdKey:h,stackGroups:u,dataStartIndex:s,dataEndIndex:l}):a&&a.length&&(y=function(t,e){var n=e.graphicalItems,r=e.Axis,i=e.axisType,a=e.axisIdKey,u=e.stackGroups,s=e.dataStartIndex,l=e.dataEndIndex,c=t.layout,f=t.children,h=B(t.data,{graphicalItems:n,dataStartIndex:s,dataEndIndex:l}),p=h.length,y=k.isCategoricalAxis(c,i),v=-1;return n.reduce((function(t,e){var g,m=e.props[a];if(!t[m]){v++;var _=void 0;return y?_=d.default.range(0,p):u&&u[m]&&u[m].hasStack?(_=k.getDomainOfStackGroups(u[m].stackGroups,s,l),_=C.detectReferenceElementsDomain(f,_,m,i)):(_=k.parseSpecifiedDomain(r.defaultProps.domain,k.getDomainOfItemsWithSameAxis(h,n.filter((function(t){return t.props[a]===m&&!t.props.hide})),"number"),r.defaultProps.allowDataOverflow),_=C.detectReferenceElementsDomain(f,_,m,i)),o(o({},t),((g={})[m]=o(o({axisType:i},r.defaultProps),{hide:!0,orientation:d.default.get(I,i+"."+v%2,null),domain:_,originalDomain:r.defaultProps.domain,isCategorical:y,layout:c}),g))}return t}),{})}(t,{Axis:i,graphicalItems:a,axisType:r,axisIdKey:h,stackGroups:u,dataStartIndex:s,dataEndIndex:l})),y},W=function(t){var e=t.children,n=t.defaultShowTooltip,r=A.findChildByType(e,M.Brush.displayName);return{chartX:0,chartY:0,dataStartIndex:r&&r.props&&r.props.startIndex||0,dataEndIndex:r&&r.props&&r.props.endIndex||t.data&&t.data.length-1||0,activeTooltipIndex:-1,isTooltipActive:!d.default.isNil(n)&&n}},U=function(t){return"horizontal"===t?{numericAxisName:"yAxis",cateAxisName:"xAxis"}:"vertical"===t?{numericAxisName:"xAxis",cateAxisName:"yAxis"}:"centric"===t?{numericAxisName:"radiusAxis",cateAxisName:"angleAxis"}:{numericAxisName:"angleAxis",cateAxisName:"radiusAxis"}};e.generateCategoricalChart=function(t){var e,n=t.chartName,r=t.GraphicalChild,a=t.eventType,u=void 0===a?"axis":a,s=t.axisComponents,f=t.legendContent,C=t.formatAxisMap,I=t.defaultProps,q=function(t,e){var n=e.graphicalItems,r=e.stackGroups,i=e.offset,a=e.updateId,u=e.dataStartIndex,l=e.dataEndIndex,c=t.barSize,f=t.layout,h=t.barGap,p=t.barCategoryGap,y=t.maxBarSize,v=U(f),g=v.numericAxisName,m=v.cateAxisName,_=function(t){return!(!t||!t.length)&&t.some((function(t){var e=A.getDisplayName(t&&t.type);return e&&e.indexOf("Bar")>=0}))}(n)&&k.getBarSizeList({barSize:c,stackGroups:r}),b=[];return n.forEach((function(n,c){var v,x=B(t.data,{dataStartIndex:u,dataEndIndex:l},n),O=n.props,w=O.dataKey,E=O.maxBarSize,M=n.props[g+"Id"],P=n.props[m+"Id"],S=s.reduce((function(t,r){var i,a=e[r.axisType+"Map"],u=n.props[r.axisType+"Id"],s=a&&a[u];return o(o({},t),((i={})[r.axisType]=s,i[r.axisType+"Ticks"]=k.getTicksOfAxis(s),i))}),{}),C=S[m],j=S[m+"Ticks"],T=r&&r[M]&&r[M].hasStack&&k.getStackedDataOfItem(n,r[M].stackGroups),N=A.getDisplayName(n.type).indexOf("Bar")>=0,D=k.getBandSizeOfAxis(C,j),I=[];if(N){var L=k.getBandSizeOfAxis(C,j,!0),R=d.default.isNil(E)?y:E;I=k.getBarPosition({barGap:h,barCategoryGap:p,bandSize:L!==D?L:D,sizeList:_[P],maxBarSize:R}),L!==D&&(I=I.map((function(t){return o(o({},t),{position:o(o({},t.position),{offset:t.position.offset-L/2})})})))}var z=n&&n.type&&n.type.getComposedData;z&&b.push({props:o(o({},z(o(o({},S),{displayedData:x,props:t,dataKey:w,item:n,bandSize:D,barPosition:I,offset:i,stackedData:T,layout:f,dataStartIndex:u,dataEndIndex:l}))),(v={key:n.key||"item-"+c},v[g]=S[g],v[m]=S[m],v.animationId=a,v)),childIndex:A.parseChildIndex(n,t.children),item:n})})),b},G=function(t,e){var i=t.props,a=t.dataStartIndex,u=t.dataEndIndex,l=t.updateId;if(!A.validateWidthHeight({props:i}))return null;var c=i.children,f=i.layout,h=i.stackOffset,p=i.data,y=i.reverseStackOrder,v=U(f),g=v.numericAxisName,_=v.cateAxisName,b=A.findAllByType(c,r),x=k.getStackGroupsByAxisId(p,b,g+"Id",_+"Id",h,y),O=s.reduce((function(t,e){var n,r=e.axisType+"Map";return o(o({},t),((n={})[r]=V(i,o(o({},e),{graphicalItems:b,stackGroups:e.axisType===g&&x,dataStartIndex:a,dataEndIndex:u})),n))}),{}),w=function(t,e){var n=t.props,r=t.graphicalItems,i=t.xAxisMap,a=void 0===i?{}:i,u=t.yAxisMap,s=void 0===u?{}:u,l=n.width,c=n.height,f=n.children,h=n.margin||{},p=A.findChildByType(f,M.Brush.displayName),y=A.findChildByType(f,m.Legend.displayName),v=Object.keys(s).reduce((function(t,e){var n,r=s[e],i=r.orientation;return r.mirror||r.hide?t:o(o({},t),((n={})[i]=t[i]+r.width,n))}),{left:h.left||0,right:h.right||0}),g=Object.keys(a).reduce((function(t,e){var n,r=a[e],i=r.orientation;return r.mirror||r.hide?t:o(o({},t),((n={})[i]=d.default.get(t,""+i)+r.height,n))}),{top:h.top||0,bottom:h.bottom||0}),_=o(o({},g),v),b=_.bottom;return p&&(_.bottom+=p.props.height||M.Brush.defaultProps.height),y&&e&&(_=k.appendOffsetOfLegend(_,r,n,e)),o(o({brushBottom:b},_),{width:l-_.left-_.right,height:c-_.top-_.bottom})}(o(o({},O),{props:i,graphicalItems:b}),null==e?void 0:e.legendBBox);Object.keys(O).forEach((function(t){O[t]=C(i,O[t],w,t.replace("Map",""),n)}));var E,P,j,T=O[_+"Map"],N=(E=T,P=S.getAnyElementOfObject(E),{tooltipTicks:j=k.getTicksOfAxis(P,!1,!0),orderedTooltipTicks:d.default.sortBy(j,(function(t){return t.coordinate})),tooltipAxis:P,tooltipAxisBandSize:k.getBandSizeOfAxis(P)}),D=q(i,o(o({},O),{dataStartIndex:a,dataEndIndex:u,updateId:l,graphicalItems:b,stackGroups:x,offset:w}));return o(o({formatedGraphicalItems:D,graphicalItems:b,offset:w,stackGroups:x},N),O)};return(e=function(t){function e(r){var i=t.call(this,r)||this;return i.handleLegendBBoxUpdate=function(t){if(t&&i.legendInstance){var e=i.state,n=e.dataStartIndex,r=e.dataEndIndex,a=e.updateId;i.setState(o({legendBBox:t},G({props:i.props,dataStartIndex:n,dataEndIndex:r,updateId:a},o(o({},i.state),{legendBBox:t}))))}},i.handleReceiveSyncEvent=function(t,e,n){var r=i.props,a=r.syncId,u=r.layout,s=i.state.updateId;if(a===t&&e!==i.uniqueChartId){var l=n.dataStartIndex,c=n.dataEndIndex;if(d.default.isNil(n.dataStartIndex)&&d.default.isNil(n.dataEndIndex))if(d.default.isNil(n.activeTooltipIndex))i.setState(n);else{var f=n.chartX,h=n.chartY,p=n.activeTooltipIndex,y=i.state,v=y.offset,g=y.tooltipTicks;if(!v)return;var m=o(o({},v),{x:v.left,y:v.top}),_=Math.min(f,m.x+m.width),b=Math.min(h,m.y+m.height),x=g[p]&&g[p].value,O=z(i.state,i.props.data,p),w=g[p]?{x:"horizontal"===u?g[p].coordinate:_,y:"horizontal"===u?b:g[p].coordinate}:L;i.setState(o(o({},n),{activeLabel:x,activeCoordinate:w,activePayload:O}))}else i.setState(o({dataStartIndex:l,dataEndIndex:c},G({props:i.props,dataStartIndex:l,dataEndIndex:c,updateId:s},i.state)))}},i.handleBrushChange=function(t){var e=t.startIndex,n=t.endIndex;if(e!==i.state.dataStartIndex||n!==i.state.dataEndIndex){var r=i.state.updateId;i.setState((function(){return o({dataStartIndex:e,dataEndIndex:n},G({props:i.props,dataStartIndex:e,dataEndIndex:n,updateId:r},i.state))})),i.triggerSyncEvent({dataStartIndex:e,dataEndIndex:n})}},i.handleMouseEnter=function(t){var e=i.props.onMouseEnter,n=i.getMouseInfo(t);if(n){var r=o(o({},n),{isTooltipActive:!0});i.setState(r),i.triggerSyncEvent(r),d.default.isFunction(e)&&e(r,t)}},i.triggeredAfterMouseMove=function(t){var e=i.props.onMouseMove,n=i.getMouseInfo(t),r=n?o(o({},n),{isTooltipActive:!0}):{isTooltipActive:!1};i.setState(r),i.triggerSyncEvent(r),d.default.isFunction(e)&&e(r,t)},i.handleItemMouseEnter=function(t){i.setState((function(){return{isTooltipActive:!0,activeItem:t,activePayload:t.tooltipPayload,activeCoordinate:t.tooltipPosition||{x:t.cx,y:t.cy}}}))},i.handleItemMouseLeave=function(){i.setState((function(){return{isTooltipActive:!1}}))},i.handleMouseMove=function(t){t&&d.default.isFunction(t.persist)&&t.persist(),i.triggeredAfterMouseMove(t)},i.handleMouseLeave=function(t){var e=i.props.onMouseLeave,n={isTooltipActive:!1};i.setState(n),i.triggerSyncEvent(n),d.default.isFunction(e)&&e(n,t),i.cancelThrottledTriggerAfterMouseMove()},i.handleOuterEvent=function(t){var e=A.getReactEventByType(t),n=d.default.get(i.props,""+e);if(e&&d.default.isFunction(n)){n(/.*touch.*/i.test(e)?i.getMouseInfo(t.changedTouches[0]):i.getMouseInfo(t),t)}},i.handleClick=function(t){var e=i.props.onClick,n=i.getMouseInfo(t);if(n){var r=o(o({},n),{isTooltipActive:!0});i.setState(r),i.triggerSyncEvent(r),d.default.isFunction(e)&&e(r,t)}},i.handleMouseDown=function(t){var e=i.props.onMouseDown;d.default.isFunction(e)&&e(i.getMouseInfo(t),t)},i.handleMouseUp=function(t){var e=i.props.onMouseUp;d.default.isFunction(e)&&e(i.getMouseInfo(t),t)},i.handleTouchMove=function(t){null!=t.changedTouches&&t.changedTouches.length>0&&i.handleMouseMove(t.changedTouches[0])},i.handleTouchStart=function(t){null!=t.changedTouches&&t.changedTouches.length>0&&i.handleMouseDown(t.changedTouches[0])},i.handleTouchEnd=function(t){null!=t.changedTouches&&t.changedTouches.length>0&&i.handleMouseUp(t.changedTouches[0])},i.verticalCoordinatesGenerator=function(t){var e=t.xAxis,n=t.width,r=t.height,i=t.offset;return k.getCoordinatesOfGrid(E.CartesianAxis.getTicks(o(o(o({},E.CartesianAxis.defaultProps),e),{ticks:k.getTicksOfAxis(e,!0),viewBox:{x:0,y:0,width:n,height:r}})),i.left,i.left+i.width)},i.horizontalCoordinatesGenerator=function(t){var e=t.yAxis,n=t.width,r=t.height,i=t.offset;return k.getCoordinatesOfGrid(E.CartesianAxis.getTicks(o(o(o({},E.CartesianAxis.defaultProps),e),{ticks:k.getTicksOfAxis(e,!0),viewBox:{x:0,y:0,width:n,height:r}})),i.top,i.top+i.height)},i.axesTicksGenerator=function(t){return k.getTicksOfAxis(t,!0)},i.renderCursor=function(t){var e=i.state,r=e.isTooltipActive,a=e.activeCoordinate,u=e.activePayload,s=e.offset,l=e.activeTooltipIndex;if(!(t&&t.props.cursor&&r&&a))return null;var c,f=i.props.layout,p=_.Curve;if("ScatterChart"===n)c=a,p=b.Cross;else if("BarChart"===n)c=i.getCursorRectangle(),p=w.Rectangle;else if("radial"===f){var d=i.getCursorPoints(),y=d.cx,v=d.cy,g=d.radius;c={cx:y,cy:v,startAngle:d.startAngle,endAngle:d.endAngle,innerRadius:g,outerRadius:g},p=x.Sector}else c={points:i.getCursorPoints()},p=_.Curve;var m=t.key||"_recharts-cursor",O=o(o(o(o({stroke:"#ccc",pointerEvents:"none"},s),c),D.filterProps(t.props.cursor)),{payload:u,payloadIndex:l,key:m,className:"recharts-tooltip-cursor"});return h.isValidElement(t.props.cursor)?h.cloneElement(t.props.cursor,O):h.createElement(p,O)},i.renderPolarAxis=function(t,e,n){var r=d.default.get(t,"type.axisType"),a=d.default.get(i.state,r+"Map")[t.props[r+"Id"]];return h.cloneElement(t,o(o({},a),{className:r,key:t.key||e+"-"+n,ticks:k.getTicksOfAxis(a,!0)}))},i.renderXAxis=function(t,e,n){var r=i.state.xAxisMap[t.props.xAxisId];return i.renderAxis(r,t,e,n)},i.renderYAxis=function(t,e,n){var r=i.state.yAxisMap[t.props.yAxisId];return i.renderAxis(r,t,e,n)},i.renderGrid=function(t){var e=i.state,n=e.xAxisMap,r=e.yAxisMap,o=e.offset,a=i.props,u=a.width,s=a.height,l=S.getAnyElementOfObject(n),c=d.default.find(r,(function(t){return d.default.every(t.domain,R)}))||S.getAnyElementOfObject(r),f=t.props||{};return h.cloneElement(t,{key:t.key||"grid",x:S.isNumber(f.x)?f.x:o.left,y:S.isNumber(f.y)?f.y:o.top,width:S.isNumber(f.width)?f.width:o.width,height:S.isNumber(f.height)?f.height:o.height,xAxis:l,yAxis:c,offset:o,chartWidth:u,chartHeight:s,verticalCoordinatesGenerator:f.verticalCoordinatesGenerator||i.verticalCoordinatesGenerator,horizontalCoordinatesGenerator:f.horizontalCoordinatesGenerator||i.horizontalCoordinatesGenerator})},i.renderPolarGrid=function(t){var e=t.props.radialLines,n=i.state,r=n.radiusAxisMap,o=n.angleAxisMap,a=S.getAnyElementOfObject(r),u=S.getAnyElementOfObject(o),s=u.cx,l=u.cy,c=u.innerRadius,f=u.outerRadius;return h.cloneElement(t,{polarAngles:k.getTicksOfAxis(u,!0).map((function(t){return t.coordinate})),polarRadius:k.getTicksOfAxis(a,!0).map((function(t){return t.coordinate})),cx:s,cy:l,innerRadius:c,outerRadius:f,key:t.key||"polar-grid",radialLines:e})},i.renderLegend=function(){var t=i.state.formatedGraphicalItems,e=i.props,n=e.children,r=e.width,a=e.height,u=i.props.margin||{},s=r-(u.left||0)-(u.right||0),c=k.getLegendProps({children:n,formatedGraphicalItems:t,legendWidth:s,legendContent:f});if(!c)return null;var p=c.item,d=l(c,["item"]);return h.cloneElement(p,o(o({},d),{chartWidth:r,chartHeight:a,margin:u,ref:function(t){i.legendInstance=t},onBBoxUpdate:i.handleLegendBBoxUpdate}))},i.renderTooltip=function(){var t=i.props.children,e=A.findChildByType(t,g.Tooltip.displayName);if(!e)return null;var n=i.state,r=n.isTooltipActive,a=n.activeCoordinate,u=n.activePayload,s=n.activeLabel,l=n.offset;return h.cloneElement(e,{viewBox:o(o({},l),{x:l.left,y:l.top}),active:r,label:s,payload:r?u:[],coordinate:a})},i.renderBrush=function(t){var e=i.props,n=e.margin,r=e.data,o=i.state,a=o.offset,u=o.dataStartIndex,s=o.dataEndIndex,l=o.updateId;return h.cloneElement(t,{key:t.key||"_recharts-brush",onChange:k.combineEventHandlers(i.handleBrushChange,null,t.props.onChange),data:r,x:S.isNumber(t.props.x)?t.props.x:a.left,y:S.isNumber(t.props.y)?t.props.y:a.top+a.height+a.brushBottom-(n.bottom||0),width:S.isNumber(t.props.width)?t.props.width:a.width,startIndex:u,endIndex:s,updateId:"brush-"+l})},i.renderReferenceElement=function(t,e,n){if(!t)return null;var r=i.clipPathId,o=i.state,a=o.xAxisMap,u=o.yAxisMap,s=o.offset,l=t.props,c=l.xAxisId,f=l.yAxisId;return h.cloneElement(t,{key:t.key||e+"-"+n,xAxis:a[c],yAxis:u[f],viewBox:{x:s.left,y:s.top,width:s.width,height:s.height},clipPathId:r})},i.renderActivePoints=function(t){var n=t.item,r=t.activePoint,i=t.basePoint,a=t.childIndex,u=t.isRange,s=[],l=n.props.key,c=n.item.props,f=c.activeDot,h=c.dataKey,p=o(o({index:a,dataKey:h,cx:r.x,cy:r.y,r:4,fill:k.getMainColorOfGraphicItem(n.item),strokeWidth:2,stroke:"#fff",payload:r.payload,value:r.value,key:l+"-activePoint-"+a},D.filterProps(f)),D.adaptEventHandlers(f));return s.push(e.renderActiveDot(f,p)),i?s.push(e.renderActiveDot(f,o(o({},p),{cx:i.x,cy:i.y,key:l+"-basePoint-"+a}))):u&&s.push(null),s},i.renderGraphicChild=function(t,e,n){var r=i.filterFormatItem(t,e,n);if(!r)return null;var a=i.state,u=a.isTooltipActive,s=a.tooltipAxis,l=a.activeTooltipIndex,f=a.activeLabel,p=i.props.children,y=A.findChildByType(p,g.Tooltip.displayName),v=r.props,m=v.points,_=v.isRange,b=v.baseLine,x=r.item.props,O=x.activeDot,w=!x.hide&&u&&y&&O&&l>=0,E=y&&"click"===y.props.trigger?{onClick:k.combineEventHandlers(i.handleItemMouseEnter,null,r.props.onCLick)}:{onMouseLeave:k.combineEventHandlers(i.handleItemMouseLeave,null,r.props.onMouseLeave),onMouseEnter:k.combineEventHandlers(i.handleItemMouseEnter,null,r.props.onMouseEnter)},M=h.cloneElement(t,o(o({},r.props),E));if(w){var P=void 0,C=void 0;if(s.dataKey&&!s.allowDuplicatedCategory){var j="function"==typeof s.dataKey?function(t){return"function"==typeof s.dataKey?s.dataKey(t.payload):null}:"payload.".concat(s.dataKey.toString());P=S.findEntryInArray(m,j,f),C=_&&b&&S.findEntryInArray(b,j,f)}else P=m[l],C=_&&b&&b[l];if(!d.default.isNil(P))return c([M],i.renderActivePoints({item:r,activePoint:P,basePoint:C,childIndex:l,isRange:_}))}return _?[M,null,null]:[M,null]},i.renderCustomized=function(t){return h.cloneElement(t,o(o({},i.props),i.state))},i.uniqueChartId=d.default.isNil(r.id)?S.uniqueId("recharts"):r.id,i.clipPathId=i.uniqueChartId+"-clip",r.throttleDelay&&(i.triggeredAfterMouseMove=d.default.throttle(i.triggeredAfterMouseMove,r.throttleDelay)),i.state={},i}return i(e,t),e.prototype.componentDidMount=function(){d.default.isNil(this.props.syncId)||this.addListener()},e.prototype.componentDidUpdate=function(t){d.default.isNil(t.syncId)&&!d.default.isNil(this.props.syncId)&&this.addListener(),!d.default.isNil(this.props.syncId)&&d.default.isNil(t.syncId)&&this.removeListener()},e.prototype.componentWillUnmount=function(){d.default.isNil(this.props.syncId)||this.removeListener(),this.cancelThrottledTriggerAfterMouseMove()},e.prototype.cancelThrottledTriggerAfterMouseMove=function(){"function"==typeof this.triggeredAfterMouseMove.cancel&&this.triggeredAfterMouseMove.cancel()},e.prototype.getMouseInfo=function(t){if(!this.container)return null;var e=P.getOffset(this.container),n=P.calculateChartCoordinate(t,e),r=this.inRange(n.chartX,n.chartY);if(!r)return null;var i=this.state,a=i.xAxisMap,s=i.yAxisMap;if("axis"!==u&&a&&s){var l=S.getAnyElementOfObject(a).scale,c=S.getAnyElementOfObject(s).scale,f=l&&l.invert?l.invert(n.chartX):null,h=c&&c.invert?c.invert(n.chartY):null;return o(o({},n),{xValue:f,yValue:h})}var p=F(this.state,this.props.data,this.props.layout,r);return p?o(o({},n),p):null},e.prototype.getCursorRectangle=function(){var t=this.props.layout,e=this.state,n=e.activeCoordinate,r=e.offset,i=e.tooltipAxisBandSize,o=i/2;return{stroke:"none",fill:"#ccc",x:"horizontal"===t?n.x-o:r.left+.5,y:"horizontal"===t?r.top+.5:n.y-o,width:"horizontal"===t?i:r.width-1,height:"horizontal"===t?r.height-1:i}},e.prototype.getCursorPoints=function(){var t,e,n,r,i=this.props.layout,o=this.state,a=o.activeCoordinate,u=o.offset;if("horizontal"===i)n=t=a.x,e=u.top,r=u.top+u.height;else if("vertical"===i)r=e=a.y,t=u.left,n=u.left+u.width;else if(!d.default.isNil(a.cx)||!d.default.isNil(a.cy)){if("centric"!==i){f=a.cx,h=a.cy;var s=a.radius,l=a.startAngle,c=a.endAngle;return{points:[j.polarToCartesian(f,h,s,l),j.polarToCartesian(f,h,s,c)],cx:f,cy:h,radius:s,startAngle:l,endAngle:c}}var f=a.cx,h=a.cy,p=a.innerRadius,y=a.outerRadius,v=a.angle,g=j.polarToCartesian(f,h,p,v),m=j.polarToCartesian(f,h,y,v);t=g.x,e=g.y,n=m.x,r=m.y}return[{x:t,y:e},{x:n,y:r}]},e.prototype.inRange=function(t,e){var n=this.props.layout;if("horizontal"===n||"vertical"===n){var r=this.state.offset;return t>=r.left&&t<=r.left+r.width&&e>=r.top&&e<=r.top+r.height?{x:t,y:e}:null}var i=this.state,o=i.angleAxisMap,a=i.radiusAxisMap;if(o&&a){var u=S.getAnyElementOfObject(o);return j.inRangeOfSector({x:t,y:e},u)}return null},e.prototype.parseEventsOfWrapper=function(){var t=this.props.children,e=A.findChildByType(t,g.Tooltip.displayName),n={};e&&"axis"===u&&(n="click"===e.props.trigger?{onClick:this.handleClick}:{onMouseEnter:this.handleMouseEnter,onMouseMove:this.handleMouseMove,onMouseLeave:this.handleMouseLeave,onTouchMove:this.handleTouchMove,onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd});var r=D.adaptEventHandlers(this.props,this.handleOuterEvent);return o(o({},r),n)},e.prototype.addListener=function(){N.eventCenter.on(N.SYNC_EVENT,this.handleReceiveSyncEvent),N.eventCenter.setMaxListeners&&N.eventCenter._maxListeners&&N.eventCenter.setMaxListeners(N.eventCenter._maxListeners+1)},e.prototype.removeListener=function(){N.eventCenter.removeListener(N.SYNC_EVENT,this.handleReceiveSyncEvent),N.eventCenter.setMaxListeners&&N.eventCenter._maxListeners&&N.eventCenter.setMaxListeners(N.eventCenter._maxListeners-1)},e.prototype.triggerSyncEvent=function(t){var e=this.props.syncId;d.default.isNil(e)||N.eventCenter.emit(N.SYNC_EVENT,e,this.uniqueChartId,t)},e.prototype.filterFormatItem=function(t,e,n){for(var r=this.state.formatedGraphicalItems,i=0,o=r.length;i<o;i++){var a=r[i];if(a.item===t||a.props.key===t.key||e===A.getDisplayName(a.item.type)&&n===a.childIndex)return a}return null},e.prototype.renderAxis=function(t,e,n,r){var i=this.props,a=i.width,u=i.height;return h.default.createElement(E.CartesianAxis,o({},t,{className:"recharts-"+t.axisType+" "+t.axisType,key:e.key||n+"-"+r,viewBox:{x:0,y:0,width:a,height:u},ticksGenerator:this.axesTicksGenerator}))},e.prototype.renderClipPath=function(){var t=this.clipPathId,e=this.state.offset,n=e.left,r=e.top,i=e.height,o=e.width;return h.default.createElement("defs",null,h.default.createElement("clipPath",{id:t},h.default.createElement("rect",{x:n,y:r,height:i,width:o})))},e.prototype.render=function(){var t=this;if(!A.validateWidthHeight(this))return null;var e=this.props,n=e.children,r=e.className,i=e.width,a=e.height,u=e.style,s=e.compact,c=l(e,["children","className","width","height","style","compact"]),f=D.filterProps(c),d={CartesianGrid:{handler:this.renderGrid,once:!0},ReferenceArea:{handler:this.renderReferenceElement},ReferenceLine:{handler:this.renderReferenceElement},ReferenceDot:{handler:this.renderReferenceElement},XAxis:{handler:this.renderXAxis},YAxis:{handler:this.renderYAxis},Brush:{handler:this.renderBrush,once:!0},Bar:{handler:this.renderGraphicChild},Line:{handler:this.renderGraphicChild},Area:{handler:this.renderGraphicChild},Radar:{handler:this.renderGraphicChild},RadialBar:{handler:this.renderGraphicChild},Scatter:{handler:this.renderGraphicChild},Pie:{handler:this.renderGraphicChild},Funnel:{handler:this.renderGraphicChild},Tooltip:{handler:this.renderCursor,once:!0},PolarGrid:{handler:this.renderPolarGrid,once:!0},PolarAngleAxis:{handler:this.renderPolarAxis},PolarRadiusAxis:{handler:this.renderPolarAxis},Customized:{handler:this.renderCustomized}};if(s)return h.default.createElement(y.Surface,o({},f,{width:i,height:a}),this.renderClipPath(),A.renderByOrder(n,d));var v=this.parseEventsOfWrapper();return h.default.createElement("div",o({className:p.default("recharts-wrapper",r),style:o({position:"relative",cursor:"default",width:i,height:a},u)},v,{ref:function(e){t.container=e}}),h.default.createElement(y.Surface,o({},f,{width:i,height:a}),this.renderClipPath(),A.renderByOrder(n,d)),this.renderLegend(),this.renderTooltip())},e}(h.Component)).displayName=n,e.defaultProps=o({layout:"horizontal",stackOffset:"none",barCategoryGap:"10%",barGap:4,margin:{top:5,right:5,bottom:5,left:5},reverseStackOrder:!1},I),e.getDerivedStateFromProps=function(t,e){var n=t.data,r=t.children,i=t.width,a=t.height,u=t.layout,s=t.stackOffset,l=t.margin;if(d.default.isNil(e.updateId)){var c=W(t);return o(o(o(o({},c),{updateId:0}),G(o(o({props:t},c),{updateId:0}),e)),{prevData:n,prevWidth:i,prevHeight:a,prevLayout:u,prevStackOffset:s,prevMargin:l,prevChildren:r})}if(n!==e.prevData||i!==e.prevWidth||a!==e.prevHeight||u!==e.prevLayout||s!==e.prevStackOffset||!T.shallowEqual(l,e.prevMargin)){c=W(t);var f={chartX:e.chartX,chartY:e.chartY,isTooltipActive:e.isTooltipActive},h=o(o({},F(e,n,u)),{updateId:e.updateId+1}),p=o(o(o({},c),f),h);return o(o(o({},p),G(o({props:t},p),e)),{prevData:n,prevWidth:i,prevHeight:a,prevLayout:u,prevStackOffset:s,prevMargin:l,prevChildren:r})}if(!A.isChildrenEqual(r,e.prevChildren)){var y=!d.default.isNil(n)?e.updateId:e.updateId+1;return o(o({updateId:y},G(o(o({props:t},e),{updateId:y}),e)),{prevChildren:r})}return null},e.renderActiveDot=function(t,e){var n;return n=h.isValidElement(t)?h.cloneElement(t,e):d.default.isFunction(t)?t(e):h.default.createElement(O.Dot,o({},e)),h.default.createElement(v.Layer,{className:"recharts-active-dot",key:e.key},n)},e}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&i(e,t,n);return o(e,t),e},u=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Label=void 0;var l=a(n(0)),c=s(n(3)),f=s(n(4)),h=n(22),p=n(9),d=n(5),y=n(11),v=n(2),g=function(t,e,n){var i,o,a=t.position,u=t.viewBox,s=t.offset,h=t.className,p=u,v=p.cx,g=p.cy,m=p.innerRadius,_=p.outerRadius,b=p.startAngle,x=p.endAngle,O=p.clockWise,w=(m+_)/2,A=function(t,e){return d.mathSign(e-t)*Math.min(Math.abs(e-t),360)}(b,x),E=A>=0?1:-1;"insideStart"===a?(i=b+E*s,o=O):"insideEnd"===a?(i=x-E*s,o=!O):"end"===a&&(i=x+E*s,o=O),o=A<=0?o:!o;var M=y.polarToCartesian(v,g,w,i),P=y.polarToCartesian(v,g,w,i+359*(o?1:-1)),S="M"+M.x+","+M.y+"\n    A"+w+","+w+",0,1,"+(o?0:1)+",\n    "+P.x+","+P.y,k=c.default.isNil(t.id)?d.uniqueId("recharts-radial-line-"):t.id;return l.default.createElement("text",r({},n,{dominantBaseline:"central",className:f.default("recharts-radial-bar-label",h)}),l.default.createElement("defs",null,l.default.createElement("path",{id:k,d:S})),l.default.createElement("textPath",{xlinkHref:"#"+k},e))};function m(t){var e,n=t.viewBox,i=t.position,o=t.value,a=t.children,u=t.content,s=t.className,p=void 0===s?"":s,m=t.textBreakAll;if(!n||c.default.isNil(o)&&c.default.isNil(a)&&!l.isValidElement(u)&&!c.default.isFunction(u))return null;if(l.isValidElement(u))return l.cloneElement(u,t);if(c.default.isFunction(u)){if(e=l.createElement(u,t),l.isValidElement(e))return e}else e=function(t){var e=t.value,n=t.formatter,r=c.default.isNil(t.children)?e:t.children;return c.default.isFunction(n)?n(r):r}(t);var _=function(t){return d.isNumber(t.cx)}(n),b=v.filterProps(t,!0);if(_&&("insideStart"===i||"insideEnd"===i||"end"===i))return g(t,e,b);var x=_?function(t){var e=t.viewBox,n=t.offset,r=t.position,i=e,o=i.cx,a=i.cy,u=i.innerRadius,s=i.outerRadius,l=(i.startAngle+i.endAngle)/2;if("outside"===r){var c=y.polarToCartesian(o,a,s+n,l),f=c.x;return{x:f,y:c.y,textAnchor:f>=o?"start":"end",verticalAnchor:"middle"}}if("center"===r)return{x:o,y:a,textAnchor:"middle",verticalAnchor:"middle"};if("centerTop"===r)return{x:o,y:a,textAnchor:"middle",verticalAnchor:"start"};if("centerBottom"===r)return{x:o,y:a,textAnchor:"middle",verticalAnchor:"end"};var h=(u+s)/2,p=y.polarToCartesian(o,a,h,l);return{x:p.x,y:p.y,textAnchor:"middle",verticalAnchor:"middle"}}(t):function(t){var e,n=t.viewBox,i=t.parentViewBox,o=t.offset,a=t.position,u=n,s=u.x,l=u.y,f=u.width,h=u.height,p=h>=0?1:-1,y=p*o,v=p>0?"end":"start",g=p>0?"start":"end",m=f>=0?1:-1,_=m*o,b=m>0?"end":"start",x=m>0?"start":"end";if("top"===a)return r(r({},e={x:s+f/2,y:l-p*o,textAnchor:"middle",verticalAnchor:v}),i?{height:Math.max(l-i.y,0),width:f}:{});if("bottom"===a)return r(r({},e={x:s+f/2,y:l+h+y,textAnchor:"middle",verticalAnchor:g}),i?{height:Math.max(i.y+i.height-(l+h),0),width:f}:{});if("left"===a)return r(r({},e={x:s-_,y:l+h/2,textAnchor:b,verticalAnchor:"middle"}),i?{width:Math.max(e.x-i.x,0),height:h}:{});if("right"===a)return r(r({},e={x:s+f+_,y:l+h/2,textAnchor:x,verticalAnchor:"middle"}),i?{width:Math.max(i.x+i.width-e.x,0),height:h}:{});var O=i?{width:f,height:h}:{};return"insideLeft"===a?r({x:s+_,y:l+h/2,textAnchor:x,verticalAnchor:"middle"},O):"insideRight"===a?r({x:s+f-_,y:l+h/2,textAnchor:b,verticalAnchor:"middle"},O):"insideTop"===a?r({x:s+f/2,y:l+y,textAnchor:"middle",verticalAnchor:g},O):"insideBottom"===a?r({x:s+f/2,y:l+h-y,textAnchor:"middle",verticalAnchor:v},O):"insideTopLeft"===a?r({x:s+_,y:l+y,textAnchor:x,verticalAnchor:g},O):"insideTopRight"===a?r({x:s+f-_,y:l+y,textAnchor:b,verticalAnchor:g},O):"insideBottomLeft"===a?r({x:s+_,y:l+h-y,textAnchor:x,verticalAnchor:v},O):"insideBottomRight"===a?r({x:s+f-_,y:l+h-y,textAnchor:b,verticalAnchor:v},O):c.default.isObject(a)&&(d.isNumber(a.x)||d.isPercent(a.x))&&(d.isNumber(a.y)||d.isPercent(a.y))?r({x:s+d.getPercentValue(a.x,f),y:l+d.getPercentValue(a.y,h),textAnchor:"end",verticalAnchor:"end"},O):r({x:s+f/2,y:l+h/2,textAnchor:"middle",verticalAnchor:"middle"},O)}(t);return l.default.createElement(h.Text,r({className:f.default("recharts-label",p)},b,x,{breakAll:m}),e)}e.Label=m,m.displayName="Label",m.defaultProps={offset:5};var _=function(t){var e=t.cx,n=t.cy,r=t.angle,i=t.startAngle,o=t.endAngle,a=t.r,u=t.radius,s=t.innerRadius,l=t.outerRadius,c=t.x,f=t.y,h=t.top,p=t.left,y=t.width,v=t.height,g=t.clockWise,m=t.labelViewBox;if(m)return m;if(d.isNumber(y)&&d.isNumber(v)){if(d.isNumber(c)&&d.isNumber(f))return{x:c,y:f,width:y,height:v};if(d.isNumber(h)&&d.isNumber(p))return{x:h,y:p,width:y,height:v}}return d.isNumber(c)&&d.isNumber(f)?{x:c,y:f,width:0,height:0}:d.isNumber(e)&&d.isNumber(n)?{cx:e,cy:n,startAngle:i||r||0,endAngle:o||r||0,innerRadius:s||0,outerRadius:l||u||a||0,clockWise:g}:t.viewBox?t.viewBox:{}};m.parseViewBox=_,m.renderCallByParent=function(t,e,n){if(void 0===n&&(n=!0),!t||!t.children&&n&&!t.label)return null;var i=t.children,o=_(t),a=p.findAllByType(i,m.displayName).map((function(t,n){return l.cloneElement(t,{viewBox:e||o,key:"label-"+n})}));if(!n)return a;var s=function(t,e){return t?!0===t?l.default.createElement(m,{key:"label-implicit",viewBox:e}):d.isNumOrStr(t)?l.default.createElement(m,{key:"label-implicit",viewBox:e,value:t}):l.isValidElement(t)?t.type===m?l.cloneElement(t,{key:"label-implicit",viewBox:e}):l.default.createElement(m,{key:"label-implicit",content:t,viewBox:e}):c.default.isFunction(t)?l.default.createElement(m,{key:"label-implicit",content:t,viewBox:e}):c.default.isObject(t)?l.default.createElement(m,r({viewBox:e},t,{key:"label-implicit"})):null:null}(t.label,e||o);return u([s],a)}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.createLabeledScales=e.ScaleHelper=e.rectWithCoords=e.rectWithPoints=e.formatAxisMap=void 0;var o=i(n(3)),a=n(7);e.formatAxisMap=function(t,e,n,i,o){var u=t.width,s=t.height,l=t.layout,c=Object.keys(e),f={left:n.left,leftMirror:n.left,right:u-n.right,rightMirror:u-n.right,top:n.top,topMirror:n.top,bottom:s-n.bottom,bottomMirror:s-n.bottom};return c.reduce((function(t,u){var s,c,h,p,d,y=e[u],v=y.orientation,g=y.domain,m=y.padding,_=void 0===m?{}:m,b=y.mirror,x=y.reversed,O=v+(b?"Mirror":"");c="xAxis"===i?[n.left+(_.left||0),n.left+n.width-(_.right||0)]:"yAxis"===i?"horizontal"===l?[n.top+n.height-(_.bottom||0),n.top+(_.top||0)]:[n.top+(_.top||0),n.top+n.height-(_.bottom||0)]:y.range,x&&(c=[c[1],c[0]]);var w=a.parseScale(y,o),A=w.scale,E=w.realScaleType;A.domain(g).range(c),a.checkDomainOfScale(A);var M=a.getTicksOfScale(A,r(r({},y),{realScaleType:E}));"xAxis"===i?(d="top"===v&&!b||"bottom"===v&&b,h=n.left,p=f[O]-d*y.height):"yAxis"===i&&(d="left"===v&&!b||"right"===v&&b,h=f[O]-d*y.width,p=n.top);var P=r(r(r({},y),M),{realScaleType:E,x:h,y:p,scale:A,width:"xAxis"===i?n.width:y.width,height:"yAxis"===i?n.height:y.height});return P.bandSize=a.getBandSizeOfAxis(P,M),y.hide||"xAxis"!==i?y.hide||(f[O]+=(d?-1:1)*P.width):f[O]+=(d?-1:1)*P.height,r(r({},t),((s={})[u]=P,s))}),{})};e.rectWithPoints=function(t,e){var n=t.x,r=t.y,i=e.x,o=e.y;return{x:Math.min(n,i),y:Math.min(r,o),width:Math.abs(i-n),height:Math.abs(o-r)}};e.rectWithCoords=function(t){var n=t.x1,r=t.y1,i=t.x2,o=t.y2;return e.rectWithPoints({x:n,y:r},{x:i,y:o})};var u=function(){function t(t){this.scale=t}return t.create=function(e){return new t(e)},Object.defineProperty(t.prototype,"domain",{get:function(){return this.scale.domain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"range",{get:function(){return this.scale.range},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rangeMin",{get:function(){return this.range()[0]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rangeMax",{get:function(){return this.range()[1]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bandwidth",{get:function(){return this.scale.bandwidth},enumerable:!1,configurable:!0}),t.prototype.apply=function(t,e){var n=void 0===e?{}:e,r=n.bandAware,i=n.position;if(void 0!==t){if(i)switch(i){case"start":return this.scale(t);case"middle":var o=this.bandwidth?this.bandwidth()/2:0;return this.scale(t)+o;case"end":o=this.bandwidth?this.bandwidth():0;return this.scale(t)+o;default:return this.scale(t)}if(r){o=this.bandwidth?this.bandwidth()/2:0;return this.scale(t)+o}return this.scale(t)}},t.prototype.isInRange=function(t){var e=this.range(),n=e[0],r=e[e.length-1];return n<=r?t>=n&&t<=r:t>=r&&t<=n},t.EPS=1e-4,t}();e.ScaleHelper=u;e.createLabeledScales=function(t){var e=Object.keys(t).reduce((function(e,n){var i;return r(r({},e),((i={})[n]=u.create(t[n]),i))}),{});return r(r({},e),{apply:function(t,n){var r=(void 0===n?{}:n).bandAware;return o.default.mapValues(t,(function(t,n){return e[n].apply(t,{bandAware:r})}))},isInRange:function(t){return o.default.every(t,(function(t,n){return e[n].isInRange(t)}))}})}},function(t,e,n){(function(e){for(var r=n(179),i="undefined"==typeof window?e:window,o=["moz","webkit"],a="AnimationFrame",u=i["request"+a],s=i["cancel"+a]||i["cancelRequest"+a],l=0;!u&&l<o.length;l++)u=i[o[l]+"Request"+a],s=i[o[l]+"Cancel"+a]||i[o[l]+"CancelRequest"+a];if(!u||!s){var c=0,f=0,h=[];u=function(t){if(0===h.length){var e=r(),n=Math.max(0,1e3/60-(e-c));c=n+e,setTimeout((function(){var t=h.slice(0);h.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(c)}catch(t){setTimeout((function(){throw t}),0)}}),Math.round(n))}return h.push({handle:++f,callback:t,cancelled:!1}),f},s=function(t){for(var e=0;e<h.length;e++)h[e].handle===t&&(h[e].cancelled=!0)}}t.exports=function(t){return u.call(i,t)},t.exports.cancel=function(){s.apply(i,arguments)},t.exports.polyfill=function(t){t||(t=i),t.requestAnimationFrame=u,t.cancelAnimationFrame=s}}).call(this,n(34))},function(t,e,n){var r=n(133),i=n(138);t.exports=function(t,e){var n=i(t,e);return r(n)?n:void 0}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Text=void 0;var f=s(n(0)),h=c(n(232)),p=c(n(4)),d=c(n(3)),y=n(5),v=n(8),g=n(2),m=n(43),_=/[ \f\n\r\t\v\u2028\u2029]+/,b=function(t){try{var e=[];return d.default.isNil(t.children)||(e=t.breakAll?t.children.toString().split(""):t.children.toString().split(_)),{wordsWithComputedWidth:e.map((function(e){return{word:e,width:m.getStringSize(e,t.style).width}})),spaceWidth:t.breakAll?0:m.getStringSize(" ",t.style).width}}catch(t){return null}},x=function(t){return[{words:d.default.isNil(t)?[]:t.toString().split(_)}]},O=function(t,e){if((t.width||t.scaleToFit)&&!v.Global.isSsr){if(e){var n=b(t);return n?function(t,e,n,r,i){var a=y.isNumber(t.maxLines),u=t.children,s=function(t){return void 0===t&&(t=[]),t.reduce((function(t,e){var o=e.word,a=e.width,u=t[t.length-1];if(u&&(null==r||i||u.width+a+n<r))u.words.push(o),u.width+=a+n;else{var s={words:[o],width:a};t.push(s)}return t}),[])},l=s(e);if(!a)return l;for(var c,f=function(e){var n=u.slice(0,e),i=b(o(o({},t),{children:n+"…"})).wordsWithComputedWidth,a=s(i);return[a.length>t.maxLines||function(t){return t.reduce((function(t,e){return t.width>e.width?t:e}))}(a).width>r,a]},h=0,p=u.length-1,d=0;h<=p&&d<=u.length-1;){var v=Math.floor((h+p)/2),g=f(v-1),m=g[0],_=g[1],x=f(v)[0];if(m||x||(h=v+1),m&&x&&(p=v-1),!m&&x){c=_;break}d++}return c||l}(t,n.wordsWithComputedWidth,n.spaceWidth,t.width,t.scaleToFit):x(t.children)}}return x(t.children)},w=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){if(t.width!==e.prevWidth||t.scaleToFit!==e.prevScaleToFit||t.children!==e.prevChildren||t.style!==e.prevStyle||t.breakAll!==e.prevBreakAll){var n=t.children!==e.prevChildren||t.style!==e.prevStyle||t.breakAll!==e.prevBreakAll;return{prevWidth:t.width,prevScaleToFit:t.scaleToFit,prevChildren:t.children,prevStyle:t.style,wordsByLines:O(t,n)}}return null},e.prototype.render=function(){var t=this.props,e=t.dx,n=t.dy,r=t.textAnchor,i=t.verticalAnchor,a=t.scaleToFit,u=t.angle,s=t.lineHeight,c=t.capHeight,d=t.className,v=t.breakAll,m=l(t,["dx","dy","textAnchor","verticalAnchor","scaleToFit","angle","lineHeight","capHeight","className","breakAll"]),_=this.state.wordsByLines;if(!y.isNumOrStr(m.x)||!y.isNumOrStr(m.y))return null;var b,x=m.x+(y.isNumber(e)?e:0),O=m.y+(y.isNumber(n)?n:0);switch(i){case"start":b=h.default("calc("+c+")");break;case"middle":b=h.default("calc("+(_.length-1)/2+" * -"+s+" + ("+c+" / 2))");break;default:b=h.default("calc("+(_.length-1)+" * -"+s+")")}var w=[];if(a){var A=_[0].width,E=this.props.width;w.push("scale("+(y.isNumber(E)?E/A:1)/A+")")}return u&&w.push("rotate("+u+", "+x+", "+O+")"),w.length&&(m.transform=w.join(" ")),f.default.createElement("text",o({},g.filterProps(m,!0),{x:x,y:O,className:p.default("recharts-text",d),textAnchor:r}),_.map((function(t,e){return f.default.createElement("tspan",{x:x,dy:0===e?b:s,key:e},t.words.join(v?"":" "))})))},e.defaultProps={x:0,y:0,lineHeight:"1em",capHeight:"0.71em",scaleToFit:!1,textAnchor:"start",verticalAnchor:"end"},e}(f.Component);e.Text=w},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Dot=void 0;var c=s(n(0)),f=l(n(4)),h=n(2),p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.render=function(){var t=this.props,e=t.cx,n=t.cy,r=t.r,i=t.className,a=f.default("recharts-dot",i);return e===+e&&n===+n&&r===+r?c.default.createElement("circle",o({},h.filterProps(this.props),h.adaptEventHandlers(this.props),{className:a,cx:e,cy:n,r:r})):null},e}(c.PureComponent);e.Dot=p},function(t,e,n){var r=n(38),i=n(134),o=n(135),a=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":a&&a in Object(t)?i(t):o(t)}},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.warn=void 0;e.warn=function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Cell=void 0;e.Cell=function(t){return null},e.Cell.displayName="Cell"},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Curve=void 0;var c=s(n(0)),f=n(70),h=l(n(4)),p=l(n(3)),d=n(2),y=n(5),v={curveBasisClosed:f.curveBasisClosed,curveBasisOpen:f.curveBasisOpen,curveBasis:f.curveBasis,curveLinearClosed:f.curveLinearClosed,curveLinear:f.curveLinear,curveMonotoneX:f.curveMonotoneX,curveMonotoneY:f.curveMonotoneY,curveNatural:f.curveNatural,curveStep:f.curveStep,curveStepAfter:f.curveStepAfter,curveStepBefore:f.curveStepBefore},g=function(t){return t.x===+t.x&&t.y===+t.y},m=function(t){return t.x},_=function(t){return t.y},b=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getPath=function(){var t,e=this.props,n=e.type,r=e.points,i=e.baseLine,a=e.layout,u=e.connectNulls,s=function(t,e){if(p.default.isFunction(t))return t;var n="curve"+p.default.upperFirst(t);return"curveMonotone"===n&&e?v[n+("vertical"===e?"Y":"X")]:v[n]||f.curveLinear}(n,a),l=u?r.filter((function(t){return g(t)})):r;if(p.default.isArray(i)){var c=u?i.filter((function(t){return g(t)})):i,h=l.map((function(t,e){return o(o({},t),{base:c[e]})}));return(t="vertical"===a?f.area().y(_).x1(m).x0((function(t){return t.base.x})):f.area().x(m).y1(_).y0((function(t){return t.base.y}))).defined(g).curve(s),t(h)}return(t="vertical"===a&&y.isNumber(i)?f.area().y(_).x1(m).x0(i):y.isNumber(i)?f.area().x(m).y1(_).y0(i):f.line().x(m).y(_)).defined(g).curve(s),t(l)},e.prototype.render=function(){var t=this.props,e=t.className,n=t.points,r=t.path,i=t.pathRef;if(!(n&&n.length||r))return null;var a=n&&n.length?this.getPath():r;return c.default.createElement("path",o({},d.filterProps(this.props),d.adaptEventHandlers(this.props),{className:h.default("recharts-curve",e),d:a,ref:i}))},e.defaultProps={type:"linear",points:[],connectNulls:!1},e}(c.PureComponent);e.Curve=b},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Rectangle=void 0;var c=s(n(0)),f=l(n(4)),h=l(n(10)),p=n(2),d=function(t,e,n,r,i){var o,a=Math.min(Math.abs(n)/2,Math.abs(r)/2),u=r>=0?1:-1,s=n>=0?1:-1,l=r>=0&&n>=0||r<0&&n<0?1:0;if(a>0&&i instanceof Array){for(var c=[0,0,0,0],f=0;f<4;f++)c[f]=i[f]>a?a:i[f];o="M"+t+","+(e+u*c[0]),c[0]>0&&(o+="A "+c[0]+","+c[0]+",0,0,"+l+","+(t+s*c[0])+","+e),o+="L "+(t+n-s*c[1])+","+e,c[1]>0&&(o+="A "+c[1]+","+c[1]+",0,0,"+l+",\n        "+(t+n)+","+(e+u*c[1])),o+="L "+(t+n)+","+(e+r-u*c[2]),c[2]>0&&(o+="A "+c[2]+","+c[2]+",0,0,"+l+",\n        "+(t+n-s*c[2])+","+(e+r)),o+="L "+(t+s*c[3])+","+(e+r),c[3]>0&&(o+="A "+c[3]+","+c[3]+",0,0,"+l+",\n        "+t+","+(e+r-u*c[3])),o+="Z"}else if(a>0&&i===+i&&i>0){o="M "+t+","+(e+u*(c=Math.min(a,i)))+"\n            A "+c+","+c+",0,0,"+l+","+(t+s*c)+","+e+"\n            L "+(t+n-s*c)+","+e+"\n            A "+c+","+c+",0,0,"+l+","+(t+n)+","+(e+u*c)+"\n            L "+(t+n)+","+(e+r-u*c)+"\n            A "+c+","+c+",0,0,"+l+","+(t+n-s*c)+","+(e+r)+"\n            L "+(t+s*c)+","+(e+r)+"\n            A "+c+","+c+",0,0,"+l+","+t+","+(e+r-u*c)+" Z"}else o="M "+t+","+e+" h "+n+" v "+r+" h "+-n+" Z";return o},y=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={totalLength:-1},e}return i(e,t),e.prototype.componentDidMount=function(){if(this.node&&this.node.getTotalLength)try{var t=this.node.getTotalLength();t&&this.setState({totalLength:t})}catch(t){}},e.prototype.render=function(){var t=this,e=this.props,n=e.x,r=e.y,i=e.width,a=e.height,u=e.radius,s=e.className,l=this.state.totalLength,y=this.props,v=y.animationEasing,g=y.animationDuration,m=y.animationBegin,_=y.isAnimationActive,b=y.isUpdateAnimationActive;if(n!==+n||r!==+r||i!==+i||a!==+a||0===i||0===a)return null;var x=f.default("recharts-rectangle",s);return b?c.default.createElement(h.default,{canBegin:l>0,from:{width:i,height:a,x:n,y:r},to:{width:i,height:a,x:n,y:r},duration:g,animationEasing:v,isActive:b},(function(e){var n=e.width,r=e.height,i=e.x,a=e.y;return c.default.createElement(h.default,{canBegin:l>0,from:"0px "+(-1===l?1:l)+"px",to:l+"px 0px",attributeName:"strokeDasharray",begin:m,duration:g,isActive:_,easing:v},c.default.createElement("path",o({},p.filterProps(t.props,!0),{className:x,d:d(i,a,n,r,u),ref:function(e){t.node=e}})))})):c.default.createElement("path",o({},p.filterProps(this.props,!0),{className:x,d:d(n,r,i,a,u)}))},e.defaultProps={x:0,y:0,width:0,height:0,radius:0,isAnimationActive:!1,isUpdateAnimationActive:!1,animationBegin:0,animationDuration:1500,animationEasing:"ease"},e}(c.PureComponent);e.Rectangle=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.XAxis=void 0;e.XAxis=function(){return null},e.XAxis.displayName="XAxis",e.XAxis.defaultProps={allowDecimals:!0,hide:!1,orientation:"bottom",width:0,height:30,mirror:!1,xAxisId:0,tickCount:5,type:"category",domain:[0,"auto"],padding:{left:0,right:0},allowDataOverflow:!1,scale:"auto",reversed:!1,allowDuplicatedCategory:!0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.YAxis=void 0;e.YAxis=function(){return null},e.YAxis.displayName="YAxis",e.YAxis.defaultProps={allowDuplicatedCategory:!0,allowDecimals:!0,hide:!1,orientation:"left",width:60,height:0,mirror:!1,yAxisId:0,tickCount:5,type:"number",domain:[0,"auto"],padding:{top:0,bottom:0},allowDataOverflow:!1,scale:"auto",reversed:!1}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Surface=void 0;var a=o(n(0)),u=o(n(4)),s=n(2);e.Surface=function(t){var e=t.children,n=t.width,o=t.height,l=t.viewBox,c=t.className,f=t.style,h=i(t,["children","width","height","viewBox","className","style"]),p=l||{width:n,height:o,x:0,y:0},d=u.default("recharts-surface",c);return a.default.createElement("svg",r({},s.filterProps(h,!0,!0),{className:d,width:n,height:o,style:f,viewBox:p.x+" "+p.y+" "+p.width+" "+p.height,version:"1.1"}),e)}},,function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Tooltip=void 0;var c=s(n(0)),f=n(10),h=l(n(3)),p=l(n(4)),d=n(228),y=n(8),v=n(5),g="recharts-tooltip-wrapper";function m(t){return t.dataKey}var _=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={boxWidth:-1,boxHeight:-1},e.getTranslate=function(t){var n=t.key,r=t.tooltipDimension,i=t.viewBoxDimension,o=e.props,a=o.allowEscapeViewBox,u=o.coordinate,s=o.offset,l=o.position,c=o.viewBox;if(l&&v.isNumber(l[n]))return l[n];var f=u[n]-r-s,h=u[n]+s;return a[n]?h:u[n]+r+s>c[n]+i?Math.max(f,c[n]):Math.max(h,c[n])},e}return i(e,t),e.prototype.componentDidMount=function(){this.updateBBox()},e.prototype.componentDidUpdate=function(){this.updateBBox()},e.prototype.updateBBox=function(){var t=this.state,e=t.boxWidth,n=t.boxHeight;if(this.wrapperNode&&this.wrapperNode.getBoundingClientRect){var r=this.wrapperNode.getBoundingClientRect();(Math.abs(r.width-e)>1||Math.abs(r.height-n)>1)&&this.setState({boxWidth:r.width,boxHeight:r.height})}else-1===e&&-1===n||this.setState({boxWidth:-1,boxHeight:-1})},e.prototype.render=function(){var t,e,n,r=this,i=this.props,a=i.payload,u=i.isAnimationActive,s=i.animationDuration,l=i.animationEasing,y=i.filterNull,_=function(t,e){return!0===t?h.default.uniqBy(e,m):h.default.isFunction(t)?h.default.uniqBy(e,t):e}(i.payloadUniqBy,y&&a&&a.length?a.filter((function(t){return!h.default.isNil(t.value)})):a),b=_&&_.length,x=this.props,O=x.content,w=x.viewBox,A=x.coordinate,E=x.position,M=x.active,P=x.wrapperStyle,S=o({pointerEvents:"none",visibility:M&&b?"visible":"hidden",position:"absolute",top:0,left:0},P);if(E&&v.isNumber(E.x)&&v.isNumber(E.y))e=E.x,n=E.y;else{var k=this.state,C=k.boxWidth,j=k.boxHeight;C>0&&j>0&&A?(e=this.getTranslate({key:"x",tooltipDimension:C,viewBoxDimension:w.width}),n=this.getTranslate({key:"y",tooltipDimension:j,viewBoxDimension:w.height})):S.visibility="hidden"}S=o(o({},f.translateStyle({transform:this.props.useTranslate3d?"translate3d("+e+"px, "+n+"px, 0)":"translate("+e+"px, "+n+"px)"})),S),u&&M&&(S=o(o({},f.translateStyle({transition:"transform "+s+"ms "+l})),S));var T=p.default(g,((t={})[g+"-right"]=v.isNumber(e)&&A&&v.isNumber(A.x)&&e>=A.x,t[g+"-left"]=v.isNumber(e)&&A&&v.isNumber(A.x)&&e<A.x,t[g+"-bottom"]=v.isNumber(n)&&A&&v.isNumber(A.y)&&n>=A.y,t[g+"-top"]=v.isNumber(n)&&A&&v.isNumber(A.y)&&n<A.y,t));return c.default.createElement("div",{className:T,style:S,ref:function(t){r.wrapperNode=t}},function(t,e){return c.default.isValidElement(t)?c.default.cloneElement(t,e):h.default.isFunction(t)?c.default.createElement(t,e):c.default.createElement(d.DefaultTooltipContent,o({},e))}(O,o(o({},this.props),{payload:_})))},e.displayName="Tooltip",e.defaultProps={active:!1,allowEscapeViewBox:{x:!1,y:!1},offset:10,viewBox:{x1:0,x2:0,y1:0,y2:0},coordinate:{x:0,y:0},cursorStyle:{},separator:" : ",wrapperStyle:{},contentStyle:{},itemStyle:{},labelStyle:{},cursor:!0,trigger:"hover",isAnimationActive:!y.Global.isSsr,animationEasing:"ease",animationDuration:400,filterNull:!0,useTranslate3d:!1},e}(c.PureComponent);e.Tooltip=_},function(t,e,n){var r=n(123),i=n(124),o=n(125),a=n(126),u=n(127);function s(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=i,s.prototype.get=o,s.prototype.has=a,s.prototype.set=u,t.exports=s},function(t,e,n){var r=n(76);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},function(t,e,n){var r=n(12).Symbol;t.exports=r},function(t,e,n){var r=n(20)(Object,"create");t.exports=r},function(t,e,n){var r=n(147);t.exports=function(t,e){var n=t.__data__;return r(e)?n["string"==typeof e?"string":"hash"]:n.map}},function(t,e,n){var r=n(24),i=n(21);t.exports=function(t){return"symbol"==typeof t||i(t)&&"[object Symbol]"==r(t)}},function(t,e,n){var r=n(41);t.exports=function(t){if("string"==typeof t||r(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r};Object.defineProperty(e,"__esModule",{value:!0}),e.calculateChartCoordinate=e.getOffset=e.getStringSize=e.getStyleString=void 0;var o=n(8),a={widthCache:{},cacheCount:0},u={position:"absolute",top:"-20000px",left:0,padding:0,margin:0,border:"none",whiteSpace:"pre"},s=["minWidth","maxWidth","width","minHeight","maxHeight","height","top","left","fontSize","lineHeight","padding","margin","paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom"];e.getStyleString=function(t){return Object.keys(t).reduce((function(e,n){return""+e+(n.split("").reduce((function(t,e){return e===e.toUpperCase()?i(t,["-",e.toLowerCase()]):i(t,[e])}),[]).join("")+":")+(r=n,o=t[n],(s.indexOf(r)>=0&&o===+o?o+"px":o)+";");var r,o}),"")};e.getStringSize=function(t,n){if(void 0===n&&(n={}),null==t||o.Global.isSsr)return{width:0,height:0};var i=""+t,s=i+"-"+e.getStyleString(n);if(a.widthCache[s])return a.widthCache[s];try{var l=document.getElementById("recharts_measurement_span");l||((l=document.createElement("span")).setAttribute("id","recharts_measurement_span"),l.setAttribute("aria-hidden","true"),document.body.appendChild(l));var c=r(r({},u),n);Object.keys(c).map((function(t){return l.style[t]=c[t],t})),l.textContent=i;var f=l.getBoundingClientRect(),h={width:f.width,height:f.height};return a.widthCache[s]=h,++a.cacheCount>2e3&&(a.cacheCount=0,a.widthCache={}),h}catch(t){return{width:0,height:0}}};e.getOffset=function(t){var e=t.ownerDocument.documentElement,n={top:0,left:0};return void 0!==t.getBoundingClientRect&&(n=t.getBoundingClientRect()),{top:n.top+window.pageYOffset-e.clientTop,left:n.left+window.pageXOffset-e.clientLeft}};e.calculateChartCoordinate=function(t,e){return{chartX:Math.round(t.pageX-e.left),chartY:Math.round(t.pageY-e.top)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.shallowEqual=void 0,e.shallowEqual=function(t,e){for(var n in t)if({}.hasOwnProperty.call(t,n)&&(!{}.hasOwnProperty.call(e,n)||t[n]!==e[n]))return!1;for(var n in e)if({}.hasOwnProperty.call(e,n)&&!{}.hasOwnProperty.call(t,n))return!1;return!0}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Sector=void 0;var c=s(n(0)),f=l(n(4)),h=n(2),p=n(11),d=n(5),y=function(t){var e=t.cx,n=t.cy,r=t.radius,i=t.angle,o=t.sign,a=t.isExternal,u=t.cornerRadius,s=t.cornerIsExternal,l=u*(a?1:-1)+r,c=Math.asin(u/l)/p.RADIAN,f=s?i:i+o*c,h=s?i-o*c:i;return{center:p.polarToCartesian(e,n,l,f),circleTangency:p.polarToCartesian(e,n,r,f),lineTangency:p.polarToCartesian(e,n,l*Math.cos(c*p.RADIAN),h),theta:c}},v=function(t){var e=t.cx,n=t.cy,r=t.innerRadius,i=t.outerRadius,o=t.startAngle,a=function(t,e){return d.mathSign(e-t)*Math.min(Math.abs(e-t),359.999)}(o,t.endAngle),u=o+a,s=p.polarToCartesian(e,n,i,o),l=p.polarToCartesian(e,n,i,u),c="M "+s.x+","+s.y+"\n    A "+i+","+i+",0,\n    "+ +(Math.abs(a)>180)+","+ +(o>u)+",\n    "+l.x+","+l.y+"\n  ";if(r>0){var f=p.polarToCartesian(e,n,r,o),h=p.polarToCartesian(e,n,r,u);c+="L "+h.x+","+h.y+"\n            A "+r+","+r+",0,\n            "+ +(Math.abs(a)>180)+","+ +(o<=u)+",\n            "+f.x+","+f.y+" Z"}else c+="L "+e+","+n+" Z";return c},g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.render=function(){var t=this.props,e=t.cx,n=t.cy,r=t.innerRadius,i=t.outerRadius,a=t.cornerRadius,u=t.forceCornerRadius,s=t.cornerIsExternal,l=t.startAngle,p=t.endAngle,g=t.className;if(i<r||l===p)return null;var m,_=f.default("recharts-sector",g),b=i-r,x=d.getPercentValue(a,b,0,!0);return m=x>0&&Math.abs(l-p)<360?function(t){var e=t.cx,n=t.cy,r=t.innerRadius,i=t.outerRadius,o=t.cornerRadius,a=t.forceCornerRadius,u=t.cornerIsExternal,s=t.startAngle,l=t.endAngle,c=d.mathSign(l-s),f=y({cx:e,cy:n,radius:i,angle:s,sign:c,cornerRadius:o,cornerIsExternal:u}),h=f.circleTangency,p=f.lineTangency,g=f.theta,m=y({cx:e,cy:n,radius:i,angle:l,sign:-c,cornerRadius:o,cornerIsExternal:u}),_=m.circleTangency,b=m.lineTangency,x=m.theta,O=u?Math.abs(s-l):Math.abs(s-l)-g-x;if(O<0)return a?"M "+p.x+","+p.y+"\n        a"+o+","+o+",0,0,1,"+2*o+",0\n        a"+o+","+o+",0,0,1,"+2*-o+",0\n      ":v({cx:e,cy:n,innerRadius:r,outerRadius:i,startAngle:s,endAngle:l});var w="M "+p.x+","+p.y+"\n    A"+o+","+o+",0,0,"+ +(c<0)+","+h.x+","+h.y+"\n    A"+i+","+i+",0,"+ +(O>180)+","+ +(c<0)+","+_.x+","+_.y+"\n    A"+o+","+o+",0,0,"+ +(c<0)+","+b.x+","+b.y+"\n  ";if(r>0){var A=y({cx:e,cy:n,radius:r,angle:s,sign:c,isExternal:!0,cornerRadius:o,cornerIsExternal:u}),E=A.circleTangency,M=A.lineTangency,P=A.theta,S=y({cx:e,cy:n,radius:r,angle:l,sign:-c,isExternal:!0,cornerRadius:o,cornerIsExternal:u}),k=S.circleTangency,C=S.lineTangency,j=S.theta,T=u?Math.abs(s-l):Math.abs(s-l)-P-j;if(T<0&&0===o)return w+"L"+e+","+n+"Z";w+="L"+C.x+","+C.y+"\n      A"+o+","+o+",0,0,"+ +(c<0)+","+k.x+","+k.y+"\n      A"+r+","+r+",0,"+ +(T>180)+","+ +(c>0)+","+E.x+","+E.y+"\n      A"+o+","+o+",0,0,"+ +(c<0)+","+M.x+","+M.y+"Z"}else w+="L"+e+","+n+"Z";return w}({cx:e,cy:n,innerRadius:r,outerRadius:i,cornerRadius:Math.min(x,b/2),forceCornerRadius:u,cornerIsExternal:s,startAngle:l,endAngle:p}):v({cx:e,cy:n,innerRadius:r,outerRadius:i,startAngle:l,endAngle:p}),c.default.createElement("path",o({},h.filterProps(this.props,!0),{className:_,d:m}))},e.defaultProps={cx:0,cy:0,innerRadius:0,outerRadius:0,startAngle:0,endAngle:0,cornerRadius:0,forceCornerRadius:!1,cornerIsExternal:!1},e}(c.PureComponent);e.Sector=g},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},f=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Polygon=void 0;var h=s(n(0)),p=f(n(4)),d=n(2),y=function(t){return t&&t.x===+t.x&&t.y===+t.y},v=function(t,e){var n=function(t){void 0===t&&(t=[]);var e=[[]];return t.forEach((function(t){y(t)?e[e.length-1].push(t):e[e.length-1].length>0&&e.push([])})),y(t[0])&&e[e.length-1].push(t[0]),e[e.length-1].length<=0&&(e=e.slice(0,-1)),e}(t);e&&(n=[n.reduce((function(t,e){return c(t,e)}),[])]);var r=n.map((function(t){return t.reduce((function(t,e,n){return t+(0===n?"M":"L")+e.x+","+e.y}),"")})).join("");return 1===n.length?r+"Z":r},g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.render=function(){var t=this.props,e=t.points,n=t.className,r=t.baseLinePoints,i=t.connectNulls,a=l(t,["points","className","baseLinePoints","connectNulls"]);if(!e||!e.length)return null;var u=p.default("recharts-polygon",n);if(r&&r.length){var s=a.stroke&&"none"!==a.stroke,c=function(t,e,n){var r=v(t,n);return("Z"===r.slice(-1)?r.slice(0,-1):r)+"L"+v(e.reverse(),n).slice(1)}(e,r,i);return h.default.createElement("g",{className:u},h.default.createElement("path",o({},d.filterProps(a,!0),{fill:"Z"===c.slice(-1)?a.fill:"none",stroke:"none",d:c})),s?h.default.createElement("path",o({},d.filterProps(a,!0),{fill:"none",d:v(e,i)})):null,s?h.default.createElement("path",o({},d.filterProps(a,!0),{fill:"none",d:v(r,i)})):null)}var f=v(e,i);return h.default.createElement("path",o({},d.filterProps(a,!0),{fill:"Z"===f.slice(-1)?a.fill:"none",className:u,d:f}))},e}(h.PureComponent);e.Polygon=g},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.PolarRadiusAxis=void 0;var f=s(n(0)),h=c(n(3)),p=n(22),d=n(17),y=n(6),v=n(11),g=n(2),m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getTickValueCoord=function(t){var e=t.coordinate,n=this.props,r=n.angle,i=n.cx,o=n.cy;return v.polarToCartesian(i,o,e,r)},e.prototype.getTickTextAnchor=function(){var t;switch(this.props.orientation){case"left":t="end";break;case"right":t="start";break;default:t="middle"}return t},e.prototype.getViewBox=function(){var t=this.props,e=t.cx,n=t.cy,r=t.angle,i=t.ticks,o=h.default.maxBy(i,(function(t){return t.coordinate||0}));return{cx:e,cy:n,startAngle:r,endAngle:r,innerRadius:h.default.minBy(i,(function(t){return t.coordinate||0})).coordinate||0,outerRadius:o.coordinate||0}},e.prototype.renderAxisLine=function(){var t=this.props,e=t.cx,n=t.cy,r=t.angle,i=t.ticks,a=t.axisLine,u=l(t,["cx","cy","angle","ticks","axisLine"]),s=i.reduce((function(t,e){return[Math.min(t[0],e.coordinate),Math.max(t[1],e.coordinate)]}),[1/0,-1/0]),c=v.polarToCartesian(e,n,s[0],r),h=v.polarToCartesian(e,n,s[1],r),p=o(o(o(o({},g.filterProps(u)),{fill:"none"}),g.filterProps(a)),{x1:c.x,y1:c.y,x2:h.x,y2:h.y});return f.default.createElement("line",o({className:"recharts-polar-radius-axis-line"},p))},e.renderTickItem=function(t,e,n){return f.default.isValidElement(t)?f.default.cloneElement(t,e):h.default.isFunction(t)?t(e):f.default.createElement(p.Text,o({},e,{className:"recharts-polar-radius-axis-tick-value"}),n)},e.prototype.renderTicks=function(){var t=this,n=this.props,r=n.ticks,i=n.tick,a=n.angle,u=n.tickFormatter,s=n.stroke,c=l(n,["ticks","tick","angle","tickFormatter","stroke"]),h=this.getTickTextAnchor(),p=g.filterProps(c),d=g.filterProps(i),v=r.map((function(n,r){var l=t.getTickValueCoord(n),c=o(o(o(o(o(o({textAnchor:h,transform:"rotate("+(90-a)+", "+l.x+", "+l.y+")"},p),{stroke:"none",fill:s}),d),{index:r}),l),{payload:n});return f.default.createElement(y.Layer,o({className:"recharts-polar-radius-axis-tick",key:"tick-"+r},g.adaptEventsOfChild(t.props,n,r)),e.renderTickItem(i,c,u?u(n.value,r):n.value))}));return f.default.createElement(y.Layer,{className:"recharts-polar-radius-axis-ticks"},v)},e.prototype.render=function(){var t=this.props,e=t.ticks,n=t.axisLine,r=t.tick;return e&&e.length?f.default.createElement(y.Layer,{className:"recharts-polar-radius-axis"},n&&this.renderAxisLine(),r&&this.renderTicks(),d.Label.renderCallByParent(this.props,this.getViewBox())):null},e.displayName="PolarRadiusAxis",e.axisType="radiusAxis",e.defaultProps={type:"number",radiusAxisId:0,cx:0,cy:0,angle:0,orientation:"right",stroke:"#ccc",axisLine:!0,tick:!0,tickCount:5,domain:[0,"auto"],allowDataOverflow:!1,scale:"auto",allowDuplicatedCategory:!0},e}(f.PureComponent);e.PolarRadiusAxis=m},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.PolarAngleAxis=void 0;var c=s(n(0)),f=l(n(3)),h=n(6),p=n(23),d=n(46),y=n(22),v=n(2),g=n(11),m=Math.PI/180,_=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getTickLineCoord=function(t){var e=this.props,n=e.cx,r=e.cy,i=e.radius,o=e.orientation,a=e.tickSize||8,u=g.polarToCartesian(n,r,i,t.coordinate),s=g.polarToCartesian(n,r,i+("inner"===o?-1:1)*a,t.coordinate);return{x1:u.x,y1:u.y,x2:s.x,y2:s.y}},e.prototype.getTickTextAnchor=function(t){var e=this.props.orientation,n=Math.cos(-t.coordinate*m);return n>1e-5?"outer"===e?"start":"end":n<-1e-5?"outer"===e?"end":"start":"middle"},e.prototype.renderAxisLine=function(){var t=this.props,e=t.cx,n=t.cy,r=t.radius,i=t.axisLine,a=t.axisLineType,u=o(o(o({},v.filterProps(this.props)),{fill:"none"}),v.filterProps(i));if("circle"===a)return c.default.createElement(p.Dot,o({className:"recharts-polar-angle-axis-line"},u,{cx:e,cy:n,r:r}));var s=this.props.ticks.map((function(t){return g.polarToCartesian(e,n,r,t.coordinate)}));return c.default.createElement(d.Polygon,o({className:"recharts-polar-angle-axis-line"},u,{points:s}))},e.renderTickItem=function(t,e,n){return c.default.isValidElement(t)?c.default.cloneElement(t,e):f.default.isFunction(t)?t(e):c.default.createElement(y.Text,o({},e,{className:"recharts-polar-angle-axis-tick-value"}),n)},e.prototype.renderTicks=function(){var t=this,n=this.props,r=n.ticks,i=n.tick,a=n.tickLine,u=n.tickFormatter,s=n.stroke,l=v.filterProps(this.props),f=v.filterProps(i),p=o(o(o({},l),{fill:"none"}),v.filterProps(a)),d=r.map((function(n,r){var d=t.getTickLineCoord(n),y=t.getTickTextAnchor(n),g=o(o(o(o({textAnchor:y},l),{stroke:"none",fill:s}),f),{index:r,payload:n,x:d.x2,y:d.y2});return c.default.createElement(h.Layer,o({className:"recharts-polar-angle-axis-tick",key:"tick-"+r},v.adaptEventsOfChild(t.props,n,r)),a&&c.default.createElement("line",o({className:"recharts-polar-angle-axis-tick-line"},p,d)),i&&e.renderTickItem(i,g,u?u(n.value,r):n.value))}));return c.default.createElement(h.Layer,{className:"recharts-polar-angle-axis-ticks"},d)},e.prototype.render=function(){var t=this.props,e=t.ticks,n=t.radius,r=t.axisLine;return n<=0||!e||!e.length?null:c.default.createElement(h.Layer,{className:"recharts-polar-angle-axis"},r&&this.renderAxisLine(),this.renderTicks())},e.displayName="PolarAngleAxis",e.axisType="angleAxis",e.defaultProps={type:"category",angleAxisId:0,scale:"auto",cx:0,cy:0,domain:[0,"auto"],orientation:"outer",axisLine:!0,tickLine:!0,tickSize:8,tick:!0,hide:!1,allowDuplicatedCategory:!0},e}(c.PureComponent);e.PolarAngleAxis=_},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ifOverflowMatches=void 0;e.ifOverflowMatches=function(t,e){var n=t.alwaysShow,r=t.ifOverflow;return n&&(r="extendDomain"),r===e}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ErrorBar=void 0;var a=o(n(0)),u=n(6),s=n(2);function l(t){var e=t.offset,n=t.layout,o=t.width,l=t.dataKey,c=t.data,f=t.dataPointFormatter,h=t.xAxis,p=t.yAxis,d=i(t,["offset","layout","width","dataKey","data","dataPointFormatter","xAxis","yAxis"]),y=s.filterProps(d),v=c.map((function(t,i){var s=f(t,l),c=s.x,d=s.y,v=s.value,g=s.errorVal;if(!g)return null;var m,_,b=[];if(Array.isArray(g)?(m=g[0],_=g[1]):m=_=g,"vertical"===n){var x=h.scale,O=d+e,w=O+o,A=O-o,E=x(v-m),M=x(v+_);b.push({x1:M,y1:w,x2:M,y2:A}),b.push({x1:E,y1:O,x2:M,y2:O}),b.push({x1:E,y1:w,x2:E,y2:A})}else if("horizontal"===n){x=p.scale;var P=c+e;E=P-o,M=P+o,w=x(v-m),A=x(v+_);b.push({x1:E,y1:A,x2:M,y2:A}),b.push({x1:P,y1:w,x2:P,y2:A}),b.push({x1:E,y1:w,x2:M,y2:w})}return a.default.createElement(u.Layer,r({className:"recharts-errorBar",key:"bar-"+i},y),b.map((function(t,e){return a.default.createElement("line",r({},t,{key:"line-"+e}))})))}));return a.default.createElement(u.Layer,{className:"recharts-errorBars"},v)}e.ErrorBar=l,l.defaultProps={stroke:"black",strokeWidth:1.5,width:5,offset:0,layout:"horizontal"},l.displayName="ErrorBar"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ZAxis=void 0;e.ZAxis=function(){return null},e.ZAxis.displayName="ZAxis",e.ZAxis.defaultProps={zAxisId:0,range:[64,64],scale:"auto",type:"number"}},function(t,e){t.exports=n},function(t,e,n){"use strict";var r=u(n(221)),i=u(n(226)),o=u(n(96)),a=u(n(93));function u(t){return t&&t.__esModule?t:{default:t}}t.exports={Transition:a.default,TransitionGroup:o.default,ReplaceTransition:i.default,CSSTransition:r.default}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Legend=void 0;var f=s(n(0)),h=c(n(3)),p=n(121),d=n(5);function y(t){return t.value}function v(t,e){return!0===t?h.default.uniqBy(e,y):h.default.isFunction(t)?h.default.uniqBy(e,t):e}var g=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={boxWidth:-1,boxHeight:-1},e}return i(e,t),e.getWithHeight=function(t,e){var n=t.props.layout;return"vertical"===n&&d.isNumber(t.props.height)?{height:t.props.height}:"horizontal"===n?{width:t.props.width||e}:null},e.prototype.componentDidMount=function(){this.updateBBox()},e.prototype.componentDidUpdate=function(){this.updateBBox()},e.prototype.getBBox=function(){return this.wrapperNode&&this.wrapperNode.getBoundingClientRect?this.wrapperNode.getBoundingClientRect():null},e.prototype.getBBoxSnapshot=function(){var t=this.state,e=t.boxWidth,n=t.boxHeight;return e>=0&&n>=0?{width:e,height:n}:null},e.prototype.getDefaultPosition=function(t){var e,n,r=this.props,i=r.layout,a=r.align,u=r.verticalAlign,s=r.margin,l=r.chartWidth,c=r.chartHeight;t&&(void 0!==t.left&&null!==t.left||void 0!==t.right&&null!==t.right)||(e="center"===a&&"vertical"===i?{left:((l||0)-(this.getBBoxSnapshot()||{width:0}).width)/2}:"right"===a?{right:s&&s.right||0}:{left:s&&s.left||0});t&&(void 0!==t.top&&null!==t.top||void 0!==t.bottom&&null!==t.bottom)||(n="middle"===u?{top:((c||0)-(this.getBBoxSnapshot()||{height:0}).height)/2}:"bottom"===u?{bottom:s&&s.bottom||0}:{top:s&&s.top||0});return o(o({},e),n)},e.prototype.updateBBox=function(){var t=this.state,e=t.boxWidth,n=t.boxHeight,r=this.props.onBBoxUpdate;if(this.wrapperNode&&this.wrapperNode.getBoundingClientRect){var i=this.wrapperNode.getBoundingClientRect();(Math.abs(i.width-e)>1||Math.abs(i.height-n)>1)&&this.setState({boxWidth:i.width,boxHeight:i.height},(function(){r&&r(i)}))}else-1===e&&-1===n||this.setState({boxWidth:-1,boxHeight:-1},(function(){r&&r(null)}))},e.prototype.render=function(){var t=this,e=this.props,n=e.content,r=e.width,i=e.height,a=e.wrapperStyle,u=e.payloadUniqBy,s=e.payload,c=o(o({position:"absolute",width:r||"auto",height:i||"auto"},this.getDefaultPosition(a)),a);return f.default.createElement("div",{className:"recharts-legend-wrapper",style:c,ref:function(e){t.wrapperNode=e}},function(t,e){if(f.default.isValidElement(t))return f.default.cloneElement(t,e);if(h.default.isFunction(t))return f.default.createElement(t,e);e.ref;var n=l(e,["ref"]);return f.default.createElement(p.DefaultLegendContent,o({},n))}(n,o(o({},this.props),{payload:v(u,s)})))},e.displayName="Legend",e.defaultProps={iconSize:14,layout:"horizontal",align:"center",verticalAlign:"bottom"},e}(f.PureComponent);e.Legend=g},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Symbols=void 0;var c=s(n(0)),f=l(n(3)),h=n(70),p=l(n(4)),d=n(2),y={symbolCircle:h.symbolCircle,symbolCross:h.symbolCross,symbolDiamond:h.symbolDiamond,symbolSquare:h.symbolSquare,symbolStar:h.symbolStar,symbolTriangle:h.symbolTriangle,symbolWye:h.symbolWye},v=Math.PI/180,g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getPath=function(){var t=this.props,e=t.size,n=t.sizeType,r=t.type,i=function(t){var e="symbol"+f.default.upperFirst(t);return y[e]||h.symbolCircle}(r);return h.symbol().type(i).size(function(t,e,n){if("area"===e)return t;switch(n){case"cross":return 5*t*t/9;case"diamond":return.5*t*t/Math.sqrt(3);case"square":return t*t;case"star":var r=18*v;return 1.25*t*t*(Math.tan(r)-Math.tan(2*r)*Math.pow(Math.tan(r),2));case"triangle":return Math.sqrt(3)*t*t/4;case"wye":return(21-10*Math.sqrt(3))*t*t/8;default:return Math.PI*t*t/4}}(e,n,r))()},e.prototype.render=function(){var t=this.props,e=t.className,n=t.cx,r=t.cy,i=t.size;return n===+n&&r===+r&&i===+i?c.default.createElement("path",o({},d.filterProps(this.props,!0),{className:p.default("recharts-symbols",e),transform:"translate("+n+", "+r+")",d:this.getPath()})):null},e.defaultProps={type:"circle",size:64,sizeType:"area"},e.registerSymbol=function(t,e){y["symbol"+f.default.upperFirst(t)]=e},e}(c.PureComponent);e.Symbols=g},function(t,e,n){var r=n(122),i=n(21);t.exports=function t(e,n,o,a,u){return e===n||(null==e||null==n||!i(e)&&!i(n)?e!=e&&n!=n:r(e,n,o,a,t,u))}},function(t,e,n){var r=n(20)(n(12),"Map");t.exports=r},function(t,e,n){var r=n(139),i=n(146),o=n(148),a=n(149),u=n(150);function s(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=i,s.prototype.get=o,s.prototype.has=a,s.prototype.set=u,t.exports=s},function(t,e,n){var r=n(164),i=n(170),o=n(62);t.exports=function(t){return o(t)?r(t):i(t)}},function(t,e){t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},function(t,e,n){var r=n(77),i=n(61);t.exports=function(t){return null!=t&&i(t.length)&&!r(t)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}},function(t,e){t.exports=function(t){return t}},function(t,e,n){var r=n(14),i=n(41),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;t.exports=function(t,e){if(r(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!i(t))||(a.test(t)||!o.test(t)||null!=e&&t in Object(e))}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},f=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Line=void 0;var h=s(n(0)),p=f(n(10)),d=f(n(4)),y=f(n(3)),v=n(28),g=n(23),m=n(6),_=n(15),b=n(50),x=n(5),O=n(9),w=n(8),A=n(7),E=n(2),M=function(t){function e(){var n=null!==t&&t.apply(this,arguments)||this;return n.state={isAnimationFinished:!0,totalLength:0},n.getStrokeDasharray=function(t,n,r){for(var i=r.reduce((function(t,e){return t+e})),o=Math.floor(t/i),a=t%i,u=n-t,s=[],l=0,f=0;;f+=r[l],++l)if(f+r[l]>a){s=c(r.slice(0,l),[a-f]);break}var h=s.length%2==0?[0,u]:[u];return c(e.repeat(r,o),s,h).map((function(t){return t+"px"})).join(", ")},n.id=x.uniqueId("recharts-line-"),n.pathRef=function(t){n.mainCurve=t},n.handleAnimationEnd=function(){n.setState({isAnimationFinished:!0}),n.props.onAnimationEnd&&n.props.onAnimationEnd()},n.handleAnimationStart=function(){n.setState({isAnimationFinished:!1}),n.props.onAnimationStart&&n.props.onAnimationStart()},n}return i(e,t),e.prototype.componentDidMount=function(){if(this.props.isAnimationActive){var t=this.getTotalLength();this.setState({totalLength:t})}},e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curPoints:t.points,prevPoints:e.curPoints}:t.points!==e.curPoints?{curPoints:t.points}:null},e.prototype.getTotalLength=function(){var t=this.mainCurve;try{return t&&t.getTotalLength&&t.getTotalLength()||0}catch(t){return 0}},e.repeat=function(t,e){for(var n=t.length%2!=0?c(t,[0]):t,r=[],i=0;i<e;++i)r=c(r,n);return r},e.prototype.renderErrorBar=function(){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var t=this.props,e=t.points,n=t.xAxis,r=t.yAxis,i=t.layout,o=t.children,a=O.findAllByType(o,b.ErrorBar.displayName);if(!a)return null;function u(t,e){return{x:t.x,y:t.y,value:t.value,errorVal:A.getValueByDataKey(t.payload,e)}}return a.map((function(t,o){return h.default.cloneElement(t,{key:"bar-"+o,data:e,xAxis:n,yAxis:r,layout:i,dataPointFormatter:u})}))},e.renderDotItem=function(t,e){var n;if(h.default.isValidElement(t))n=h.default.cloneElement(t,e);else if(y.default.isFunction(t))n=t(e);else{var r=d.default("recharts-line-dot",t?t.className:"");n=h.default.createElement(g.Dot,o({},e,{className:r}))}return n},e.prototype.renderDots=function(t,n){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var r=this.props,i=r.dot,a=r.points,u=r.dataKey,s=E.filterProps(this.props),l=E.filterProps(i,!0),c=a.map((function(t,n){var r=o(o(o({key:"dot-"+n,r:3},s),l),{value:t.value,dataKey:u,cx:t.x,cy:t.y,index:n,payload:t.payload});return e.renderDotItem(i,r)})),f={clipPath:t?"url(#clipPath-"+n+")":null};return h.default.createElement(m.Layer,o({className:"recharts-line-dots",key:"dots"},f),c)},e.prototype.renderCurveStatically=function(t,e,n,r){var i=this.props,a=i.type,u=i.layout,s=i.connectNulls,c=(i.ref,l(i,["type","layout","connectNulls","ref"])),f=o(o(o(o({},E.filterProps(c,!0)),{fill:"none",className:"recharts-line-curve",clipPath:e?"url(#clipPath-"+n+")":null,points:t}),r),{type:a,layout:u,connectNulls:s});return h.default.createElement(v.Curve,o({},f,{pathRef:this.pathRef}))},e.prototype.renderCurveWithAnimation=function(t,e){var n=this,r=this.props,i=r.points,a=r.strokeDasharray,u=r.isAnimationActive,s=r.animationBegin,l=r.animationDuration,c=r.animationEasing,f=r.animationId,d=r.animateNewValues,y=r.width,v=r.height,g=this.state,m=g.prevPoints,_=g.totalLength;return h.default.createElement(p.default,{begin:s,duration:l,isActive:u,easing:c,from:{t:0},to:{t:1},key:"line-"+f,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(r){var u=r.t;if(m){var s=m.length/i.length,l=i.map((function(t,e){var n=Math.floor(e*s);if(m[n]){var r=m[n],i=x.interpolateNumber(r.x,t.x),a=x.interpolateNumber(r.y,t.y);return o(o({},t),{x:i(u),y:a(u)})}if(d){i=x.interpolateNumber(2*y,t.x),a=x.interpolateNumber(v/2,t.y);return o(o({},t),{x:i(u),y:a(u)})}return o(o({},t),{x:t.x,y:t.y})}));return n.renderCurveStatically(l,t,e)}var c,f=x.interpolateNumber(0,_)(u);if(a){var h=(""+a).split(/[,\s]+/gim).map((function(t){return parseFloat(t)}));c=n.getStrokeDasharray(f,_,h)}else c=f+"px "+(_-f)+"px";return n.renderCurveStatically(i,t,e,{strokeDasharray:c})}))},e.prototype.renderCurve=function(t,e){var n=this.props,r=n.points,i=n.isAnimationActive,o=this.state,a=o.prevPoints,u=o.totalLength;return i&&r&&r.length&&(!a&&u>0||!y.default.isEqual(a,r))?this.renderCurveWithAnimation(t,e):this.renderCurveStatically(r,t,e)},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.dot,r=t.points,i=t.className,o=t.xAxis,a=t.yAxis,u=t.top,s=t.left,l=t.width,c=t.height,f=t.isAnimationActive,p=t.id;if(e||!r||!r.length)return null;var v=this.state.isAnimationFinished,g=1===r.length,b=d.default("recharts-line",i),x=o&&o.allowDataOverflow||a&&a.allowDataOverflow,O=y.default.isNil(p)?this.id:p;return h.default.createElement(m.Layer,{className:b},x?h.default.createElement("defs",null,h.default.createElement("clipPath",{id:"clipPath-"+O},h.default.createElement("rect",{x:s,y:u,width:l,height:c}))):null,!g&&this.renderCurve(x,O),this.renderErrorBar(),(g||n)&&this.renderDots(x,O),(!f||v)&&_.LabelList.renderCallByParent(this.props,r))},e.displayName="Line",e.defaultProps={xAxisId:0,yAxisId:0,connectNulls:!1,activeDot:!0,dot:!0,legendType:"line",stroke:"#3182bd",strokeWidth:1,fill:"#fff",points:[],isAnimationActive:!w.Global.isSsr,animateNewValues:!0,animationBegin:0,animationDuration:1500,animationEasing:"ease",hide:!1},e.getComposedData=function(t){var e=t.props,n=t.xAxis,r=t.yAxis,i=t.xAxisTicks,a=t.yAxisTicks,u=t.dataKey,s=t.bandSize,l=t.displayedData,c=t.offset,f=e.layout,h=l.map((function(t,e){var o=A.getValueByDataKey(t,u);return"horizontal"===f?{x:A.getCateCoordinateOfLine({axis:n,ticks:i,bandSize:s,entry:t,index:e}),y:y.default.isNil(o)?null:r.scale(o),value:o,payload:t}:{x:y.default.isNil(o)?null:n.scale(o),y:A.getCateCoordinateOfLine({axis:r,ticks:a,bandSize:s,entry:t,index:e}),value:o,payload:t}}));return o({points:h,layout:f},c)},e}(h.PureComponent);e.Line=M},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Area=void 0;var f=s(n(0)),h=c(n(4)),p=c(n(10)),d=c(n(3)),y=n(28),v=n(23),g=n(6),m=n(15),_=n(8),b=n(5),x=n(7),O=n(2),w=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!0},e.id=b.uniqueId("recharts-area-"),e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),d.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),d.default.isFunction(t)&&t()},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curPoints:t.points,curBaseLine:t.baseLine,prevPoints:e.curPoints,prevBaseLine:e.curBaseLine}:t.points!==e.curPoints||t.baseLine!==e.curBaseLine?{curPoints:t.points,curBaseLine:t.baseLine}:null},e.prototype.renderDots=function(t,n){var r=this.props.isAnimationActive,i=this.state.isAnimationFinished;if(r&&!i)return null;var a=this.props,u=a.dot,s=a.points,l=a.dataKey,c=O.filterProps(this.props),h=O.filterProps(u,!0),p=s.map((function(t,n){var r=o(o(o({key:"dot-"+n,r:3},c),h),{dataKey:l,cx:t.x,cy:t.y,index:n,value:t.value,payload:t.payload});return e.renderDotItem(u,r)})),d={clipPath:t?"url(#clipPath-"+n+")":null};return f.default.createElement(g.Layer,o({className:"recharts-area-dots"},d),p)},e.prototype.renderHorizontalRect=function(t){var e=this.props,n=e.baseLine,r=e.points,i=e.strokeWidth,o=r[0].x,a=r[r.length-1].x,u=t*Math.abs(o-a),s=d.default.max(r.map((function(t){return t.y||0})));return b.isNumber(n)&&"number"==typeof n?s=Math.max(n,s):n&&d.default.isArray(n)&&n.length&&(s=Math.max(d.default.max(n.map((function(t){return t.y||0}))),s)),b.isNumber(s)?f.default.createElement("rect",{x:o<a?o:o-u,y:0,width:u,height:Math.floor(s+(i?parseInt(""+i,10):1))}):null},e.prototype.renderVerticalRect=function(t){var e=this.props,n=e.baseLine,r=e.points,i=e.strokeWidth,o=r[0].y,a=r[r.length-1].y,u=t*Math.abs(o-a),s=d.default.max(r.map((function(t){return t.x||0})));return b.isNumber(n)&&"number"==typeof n?s=Math.max(n,s):n&&d.default.isArray(n)&&n.length&&(s=Math.max(d.default.max(n.map((function(t){return t.x||0}))),s)),b.isNumber(s)?f.default.createElement("rect",{x:0,y:o<a?o:o-u,width:s+(i?parseInt(""+i,10):1),height:Math.floor(u)}):null},e.prototype.renderClipRect=function(t){return"vertical"===this.props.layout?this.renderVerticalRect(t):this.renderHorizontalRect(t)},e.prototype.renderAreaStatically=function(t,e,n,r){var i=this.props,a=i.layout,u=i.type,s=i.stroke,c=i.connectNulls,h=i.isRange,p=(i.ref,l(i,["layout","type","stroke","connectNulls","isRange","ref"]));return f.default.createElement(g.Layer,{clipPath:n?"url(#clipPath-"+r+")":null},f.default.createElement(y.Curve,o({},O.filterProps(p,!0),{points:t,connectNulls:c,type:u,baseLine:e,layout:a,stroke:"none",className:"recharts-area-area"})),"none"!==s&&f.default.createElement(y.Curve,o({},O.filterProps(this.props),{className:"recharts-area-curve",layout:a,type:u,connectNulls:c,fill:"none",points:t})),"none"!==s&&h&&f.default.createElement(y.Curve,o({},O.filterProps(this.props),{className:"recharts-area-curve",layout:a,type:u,connectNulls:c,fill:"none",points:e})))},e.prototype.renderAreaWithAnimation=function(t,e){var n=this,r=this.props,i=r.points,a=r.baseLine,u=r.isAnimationActive,s=r.animationBegin,l=r.animationDuration,c=r.animationEasing,h=r.animationId,y=this.state,v=y.prevPoints,m=y.prevBaseLine;return f.default.createElement(p.default,{begin:s,duration:l,isActive:u,easing:c,from:{t:0},to:{t:1},key:"area-"+h,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(r){var u=r.t;if(v){var s=v.length/i.length,l=i.map((function(t,e){var n=Math.floor(e*s);if(v[n]){var r=v[n],i=b.interpolateNumber(r.x,t.x),a=b.interpolateNumber(r.y,t.y);return o(o({},t),{x:i(u),y:a(u)})}return t})),c=void 0;if(b.isNumber(a)&&"number"==typeof a)c=b.interpolateNumber(m,a)(u);else if(d.default.isNil(a)||d.default.isNaN(a)){c=b.interpolateNumber(m,0)(u)}else c=a.map((function(t,e){var n=Math.floor(e*s);if(m[n]){var r=m[n],i=b.interpolateNumber(r.x,t.x),a=b.interpolateNumber(r.y,t.y);return o(o({},t),{x:i(u),y:a(u)})}return t}));return n.renderAreaStatically(l,c,t,e)}return f.default.createElement(g.Layer,null,f.default.createElement("defs",null,f.default.createElement("clipPath",{id:"animationClipPath-"+e},n.renderClipRect(u))),f.default.createElement(g.Layer,{clipPath:"url(#animationClipPath-"+e+")"},n.renderAreaStatically(i,a,t,e)))}))},e.prototype.renderArea=function(t,e){var n=this.props,r=n.points,i=n.baseLine,o=n.isAnimationActive,a=this.state,u=a.prevPoints,s=a.prevBaseLine,l=a.totalLength;return o&&r&&r.length&&(!u&&l>0||!d.default.isEqual(u,r)||!d.default.isEqual(s,i))?this.renderAreaWithAnimation(t,e):this.renderAreaStatically(r,i,t,e)},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.dot,r=t.points,i=t.className,o=t.top,a=t.left,u=t.xAxis,s=t.yAxis,l=t.width,c=t.height,p=t.isAnimationActive,y=t.id;if(e||!r||!r.length)return null;var v=this.state.isAnimationFinished,_=1===r.length,b=h.default("recharts-area",i),x=u&&u.allowDataOverflow||s&&s.allowDataOverflow,O=d.default.isNil(y)?this.id:y;return f.default.createElement(g.Layer,{className:b},x?f.default.createElement("defs",null,f.default.createElement("clipPath",{id:"clipPath-"+O},f.default.createElement("rect",{x:a,y:o,width:l,height:Math.floor(c)}))):null,_?null:this.renderArea(x,O),(n||_)&&this.renderDots(x,O),(!p||v)&&m.LabelList.renderCallByParent(this.props,r))},e.displayName="Area",e.defaultProps={stroke:"#3182bd",fill:"#3182bd",fillOpacity:.6,xAxisId:0,yAxisId:0,legendType:"line",connectNulls:!1,points:[],dot:!1,activeDot:!0,hide:!1,isAnimationActive:!_.Global.isSsr,animationBegin:0,animationDuration:1500,animationEasing:"ease"},e.getBaseValue=function(t,e,n){var r=t.layout,i=t.baseValue;if(b.isNumber(i)&&"number"==typeof i)return i;var o="horizontal"===r?n:e,a=o.scale.domain();if("number"===o.type){var u=Math.max(a[0],a[1]),s=Math.min(a[0],a[1]);return"dataMin"===i?s:"dataMax"===i||u<0?u:Math.max(Math.min(a[0],a[1]),0)}return"dataMin"===i?a[0]:"dataMax"===i?a[1]:a[0]},e.getComposedData=function(t){var n,r=t.props,i=t.xAxis,a=t.yAxis,u=t.xAxisTicks,s=t.yAxisTicks,l=t.bandSize,c=t.dataKey,f=t.stackedData,h=t.dataStartIndex,p=t.displayedData,y=t.offset,v=r.layout,g=f&&f.length,m=e.getBaseValue(r,i,a),_=!1,b=p.map((function(t,e){var n,r=x.getValueByDataKey(t,c);g?n=f[h+e]:(n=r,d.default.isArray(n)?_=!0:n=[m,n]);var o=d.default.isNil(n[1])||g&&d.default.isNil(r);return"horizontal"===v?{x:x.getCateCoordinateOfLine({axis:i,ticks:u,bandSize:l,entry:t,index:e}),y:o?null:a.scale(n[1]),value:n,payload:t}:{x:o?null:i.scale(n[1]),y:x.getCateCoordinateOfLine({axis:a,ticks:s,bandSize:l,entry:t,index:e}),value:n,payload:t}}));return n=g||_?b.map((function(t){return"horizontal"===v?{x:t.x,y:d.default.isNil(d.default.get(t,"value[0]"))||d.default.isNil(d.default.get(t,"y"))?null:a.scale(d.default.get(t,"value[0]"))}:{x:d.default.isNil(d.default.get(t,"value[0]"))?null:i.scale(d.default.get(t,"value[0]")),y:t.y}})):"horizontal"===v?a.scale(m):i.scale(m),o({points:b,baseLine:n,layout:v,isRange:_},y)},e.renderDotItem=function(t,e){return f.default.isValidElement(t)?f.default.cloneElement(t,e):d.default.isFunction(t)?t(e):f.default.createElement(v.Dot,o({},e,{className:"recharts-area-dot"}))},e}(f.PureComponent);e.Area=w},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Bar=void 0;var f=s(n(0)),h=c(n(4)),p=c(n(10)),d=c(n(3)),y=n(29),v=n(6),g=n(50),m=n(27),_=n(15),b=n(5),x=n(9),O=n(8),w=n(7),A=n(2),E=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.id=b.uniqueId("recharts-bar-"),e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),t&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),t&&t()},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curData:t.data,prevData:e.curData}:t.data!==e.curData?{curData:t.data}:null},e.renderRectangle=function(t,e){return f.default.isValidElement(t)?f.default.cloneElement(t,e):d.default.isFunction(t)?t(e):f.default.createElement(y.Rectangle,o({},e))},e.prototype.renderRectanglesStatically=function(t){var n=this,r=this.props.shape,i=A.filterProps(this.props);return t&&t.map((function(t,a){var u=o(o(o({},i),t),{index:a});return f.default.createElement(v.Layer,o({className:"recharts-bar-rectangle"},A.adaptEventsOfChild(n.props,t,a),{key:"rectangle-"+a}),e.renderRectangle(r,u))}))},e.prototype.renderRectanglesWithAnimation=function(){var t=this,e=this.props,n=e.data,r=e.layout,i=e.isAnimationActive,a=e.animationBegin,u=e.animationDuration,s=e.animationEasing,l=e.animationId,c=this.state.prevData;return f.default.createElement(p.default,{begin:a,duration:u,isActive:i,easing:s,from:{t:0},to:{t:1},key:"bar-"+l,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(e){var i=e.t,a=n.map((function(t,e){var n=c&&c[e];if(n){var a=b.interpolateNumber(n.x,t.x),u=b.interpolateNumber(n.y,t.y),s=b.interpolateNumber(n.width,t.width),l=b.interpolateNumber(n.height,t.height);return o(o({},t),{x:a(i),y:u(i),width:s(i),height:l(i)})}if("horizontal"===r){var f=(l=b.interpolateNumber(0,t.height))(i);return o(o({},t),{y:t.y+t.height-f,height:f})}var h=b.interpolateNumber(0,t.width)(i);return o(o({},t),{width:h})}));return f.default.createElement(v.Layer,null,t.renderRectanglesStatically(a))}))},e.prototype.renderRectangles=function(){var t=this.props,e=t.data,n=t.isAnimationActive,r=this.state.prevData;return!(n&&e&&e.length)||r&&d.default.isEqual(r,e)?this.renderRectanglesStatically(e):this.renderRectanglesWithAnimation()},e.prototype.renderBackground=function(){var t=this,n=this.props.data,r=A.filterProps(this.props.background);return n.map((function(n,i){n.value;var a=n.background,u=l(n,["value","background"]);if(!a)return null;var s=o(o(o(o(o(o({},u),{fill:"#eee"}),a),r),A.adaptEventsOfChild(t.props,n,i)),{index:i,key:"background-bar-"+i,className:"recharts-bar-background-rectangle"});return e.renderRectangle(t.props.background,s)}))},e.prototype.renderErrorBar=function(){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var t=this.props,e=t.data,n=t.xAxis,r=t.yAxis,i=t.layout,o=t.children,a=x.findAllByType(o,g.ErrorBar.displayName);if(!a)return null;var u="vertical"===i?e[0].height/2:e[0].width/2;function s(t,e){return{x:t.x,y:t.y,value:t.value,errorVal:w.getValueByDataKey(t,e)}}return a.map((function(t,o){return f.default.cloneElement(t,{key:"error-bar-"+o,data:e,xAxis:n,yAxis:r,layout:i,offset:u,dataPointFormatter:s})}))},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.data,r=t.className,i=t.xAxis,o=t.yAxis,a=t.left,u=t.top,s=t.width,l=t.height,c=t.isAnimationActive,p=t.background,y=t.id;if(e||!n||!n.length)return null;var g=this.state.isAnimationFinished,m=h.default("recharts-bar",r),b=i&&i.allowDataOverflow||o&&o.allowDataOverflow,x=d.default.isNil(y)?this.id:y;return f.default.createElement(v.Layer,{className:m},b?f.default.createElement("defs",null,f.default.createElement("clipPath",{id:"clipPath-"+x},f.default.createElement("rect",{x:a,y:u,width:s,height:l}))):null,f.default.createElement(v.Layer,{className:"recharts-bar-rectangles",clipPath:b?"url(#clipPath-"+x+")":null},p?this.renderBackground():null,this.renderRectangles()),this.renderErrorBar(),(!c||g)&&_.LabelList.renderCallByParent(this.props,n))},e.displayName="Bar",e.defaultProps={xAxisId:0,yAxisId:0,legendType:"rect",minPointSize:0,hide:!1,data:[],layout:"vertical",isAnimationActive:!O.Global.isSsr,animationBegin:0,animationDuration:400,animationEasing:"ease"},e.getComposedData=function(t){var e=t.props,n=t.item,r=t.barPosition,i=t.bandSize,a=t.xAxis,u=t.yAxis,s=t.xAxisTicks,l=t.yAxisTicks,c=t.stackedData,f=t.dataStartIndex,h=t.displayedData,p=t.offset,y=w.findPositionOfBar(r,n);if(!y)return null;var v=e.layout,g=n.props,_=g.dataKey,O=g.children,A=g.minPointSize,E="horizontal"===v?u:a,M=c?E.scale.domain():null,P=w.getBaseValueOfBar({numericAxis:E}),S=x.findAllByType(O,m.Cell.displayName),k=h.map((function(t,e){var n,r,h,p,g,m,x;(c?n=w.truncateByDomain(c[f+e],M):(n=w.getValueByDataKey(t,_),d.default.isArray(n)||(n=[P,n])),"horizontal"===v)?(r=w.getCateCoordinateOfBar({axis:a,ticks:s,bandSize:i,offset:y.offset,entry:t,index:e}),h=u.scale(n[1]),p=y.size,g=u.scale(n[0])-u.scale(n[1]),m={x:r,y:u.y,width:p,height:u.height},Math.abs(A)>0&&Math.abs(g)<Math.abs(A)&&(h-=x=b.mathSign(g||A)*(Math.abs(A)-Math.abs(g)),g+=x)):(r=a.scale(n[0]),h=w.getCateCoordinateOfBar({axis:u,ticks:l,bandSize:i,offset:y.offset,entry:t,index:e}),p=a.scale(n[1])-a.scale(n[0]),g=y.size,m={x:a.x,y:h,width:a.width,height:g},Math.abs(A)>0&&Math.abs(p)<Math.abs(A)&&(p+=x=b.mathSign(p||A)*(Math.abs(A)-Math.abs(p))));return o(o(o({},t),{x:r,y:h,width:p,height:g,value:c?n:n[1],payload:t,background:m}),S&&S[e]&&S[e].props)}));return o({data:k,layout:v},p)},e}(f.PureComponent);e.Bar=E},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Scatter=void 0;var c=s(n(0)),f=l(n(10)),h=l(n(4)),p=l(n(3)),d=n(6),y=n(15),v=n(9),g=n(8),m=n(51),_=n(28),b=n(56),x=n(50),O=n(27),w=n(5),A=n(7),E=n(2),M=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.handleAnimationEnd=function(){e.setState({isAnimationFinished:!0})},e.handleAnimationStart=function(){e.setState({isAnimationFinished:!1})},e.id=w.uniqueId("recharts-scatter-"),e}return i(e,t),e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curPoints:t.points,prevPoints:e.curPoints}:t.points!==e.curPoints?{curPoints:t.points}:null},e.renderSymbolItem=function(t,e){var n;return c.default.isValidElement(t)?n=c.default.cloneElement(t,e):p.default.isFunction(t)?n=t(e):"string"==typeof t&&(n=c.default.createElement(b.Symbols,o({},e,{type:t}))),n},e.prototype.renderSymbolsStatically=function(t){var n=this,r=this.props,i=r.shape,a=r.activeShape,u=r.activeIndex,s=E.filterProps(this.props);return t.map((function(t,r){var l=o(o({key:"symbol-"+r},s),t);return c.default.createElement(d.Layer,o({className:"recharts-scatter-symbol"},E.adaptEventsOfChild(n.props,t,r),{key:"symbol-"+r}),e.renderSymbolItem(u===r?a:i,l))}))},e.prototype.renderSymbolsWithAnimation=function(){var t=this,e=this.props,n=e.points,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,s=e.animationId,l=this.state.prevPoints;return c.default.createElement(f.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"pie-"+s,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(e){var r=e.t,i=n.map((function(t,e){var n=l&&l[e];if(n){var i=w.interpolateNumber(n.cx,t.cx),a=w.interpolateNumber(n.cy,t.cy),u=w.interpolateNumber(n.size,t.size);return o(o({},t),{cx:i(r),cy:a(r),size:u(r)})}var s=w.interpolateNumber(0,t.size);return o(o({},t),{size:s(r)})}));return c.default.createElement(d.Layer,null,t.renderSymbolsStatically(i))}))},e.prototype.renderSymbols=function(){var t=this.props,e=t.points,n=t.isAnimationActive,r=this.state.prevPoints;return!(n&&e&&e.length)||r&&p.default.isEqual(r,e)?this.renderSymbolsStatically(e):this.renderSymbolsWithAnimation()},e.prototype.renderErrorBar=function(){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var t=this.props,e=t.points,n=t.xAxis,r=t.yAxis,i=t.children,o=v.findAllByType(i,x.ErrorBar.displayName);if(!o)return null;function a(t,e){return{x:t.cx,y:t.cy,value:+t.node.y,errorVal:A.getValueByDataKey(t,e)}}function u(t,e){return{x:t.cx,y:t.cy,value:+t.node.x,errorVal:A.getValueByDataKey(t,e)}}return o.map((function(t,i){var o=t.props.direction;return c.default.cloneElement(t,{key:i,data:e,xAxis:n,yAxis:r,layout:"x"===o?"vertical":"horizontal",dataPointFormatter:"x"===o?u:a})}))},e.prototype.renderLine=function(){var t,e,n=this.props,r=n.points,i=n.line,a=n.lineType,u=n.lineJointType,s=E.filterProps(this.props),l=E.filterProps(i);if("joint"===a)t=r.map((function(t){return{x:t.cx,y:t.cy}}));else if("fitting"===a){var f=w.getLinearRegression(r),h=f.xmin,y=f.xmax,v=f.a,g=f.b,m=function(t){return v*t+g};t=[{x:h,y:m(h)},{x:y,y:m(y)}]}var b=o(o(o(o({},s),{fill:"none",stroke:s&&s.fill}),l),{points:t});return e=c.default.isValidElement(i)?c.default.cloneElement(i,b):p.default.isFunction(i)?i(b):c.default.createElement(_.Curve,o({},b,{type:u})),c.default.createElement(d.Layer,{className:"recharts-scatter-line",key:"recharts-scatter-line"},e)},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.points,r=t.line,i=t.className,o=t.xAxis,a=t.yAxis,u=t.left,s=t.top,l=t.width,f=t.height,v=t.id,g=t.isAnimationActive;if(e||!n||!n.length)return null;var m=this.state.isAnimationFinished,_=h.default("recharts-scatter",i),b=o&&o.allowDataOverflow||a&&a.allowDataOverflow,x=p.default.isNil(v)?this.id:v;return c.default.createElement(d.Layer,{className:_,clipPath:b?"url(#clipPath-"+x+")":null},b?c.default.createElement("defs",null,c.default.createElement("clipPath",{id:"clipPath-"+x},c.default.createElement("rect",{x:u,y:s,width:l,height:f}))):null,r&&this.renderLine(),this.renderErrorBar(),c.default.createElement(d.Layer,{key:"recharts-scatter-symbols"},this.renderSymbols()),(!g||m)&&y.LabelList.renderCallByParent(this.props,n))},e.displayName="Scatter",e.defaultProps={xAxisId:0,yAxisId:0,zAxisId:0,legendType:"circle",lineType:"joint",lineJointType:"linear",data:[],shape:"circle",hide:!1,isAnimationActive:!g.Global.isSsr,animationBegin:0,animationDuration:400,animationEasing:"linear"},e.getComposedData=function(t){var e=t.xAxis,n=t.yAxis,r=t.zAxis,i=t.item,a=t.displayedData,u=t.xAxisTicks,s=t.yAxisTicks,l=t.offset,c=i.props.tooltipType,f=v.findAllByType(i.props.children,O.Cell.displayName),h=p.default.isNil(e.dataKey)?i.props.dataKey:e.dataKey,d=p.default.isNil(n.dataKey)?i.props.dataKey:n.dataKey,y=r&&r.dataKey,g=r?r.range:m.ZAxis.defaultProps.range,_=g&&g[0],b=e.scale.bandwidth?e.scale.bandwidth():0,x=n.scale.bandwidth?n.scale.bandwidth():0,w=a.map((function(t,a){var l=A.getValueByDataKey(t,h),v=A.getValueByDataKey(t,d),g=!p.default.isNil(y)&&A.getValueByDataKey(t,y)||"-",m=[{name:p.default.isNil(e.dataKey)?i.props.name:e.name||e.dataKey,unit:e.unit||"",value:l,payload:t,dataKey:h,type:c},{name:p.default.isNil(n.dataKey)?i.props.name:n.name||n.dataKey,unit:n.unit||"",value:v,payload:t,dataKey:d,type:c}];"-"!==g&&m.push({name:r.name||r.dataKey,unit:r.unit||"",value:g,payload:t,dataKey:y,type:c});var O=A.getCateCoordinateOfLine({axis:e,ticks:u,bandSize:b,entry:t,index:a,dataKey:h}),w=A.getCateCoordinateOfLine({axis:n,ticks:s,bandSize:x,entry:t,index:a,dataKey:d}),E="-"!==g?r.scale(g):_,M=Math.sqrt(Math.max(E,0)/Math.PI);return o(o(o({},t),{cx:O,cy:w,x:O-M,y:w-M,xAxis:e,yAxis:n,zAxis:r,width:2*M,height:2*M,size:E,node:{x:l,y:v,z:g},tooltipPayload:m,tooltipPosition:{x:O,y:w},payload:t}),f&&f[a]&&f[a].props)}));return o({points:w},l)},e}(c.PureComponent);e.Scatter=M},function(t,e,n){"use strict";n.r(e),n.d(e,"arc",(function(){return k})),n.d(e,"area",(function(){return R})),n.d(e,"line",(function(){return L})),n.d(e,"pie",(function(){return F})),n.d(e,"areaRadial",(function(){return H})),n.d(e,"radialArea",(function(){return H})),n.d(e,"lineRadial",(function(){return G})),n.d(e,"radialLine",(function(){return G})),n.d(e,"pointRadial",(function(){return K})),n.d(e,"linkHorizontal",(function(){return tt})),n.d(e,"linkVertical",(function(){return et})),n.d(e,"linkRadial",(function(){return nt})),n.d(e,"symbol",(function(){return bt})),n.d(e,"symbols",(function(){return _t})),n.d(e,"symbolCircle",(function(){return rt})),n.d(e,"symbolCross",(function(){return it})),n.d(e,"symbolDiamond",(function(){return ut})),n.d(e,"symbolSquare",(function(){return ht})),n.d(e,"symbolStar",(function(){return ft})),n.d(e,"symbolTriangle",(function(){return dt})),n.d(e,"symbolWye",(function(){return mt})),n.d(e,"curveBasisClosed",(function(){return Mt})),n.d(e,"curveBasisOpen",(function(){return St})),n.d(e,"curveBasis",(function(){return At})),n.d(e,"curveBundle",(function(){return Ct})),n.d(e,"curveCardinalClosed",(function(){return It})),n.d(e,"curveCardinalOpen",(function(){return Rt})),n.d(e,"curveCardinal",(function(){return Nt})),n.d(e,"curveCatmullRomClosed",(function(){return Wt})),n.d(e,"curveCatmullRomOpen",(function(){return qt})),n.d(e,"curveCatmullRom",(function(){return Ft})),n.d(e,"curveLinearClosed",(function(){return Ht})),n.d(e,"curveLinear",(function(){return N})),n.d(e,"curveMonotoneX",(function(){return te})),n.d(e,"curveMonotoneY",(function(){return ee})),n.d(e,"curveNatural",(function(){return ie})),n.d(e,"curveStep",(function(){return ae})),n.d(e,"curveStepAfter",(function(){return se})),n.d(e,"curveStepBefore",(function(){return ue})),n.d(e,"stack",(function(){return pe})),n.d(e,"stackOffsetExpand",(function(){return de})),n.d(e,"stackOffsetDiverging",(function(){return ye})),n.d(e,"stackOffsetNone",(function(){return le})),n.d(e,"stackOffsetSilhouette",(function(){return ve})),n.d(e,"stackOffsetWiggle",(function(){return ge})),n.d(e,"stackOrderAppearance",(function(){return me})),n.d(e,"stackOrderAscending",(function(){return be})),n.d(e,"stackOrderDescending",(function(){return Oe})),n.d(e,"stackOrderInsideOut",(function(){return we})),n.d(e,"stackOrderNone",(function(){return ce})),n.d(e,"stackOrderReverse",(function(){return Ae}));const r=Math.PI,i=2*r,o=i-1e-6;function a(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function u(){return new a}a.prototype=u.prototype={constructor:a,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,i,o){t=+t,e=+e,n=+n,i=+i,o=+o;var a=this._x1,u=this._y1,s=n-t,l=i-e,c=a-t,f=u-e,h=c*c+f*f;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(h>1e-6)if(Math.abs(f*s-l*c)>1e-6&&o){var p=n-a,d=i-u,y=s*s+l*l,v=p*p+d*d,g=Math.sqrt(y),m=Math.sqrt(h),_=o*Math.tan((r-Math.acos((y+h-v)/(2*g*m)))/2),b=_/m,x=_/g;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*c)+","+(e+b*f)),this._+="A"+o+","+o+",0,0,"+ +(f*p>c*d)+","+(this._x1=t+x*s)+","+(this._y1=e+x*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,a,u,s){t=+t,e=+e,s=!!s;var l=(n=+n)*Math.cos(a),c=n*Math.sin(a),f=t+l,h=e+c,p=1^s,d=s?a-u:u-a;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+f+","+h:(Math.abs(this._x1-f)>1e-6||Math.abs(this._y1-h)>1e-6)&&(this._+="L"+f+","+h),n&&(d<0&&(d=d%i+i),d>o?this._+="A"+n+","+n+",0,1,"+p+","+(t-l)+","+(e-c)+"A"+n+","+n+",0,1,"+p+","+(this._x1=f)+","+(this._y1=h):d>1e-6&&(this._+="A"+n+","+n+",0,"+ +(d>=r)+","+p+","+(this._x1=t+n*Math.cos(u))+","+(this._y1=e+n*Math.sin(u))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var s=u,l=function(t){return function(){return t}},c=Math.abs,f=Math.atan2,h=Math.cos,p=Math.max,d=Math.min,y=Math.sin,v=Math.sqrt,g=Math.PI,m=g/2,_=2*g;function b(t){return t>1?0:t<-1?g:Math.acos(t)}function x(t){return t>=1?m:t<=-1?-m:Math.asin(t)}function O(t){return t.innerRadius}function w(t){return t.outerRadius}function A(t){return t.startAngle}function E(t){return t.endAngle}function M(t){return t&&t.padAngle}function P(t,e,n,r,i,o,a,u){var s=n-t,l=r-e,c=a-i,f=u-o,h=f*s-c*l;if(!(h*h<1e-12))return[t+(h=(c*(e-o)-f*(t-i))/h)*s,e+h*l]}function S(t,e,n,r,i,o,a){var u=t-n,s=e-r,l=(a?o:-o)/v(u*u+s*s),c=l*s,f=-l*u,h=t+c,d=e+f,y=n+c,g=r+f,m=(h+y)/2,_=(d+g)/2,b=y-h,x=g-d,O=b*b+x*x,w=i-o,A=h*g-y*d,E=(x<0?-1:1)*v(p(0,w*w*O-A*A)),M=(A*x-b*E)/O,P=(-A*b-x*E)/O,S=(A*x+b*E)/O,k=(-A*b+x*E)/O,C=M-m,j=P-_,T=S-m,N=k-_;return C*C+j*j>T*T+N*N&&(M=S,P=k),{cx:M,cy:P,x01:-c,y01:-f,x11:M*(i/w-1),y11:P*(i/w-1)}}var k=function(){var t=O,e=w,n=l(0),r=null,i=A,o=E,a=M,u=null;function p(){var l,p,O=+t.apply(this,arguments),w=+e.apply(this,arguments),A=i.apply(this,arguments)-m,E=o.apply(this,arguments)-m,M=c(E-A),k=E>A;if(u||(u=l=s()),w<O&&(p=w,w=O,O=p),w>1e-12)if(M>_-1e-12)u.moveTo(w*h(A),w*y(A)),u.arc(0,0,w,A,E,!k),O>1e-12&&(u.moveTo(O*h(E),O*y(E)),u.arc(0,0,O,E,A,k));else{var C,j,T=A,N=E,D=A,I=E,L=M,R=M,B=a.apply(this,arguments)/2,z=B>1e-12&&(r?+r.apply(this,arguments):v(O*O+w*w)),F=d(c(w-O)/2,+n.apply(this,arguments)),V=F,W=F;if(z>1e-12){var U=x(z/O*y(B)),q=x(z/w*y(B));(L-=2*U)>1e-12?(D+=U*=k?1:-1,I-=U):(L=0,D=I=(A+E)/2),(R-=2*q)>1e-12?(T+=q*=k?1:-1,N-=q):(R=0,T=N=(A+E)/2)}var G=w*h(T),H=w*y(T),K=O*h(I),X=O*y(I);if(F>1e-12){var Y,$=w*h(N),Z=w*y(N),J=O*h(D),Q=O*y(D);if(M<g&&(Y=P(G,H,J,Q,$,Z,K,X))){var tt=G-Y[0],et=H-Y[1],nt=$-Y[0],rt=Z-Y[1],it=1/y(b((tt*nt+et*rt)/(v(tt*tt+et*et)*v(nt*nt+rt*rt)))/2),ot=v(Y[0]*Y[0]+Y[1]*Y[1]);V=d(F,(O-ot)/(it-1)),W=d(F,(w-ot)/(it+1))}}R>1e-12?W>1e-12?(C=S(J,Q,G,H,w,W,k),j=S($,Z,K,X,w,W,k),u.moveTo(C.cx+C.x01,C.cy+C.y01),W<F?u.arc(C.cx,C.cy,W,f(C.y01,C.x01),f(j.y01,j.x01),!k):(u.arc(C.cx,C.cy,W,f(C.y01,C.x01),f(C.y11,C.x11),!k),u.arc(0,0,w,f(C.cy+C.y11,C.cx+C.x11),f(j.cy+j.y11,j.cx+j.x11),!k),u.arc(j.cx,j.cy,W,f(j.y11,j.x11),f(j.y01,j.x01),!k))):(u.moveTo(G,H),u.arc(0,0,w,T,N,!k)):u.moveTo(G,H),O>1e-12&&L>1e-12?V>1e-12?(C=S(K,X,$,Z,O,-V,k),j=S(G,H,J,Q,O,-V,k),u.lineTo(C.cx+C.x01,C.cy+C.y01),V<F?u.arc(C.cx,C.cy,V,f(C.y01,C.x01),f(j.y01,j.x01),!k):(u.arc(C.cx,C.cy,V,f(C.y01,C.x01),f(C.y11,C.x11),!k),u.arc(0,0,O,f(C.cy+C.y11,C.cx+C.x11),f(j.cy+j.y11,j.cx+j.x11),k),u.arc(j.cx,j.cy,V,f(j.y11,j.x11),f(j.y01,j.x01),!k))):u.arc(0,0,O,I,D,k):u.lineTo(K,X)}else u.moveTo(0,0);if(u.closePath(),l)return u=null,l+""||null}return p.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-g/2;return[h(r)*n,y(r)*n]},p.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),p):t},p.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:l(+t),p):e},p.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:l(+t),p):n},p.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:l(+t),p):r},p.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:l(+t),p):i},p.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:l(+t),p):o},p.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:l(+t),p):a},p.context=function(t){return arguments.length?(u=null==t?null:t,p):u},p},C=Array.prototype.slice,j=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)};function T(t){this._context=t}T.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var N=function(t){return new T(t)};function D(t){return t[0]}function I(t){return t[1]}var L=function(t,e){var n=l(!0),r=null,i=N,o=null;function a(a){var u,l,c,f=(a=j(a)).length,h=!1;for(null==r&&(o=i(c=s())),u=0;u<=f;++u)!(u<f&&n(l=a[u],u,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(l,u,a),+e(l,u,a));if(c)return o=null,c+""||null}return t="function"==typeof t?t:void 0===t?D:l(t),e="function"==typeof e?e:void 0===e?I:l(e),a.x=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:l(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:l(!!t),a):n},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a},R=function(t,e,n){var r=null,i=l(!0),o=null,a=N,u=null;function c(l){var c,f,h,p,d,y=(l=j(l)).length,v=!1,g=new Array(y),m=new Array(y);for(null==o&&(u=a(d=s())),c=0;c<=y;++c){if(!(c<y&&i(p=l[c],c,l))===v)if(v=!v)f=c,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),h=c-1;h>=f;--h)u.point(g[h],m[h]);u.lineEnd(),u.areaEnd()}v&&(g[c]=+t(p,c,l),m[c]=+e(p,c,l),u.point(r?+r(p,c,l):g[c],n?+n(p,c,l):m[c]))}if(d)return u=null,d+""||null}function f(){return L().defined(i).curve(a).context(o)}return t="function"==typeof t?t:void 0===t?D:l(+t),e="function"==typeof e?e:l(void 0===e?0:+e),n="function"==typeof n?n:void 0===n?I:l(+n),c.x=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),r=null,c):t},c.x0=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),c):t},c.x1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:l(+t),c):r},c.y=function(t){return arguments.length?(e="function"==typeof t?t:l(+t),n=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:l(+t),c):e},c.y1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:l(+t),c):n},c.lineX0=c.lineY0=function(){return f().x(t).y(e)},c.lineY1=function(){return f().x(t).y(n)},c.lineX1=function(){return f().x(r).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:l(!!t),c):i},c.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),c):a},c.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),c):o},c},B=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},z=function(t){return t},F=function(){var t=z,e=B,n=null,r=l(0),i=l(_),o=l(0);function a(a){var u,s,l,c,f,h=(a=j(a)).length,p=0,d=new Array(h),y=new Array(h),v=+r.apply(this,arguments),g=Math.min(_,Math.max(-_,i.apply(this,arguments)-v)),m=Math.min(Math.abs(g)/h,o.apply(this,arguments)),b=m*(g<0?-1:1);for(u=0;u<h;++u)(f=y[d[u]=u]=+t(a[u],u,a))>0&&(p+=f);for(null!=e?d.sort((function(t,n){return e(y[t],y[n])})):null!=n&&d.sort((function(t,e){return n(a[t],a[e])})),u=0,l=p?(g-h*b)/p:0;u<h;++u,v=c)s=d[u],c=v+((f=y[s])>0?f*l:0)+b,y[s]={data:a[s],index:u,value:f,startAngle:v,endAngle:c,padAngle:m};return y}return a.value=function(e){return arguments.length?(t="function"==typeof e?e:l(+e),a):t},a.sortValues=function(t){return arguments.length?(e=t,n=null,a):e},a.sort=function(t){return arguments.length?(n=t,e=null,a):n},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:l(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:l(+t),a):i},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:l(+t),a):o},a},V=U(N);function W(t){this._curve=t}function U(t){function e(e){return new W(t(e))}return e._curve=t,e}function q(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(U(t)):e()._curve},t}W.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};var G=function(){return q(L().curve(V))},H=function(){var t=R().curve(V),e=t.curve,n=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return q(n())},delete t.lineX0,t.lineEndAngle=function(){return q(r())},delete t.lineX1,t.lineInnerRadius=function(){return q(i())},delete t.lineY0,t.lineOuterRadius=function(){return q(o())},delete t.lineY1,t.curve=function(t){return arguments.length?e(U(t)):e()._curve},t},K=function(t,e){return[(e=+e)*Math.cos(t-=Math.PI/2),e*Math.sin(t)]};function X(t){return t.source}function Y(t){return t.target}function $(t){var e=X,n=Y,r=D,i=I,o=null;function a(){var a,u=C.call(arguments),l=e.apply(this,u),c=n.apply(this,u);if(o||(o=a=s()),t(o,+r.apply(this,(u[0]=l,u)),+i.apply(this,u),+r.apply(this,(u[0]=c,u)),+i.apply(this,u)),a)return o=null,a+""||null}return a.source=function(t){return arguments.length?(e=t,a):e},a.target=function(t){return arguments.length?(n=t,a):n},a.x=function(t){return arguments.length?(r="function"==typeof t?t:l(+t),a):r},a.y=function(t){return arguments.length?(i="function"==typeof t?t:l(+t),a):i},a.context=function(t){return arguments.length?(o=null==t?null:t,a):o},a}function Z(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e=(e+r)/2,n,e,i,r,i)}function J(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e,n=(n+i)/2,r,n,r,i)}function Q(t,e,n,r,i){var o=K(e,n),a=K(e,n=(n+i)/2),u=K(r,n),s=K(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(a[0],a[1],u[0],u[1],s[0],s[1])}function tt(){return $(Z)}function et(){return $(J)}function nt(){var t=$(Q);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var rt={draw:function(t,e){var n=Math.sqrt(e/g);t.moveTo(n,0),t.arc(0,0,n,0,_)}},it={draw:function(t,e){var n=Math.sqrt(e/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},ot=Math.sqrt(1/3),at=2*ot,ut={draw:function(t,e){var n=Math.sqrt(e/at),r=n*ot;t.moveTo(0,-n),t.lineTo(r,0),t.lineTo(0,n),t.lineTo(-r,0),t.closePath()}},st=Math.sin(g/10)/Math.sin(7*g/10),lt=Math.sin(_/10)*st,ct=-Math.cos(_/10)*st,ft={draw:function(t,e){var n=Math.sqrt(.8908130915292852*e),r=lt*n,i=ct*n;t.moveTo(0,-n),t.lineTo(r,i);for(var o=1;o<5;++o){var a=_*o/5,u=Math.cos(a),s=Math.sin(a);t.lineTo(s*n,-u*n),t.lineTo(u*r-s*i,s*r+u*i)}t.closePath()}},ht={draw:function(t,e){var n=Math.sqrt(e),r=-n/2;t.rect(r,r,n,n)}},pt=Math.sqrt(3),dt={draw:function(t,e){var n=-Math.sqrt(e/(3*pt));t.moveTo(0,2*n),t.lineTo(-pt*n,-n),t.lineTo(pt*n,-n),t.closePath()}},yt=Math.sqrt(3)/2,vt=1/Math.sqrt(12),gt=3*(vt/2+1),mt={draw:function(t,e){var n=Math.sqrt(e/gt),r=n/2,i=n*vt,o=r,a=n*vt+n,u=-o,s=a;t.moveTo(r,i),t.lineTo(o,a),t.lineTo(u,s),t.lineTo(-.5*r-yt*i,yt*r+-.5*i),t.lineTo(-.5*o-yt*a,yt*o+-.5*a),t.lineTo(-.5*u-yt*s,yt*u+-.5*s),t.lineTo(-.5*r+yt*i,-.5*i-yt*r),t.lineTo(-.5*o+yt*a,-.5*a-yt*o),t.lineTo(-.5*u+yt*s,-.5*s-yt*u),t.closePath()}},_t=[rt,it,ut,ht,ft,dt,mt],bt=function(t,e){var n=null;function r(){var r;if(n||(n=r=s()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),r)return n=null,r+""||null}return t="function"==typeof t?t:l(t||rt),e="function"==typeof e?e:l(void 0===e?64:+e),r.type=function(e){return arguments.length?(t="function"==typeof e?e:l(e),r):t},r.size=function(t){return arguments.length?(e="function"==typeof t?t:l(+t),r):e},r.context=function(t){return arguments.length?(n=null==t?null:t,r):n},r},xt=function(){};function Ot(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function wt(t){this._context=t}wt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Ot(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Ot(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var At=function(t){return new wt(t)};function Et(t){this._context=t}Et.prototype={areaStart:xt,areaEnd:xt,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Ot(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var Mt=function(t){return new Et(t)};function Pt(t){this._context=t}Pt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Ot(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var St=function(t){return new Pt(t)};function kt(t,e){this._basis=new wt(t),this._beta=e}kt.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],o=e[0],a=t[n]-i,u=e[n]-o,s=-1;++s<=n;)r=s/n,this._basis.point(this._beta*t[s]+(1-this._beta)*(i+r*a),this._beta*e[s]+(1-this._beta)*(o+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var Ct=function t(e){function n(t){return 1===e?new wt(t):new kt(t,e)}return n.beta=function(e){return t(+e)},n}(.85);function jt(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function Tt(t,e){this._context=t,this._k=(1-e)/6}Tt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:jt(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:jt(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Nt=function t(e){function n(t){return new Tt(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Dt(t,e){this._context=t,this._k=(1-e)/6}Dt.prototype={areaStart:xt,areaEnd:xt,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:jt(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var It=function t(e){function n(t){return new Dt(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Lt(t,e){this._context=t,this._k=(1-e)/6}Lt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:jt(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Rt=function t(e){function n(t){return new Lt(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Bt(t,e,n){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>1e-12){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,i=(i*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>1e-12){var l=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*l+t._x1*t._l23_2a-e*t._l12_2a)/c,a=(a*l+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function zt(t,e){this._context=t,this._alpha=e}zt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:Bt(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Ft=function t(e){function n(t){return e?new zt(t,e):new Tt(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function Vt(t,e){this._context=t,this._alpha=e}Vt.prototype={areaStart:xt,areaEnd:xt,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Bt(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Wt=function t(e){function n(t){return e?new Vt(t,e):new Dt(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function Ut(t,e){this._context=t,this._alpha=e}Ut.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Bt(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var qt=function t(e){function n(t){return e?new Ut(t,e):new Lt(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function Gt(t){this._context=t}Gt.prototype={areaStart:xt,areaEnd:xt,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};var Ht=function(t){return new Gt(t)};function Kt(t){return t<0?-1:1}function Xt(t,e,n){var r=t._x1-t._x0,i=e-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(n-t._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return(Kt(o)+Kt(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function Yt(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function $t(t,e,n){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,u=(o-r)/3;t._context.bezierCurveTo(r+u,i+u*e,o-u,a-u*n,o,a)}function Zt(t){this._context=t}function Jt(t){this._context=new Qt(t)}function Qt(t){this._context=t}function te(t){return new Zt(t)}function ee(t){return new Jt(t)}function ne(t){this._context=t}function re(t){var e,n,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,o[e]=4,a[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/o[e-1],o[e]-=n,a[e]-=n*a[e-1];for(i[r-1]=a[r-1]/o[r-1],e=r-2;e>=0;--e)i[e]=(a[e]-i[e+1])/o[e];for(o[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)o[e]=2*t[e+1]-i[e+1];return[i,o]}Zt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:$t(this,this._t0,Yt(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,$t(this,Yt(this,n=Xt(this,t,e)),n);break;default:$t(this,this._t0,n=Xt(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(Jt.prototype=Object.create(Zt.prototype)).point=function(t,e){Zt.prototype.point.call(this,e,t)},Qt.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,o){this._context.bezierCurveTo(e,t,r,n,o,i)}},ne.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=re(t),i=re(e),o=0,a=1;a<n;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],e[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var ie=function(t){return new ne(t)};function oe(t,e){this._context=t,this._t=e}oe.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};var ae=function(t){return new oe(t,.5)};function ue(t){return new oe(t,0)}function se(t){return new oe(t,1)}var le=function(t,e){if((i=t.length)>1)for(var n,r,i,o=1,a=t[e[0]],u=a.length;o<i;++o)for(r=a,a=t[e[o]],n=0;n<u;++n)a[n][1]+=a[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},ce=function(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n};function fe(t,e){return t[e]}function he(t){const e=[];return e.key=t,e}var pe=function(){var t=l([]),e=ce,n=le,r=fe;function i(i){var o,a,u=Array.from(t.apply(this,arguments),he),s=u.length,l=-1;for(const t of i)for(o=0,++l;o<s;++o)(u[o][l]=[0,+r(t,u[o].key,l,i)]).data=t;for(o=0,a=j(e(u));o<s;++o)u[a[o]].index=o;return n(u,a),u}return i.keys=function(e){return arguments.length?(t="function"==typeof e?e:l(Array.from(e)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:l(+t),i):r},i.order=function(t){return arguments.length?(e=null==t?ce:"function"==typeof t?t:l(Array.from(t)),i):e},i.offset=function(t){return arguments.length?(n=null==t?le:t,i):n},i},de=function(t,e){if((r=t.length)>0){for(var n,r,i,o=0,a=t[0].length;o<a;++o){for(i=n=0;n<r;++n)i+=t[n][o][1]||0;if(i)for(n=0;n<r;++n)t[n][o][1]/=i}le(t,e)}},ye=function(t,e){if((u=t.length)>0)for(var n,r,i,o,a,u,s=0,l=t[e[0]].length;s<l;++s)for(o=a=0,n=0;n<u;++n)(i=(r=t[e[n]][s])[1]-r[0])>0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=a,r[0]=a+=i):(r[0]=0,r[1]=i)},ve=function(t,e){if((n=t.length)>0){for(var n,r=0,i=t[e[0]],o=i.length;r<o;++r){for(var a=0,u=0;a<n;++a)u+=t[a][r][1]||0;i[r][1]+=i[r][0]=-u/2}le(t,e)}},ge=function(t,e){if((i=t.length)>0&&(r=(n=t[e[0]]).length)>0){for(var n,r,i,o=0,a=1;a<r;++a){for(var u=0,s=0,l=0;u<i;++u){for(var c=t[e[u]],f=c[a][1]||0,h=(f-(c[a-1][1]||0))/2,p=0;p<u;++p){var d=t[e[p]];h+=(d[a][1]||0)-(d[a-1][1]||0)}s+=f,l+=h*f}n[a-1][1]+=n[a-1][0]=o,s&&(o-=l/s)}n[a-1][1]+=n[a-1][0]=o,le(t,e)}},me=function(t){var e=t.map(_e);return ce(t).sort((function(t,n){return e[t]-e[n]}))};function _e(t){for(var e,n=-1,r=0,i=t.length,o=-1/0;++n<i;)(e=+t[n][1])>o&&(o=e,r=n);return r}var be=function(t){var e=t.map(xe);return ce(t).sort((function(t,n){return e[t]-e[n]}))};function xe(t){for(var e,n=0,r=-1,i=t.length;++r<i;)(e=+t[r][1])&&(n+=e);return n}var Oe=function(t){return be(t).reverse()},we=function(t){var e,n,r=t.length,i=t.map(xe),o=me(t),a=0,u=0,s=[],l=[];for(e=0;e<r;++e)n=o[e],a<u?(a+=i[n],s.push(n)):(u+=i[n],l.push(n));return l.reverse().concat(s)},Ae=function(t){return ce(t).reverse()}},function(t,e,n){var r=n(25),i=n(230),o=n(231),a=Math.max,u=Math.min;t.exports=function(t,e,n){var s,l,c,f,h,p,d=0,y=!1,v=!1,g=!0;if("function"!=typeof t)throw new TypeError("Expected a function");function m(e){var n=s,r=l;return s=l=void 0,d=e,f=t.apply(r,n)}function _(t){return d=t,h=setTimeout(x,e),y?m(t):f}function b(t){var n=t-p;return void 0===p||n>=e||n<0||v&&t-d>=c}function x(){var t=i();if(b(t))return O(t);h=setTimeout(x,function(t){var n=e-(t-p);return v?u(n,c-(t-d)):n}(t))}function O(t){return h=void 0,g&&s?m(t):(s=l=void 0,f)}function w(){var t=i(),n=b(t);if(s=arguments,l=this,p=t,n){if(void 0===h)return _(p);if(v)return clearTimeout(h),h=setTimeout(x,e),m(p)}return void 0===h&&(h=setTimeout(x,e)),f}return e=o(e)||0,r(n)&&(y=!!n.leading,c=(v="maxWait"in n)?a(o(n.maxWait)||0,e):c,g="trailing"in n?!!n.trailing:g),w.cancel=function(){void 0!==h&&clearTimeout(h),d=0,s=p=l=h=void 0},w.flush=function(){return void 0===h?f:O(i())},w}},function(t,e,n){var r=n(24),i=n(21);t.exports=function(t){return"number"==typeof t||i(t)&&"[object Number]"==r(t)}},,,function(t,e,n){var r=n(36),i=n(128),o=n(129),a=n(130),u=n(131),s=n(132);function l(t){var e=this.__data__=new r(t);this.size=e.size}l.prototype.clear=i,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=u,l.prototype.set=s,t.exports=l},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){var r=n(24),i=n(25);t.exports=function(t){if(!i(t))return!1;var e=r(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(t,e,n){(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.exports=n}).call(this,n(34))},function(t,e){var n=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return n.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e,n){var r=n(81),i=n(153),o=n(82);t.exports=function(t,e,n,a,u,s){var l=1&n,c=t.length,f=e.length;if(c!=f&&!(l&&f>c))return!1;var h=s.get(t),p=s.get(e);if(h&&p)return h==e&&p==t;var d=-1,y=!0,v=2&n?new r:void 0;for(s.set(t,e),s.set(e,t);++d<c;){var g=t[d],m=e[d];if(a)var _=l?a(m,g,d,e,t,s):a(g,m,d,t,e,s);if(void 0!==_){if(_)continue;y=!1;break}if(v){if(!i(e,(function(t,e){if(!o(v,e)&&(g===t||u(g,t,n,a,s)))return v.push(e)}))){y=!1;break}}else if(g!==m&&!u(g,m,n,a,s)){y=!1;break}}return s.delete(t),s.delete(e),y}},function(t,e,n){var r=n(59),i=n(151),o=n(152);function a(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new r;++e<n;)this.add(t[e])}a.prototype.add=a.prototype.push=i,a.prototype.has=o,t.exports=a},function(t,e){t.exports=function(t,e){return t.has(e)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}},function(t,e,n){var r=n(166),i=n(21),o=Object.prototype,a=o.hasOwnProperty,u=o.propertyIsEnumerable,s=r(function(){return arguments}())?r:function(t){return i(t)&&a.call(t,"callee")&&!u.call(t,"callee")};t.exports=s},function(t,e,n){(function(t){var r=n(12),i=n(167),o=e&&!e.nodeType&&e,a=o&&"object"==typeof t&&t&&!t.nodeType&&t,u=a&&a.exports===o?r.Buffer:void 0,s=(u?u.isBuffer:void 0)||i;t.exports=s}).call(this,n(54)(t))},function(t,e){var n=/^(?:0|[1-9]\d*)$/;t.exports=function(t,e){var r=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&n.test(t))&&t>-1&&t%1==0&&t<e}},function(t,e,n){var r=n(168),i=n(88),o=n(169),a=o&&o.isTypedArray,u=a?i(a):r;t.exports=u},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e,n){var r=n(25);t.exports=function(t){return t==t&&!r(t)}},function(t,e){t.exports=function(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in Object(n)))}}},function(t,e,n){var r=n(92),i=n(42);t.exports=function(t,e){for(var n=0,o=(e=r(e,t)).length;null!=t&&n<o;)t=t[i(e[n++])];return n&&n==o?t:void 0}},function(t,e,n){var r=n(14),i=n(65),o=n(210),a=n(213);t.exports=function(t,e){return r(t)?t:i(t,e)?[t]:o(a(t))}},function(t,e,n){"use strict";e.__esModule=!0,e.default=e.EXITING=e.ENTERED=e.ENTERING=e.EXITED=e.UNMOUNTED=void 0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}(n(1)),i=u(n(0)),o=u(n(52)),a=n(94);n(95);function u(t){return t&&t.__esModule?t:{default:t}}e.UNMOUNTED="unmounted";e.EXITED="exited";e.ENTERING="entering";e.ENTERED="entered";e.EXITING="exiting";var s=function(t){var e,n;function r(e,n){var r;r=t.call(this,e,n)||this;var i,o=n.transitionGroup,a=o&&!o.isMounting?e.enter:e.appear;return r.appearStatus=null,e.in?a?(i="exited",r.appearStatus="entering"):i="entered":i=e.unmountOnExit||e.mountOnEnter?"unmounted":"exited",r.state={status:i},r.nextCallback=null,r}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var a=r.prototype;return a.getChildContext=function(){return{transitionGroup:null}},r.getDerivedStateFromProps=function(t,e){return t.in&&"unmounted"===e.status?{status:"exited"}:null},a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(t){var e=null;if(t!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(e="entering"):"entering"!==n&&"entered"!==n||(e="exiting")}this.updateStatus(!1,e)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var t,e,n,r=this.props.timeout;return t=e=n=r,null!=r&&"number"!=typeof r&&(t=r.exit,e=r.enter,n=void 0!==r.appear?r.appear:e),{exit:t,enter:e,appear:n}},a.updateStatus=function(t,e){if(void 0===t&&(t=!1),null!==e){this.cancelNextCallback();var n=o.default.findDOMNode(this);"entering"===e?this.performEnter(n,t):this.performExit(n)}else this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},a.performEnter=function(t,e){var n=this,r=this.props.enter,i=this.context.transitionGroup?this.context.transitionGroup.isMounting:e,o=this.getTimeouts(),a=i?o.appear:o.enter;e||r?(this.props.onEnter(t,i),this.safeSetState({status:"entering"},(function(){n.props.onEntering(t,i),n.onTransitionEnd(t,a,(function(){n.safeSetState({status:"entered"},(function(){n.props.onEntered(t,i)}))}))}))):this.safeSetState({status:"entered"},(function(){n.props.onEntered(t)}))},a.performExit=function(t){var e=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(t),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(t),e.onTransitionEnd(t,r.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(t)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(t)}))},a.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(t,e){e=this.setNextCallback(e),this.setState(t,e)},a.setNextCallback=function(t){var e=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,e.nextCallback=null,t(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},a.onTransitionEnd=function(t,e,n){this.setNextCallback(n);var r=null==e&&!this.props.addEndListener;t&&!r?(this.props.addEndListener&&this.props.addEndListener(t,this.nextCallback),null!=e&&setTimeout(this.nextCallback,e)):setTimeout(this.nextCallback,0)},a.render=function(){var t=this.state.status;if("unmounted"===t)return null;var e=this.props,n=e.children,r=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(e,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(t,r);var o=i.default.Children.only(n);return i.default.cloneElement(o,r)},r}(i.default.Component);function l(){}s.contextTypes={transitionGroup:r.object},s.childContextTypes={transitionGroup:function(){}},s.propTypes={},s.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:l,onEntering:l,onEntered:l,onExit:l,onExiting:l,onExited:l},s.UNMOUNTED=0,s.EXITED=1,s.ENTERING=2,s.ENTERED=3,s.EXITING=4;var c=(0,a.polyfill)(s);e.default=c},function(t,e,n){"use strict";function r(){var t=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=t&&this.setState(t)}function i(t){this.setState(function(e){var n=this.constructor.getDerivedStateFromProps(t,e);return null!=n?n:null}.bind(this))}function o(t,e){try{var n=this.props,r=this.state;this.props=t,this.state=e,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(t){var e=t.prototype;if(!e||!e.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof t.getDerivedStateFromProps&&"function"!=typeof e.getSnapshotBeforeUpdate)return t;var n=null,a=null,u=null;if("function"==typeof e.componentWillMount?n="componentWillMount":"function"==typeof e.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof e.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof e.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof e.componentWillUpdate?u="componentWillUpdate":"function"==typeof e.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==u){var s=t.displayName||t.name,l="function"==typeof t.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+s+" uses "+l+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==u?"\n  "+u:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof t.getDerivedStateFromProps&&(e.componentWillMount=r,e.componentWillReceiveProps=i),"function"==typeof e.getSnapshotBeforeUpdate){if("function"!=typeof e.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");e.componentWillUpdate=o;var c=e.componentDidUpdate;e.componentDidUpdate=function(t,e,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,t,e,r)}}return t}n.r(e),n.d(e,"polyfill",(function(){return a})),r.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0},function(t,e,n){"use strict";e.__esModule=!0,e.classNamesShape=e.timeoutsShape=void 0;var r;(r=n(1))&&r.__esModule;e.timeoutsShape=null;e.classNamesShape=null},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=u(n(1)),i=u(n(0)),o=n(94),a=n(227);function u(t){return t&&t.__esModule?t:{default:t}}function s(){return(s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function l(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var c=Object.values||function(t){return Object.keys(t).map((function(e){return t[e]}))},f=function(t){var e,n;function r(e,n){var r,i=(r=t.call(this,e,n)||this).handleExited.bind(l(l(r)));return r.state={handleExited:i,firstRender:!0},r}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var o=r.prototype;return o.getChildContext=function(){return{transitionGroup:{isMounting:!this.appeared}}},o.componentDidMount=function(){this.appeared=!0,this.mounted=!0},o.componentWillUnmount=function(){this.mounted=!1},r.getDerivedStateFromProps=function(t,e){var n=e.children,r=e.handleExited;return{children:e.firstRender?(0,a.getInitialChildMapping)(t,r):(0,a.getNextChildMapping)(t,n,r),firstRender:!1}},o.handleExited=function(t,e){var n=(0,a.getChildMapping)(this.props.children);t.key in n||(t.props.onExited&&t.props.onExited(e),this.mounted&&this.setState((function(e){var n=s({},e.children);return delete n[t.key],{children:n}})))},o.render=function(){var t=this.props,e=t.component,n=t.childFactory,r=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,["component","childFactory"]),o=c(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===e?o:i.default.createElement(e,r,o)},r}(i.default.Component);f.childContextTypes={transitionGroup:r.default.object.isRequired},f.propTypes={},f.defaultProps={component:"div",childFactory:function(t){return t}};var h=(0,o.polyfill)(f);e.default=h,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.flip=l;var r,i=n(239),o=(r=i)&&r.__esModule?r:{default:r};function a(t,e){return"MathExpression"===t.type?function(t,e){switch((t=function(t,e){var n=(0,o.default)(t.left,t.right,e),r=a(n.left,e),i=a(n.right,e);"MathExpression"===r.type&&"MathExpression"===i.type&&("/"===r.operator&&"*"===i.operator||"-"===r.operator&&"+"===i.operator||"*"===r.operator&&"/"===i.operator||"+"===r.operator&&"-"===i.operator)&&(u(r.right,i.right)?n=(0,o.default)(r.left,i.left,e):u(r.right,i.left)&&(n=(0,o.default)(r.left,i.right,e)),r=a(n.left,e),i=a(n.right,e));return t.left=r,t.right=i,t}(t,e)).operator){case"+":case"-":return function(t,e){var n=t,r=n.left,i=n.right,o=n.operator;if("CssVariable"===r.type||"CssVariable"===i.type)return t;if(0===i.value)return r;if(0===r.value&&"+"===o)return i;if(0===r.value&&"-"===o)return function t(e){s(e.type)?e.value=-e.value:"MathExpression"==e.type&&(e.left=t(e.left),e.right=t(e.right));return e}(i);r.type===i.type&&s(r.type)&&((t=Object.assign({},r)).value="+"===o?r.value+i.value:r.value-i.value);if(s(r.type)&&("+"===i.operator||"-"===i.operator)&&"MathExpression"===i.type){if(r.type===i.left.type)return(t=Object.assign({},t)).left=a({type:"MathExpression",operator:o,left:r,right:i.left},e),t.right=i.right,t.operator="-"===o?l(i.operator):i.operator,a(t,e);if(r.type===i.right.type)return(t=Object.assign({},t)).left=a({type:"MathExpression",operator:"-"===o?l(i.operator):i.operator,left:r,right:i.right},e),t.right=i.left,a(t,e)}if("MathExpression"===r.type&&("+"===r.operator||"-"===r.operator)&&s(i.type)){if(i.type===r.left.type)return(t=Object.assign({},r)).left=a({type:"MathExpression",operator:o,left:r.left,right:i},e),a(t,e);if(i.type===r.right.type)return t=Object.assign({},r),"-"===r.operator?(t.right=a({type:"MathExpression",operator:"-"===o?"+":"-",left:i,right:r.right},e),t.operator="-"===o?"-":"+"):t.right=a({type:"MathExpression",operator:o,left:r.right,right:i},e),t.right.value<0&&(t.right.value*=-1,t.operator="-"===t.operator?"+":"-"),a(t,e)}return t}(t,e);case"/":return function(t,e){if(!s(t.right.type))return t;if("Value"!==t.right.type)throw new Error('Cannot divide by "'+t.right.unit+'", number expected');if(0===t.right.value)throw new Error("Cannot divide by zero");if("MathExpression"===t.left.type)return s(t.left.left.type)&&s(t.left.right.type)?(t.left.left.value/=t.right.value,t.left.right.value/=t.right.value,a(t.left,e)):t;if(s(t.left.type))return t.left.value/=t.right.value,t.left;return t}(t,e);case"*":return function(t){if("MathExpression"===t.left.type&&"Value"===t.right.type){if(s(t.left.left.type)&&s(t.left.right.type))return t.left.left.value*=t.right.value,t.left.right.value*=t.right.value,t.left}else{if(s(t.left.type)&&"Value"===t.right.type)return t.left.value*=t.right.value,t.left;if("Value"===t.left.type&&"MathExpression"===t.right.type){if(s(t.right.left.type)&&s(t.right.right.type))return t.right.left.value*=t.left.value,t.right.right.value*=t.left.value,t.right}else if("Value"===t.left.type&&s(t.right.type))return t.right.value*=t.left.value,t.right}return t}(t)}return t}(t,e):"Calc"===t.type?a(t.value,e):t}function u(t,e){return t.type===e.type&&t.value===e.value}function s(t){switch(t){case"LengthValue":case"AngleValue":case"TimeValue":case"FrequencyValue":case"ResolutionValue":case"EmValue":case"ExValue":case"ChValue":case"RemValue":case"VhValue":case"VwValue":case"VminValue":case"VmaxValue":case"PercentageValue":case"Value":return!0}return!1}function l(t){return"+"===t?"-":"+"}e.default=a},function(t,e,n){var r;/*! decimal.js-light v2.5.1 https://github.com/MikeMcl/decimal.js-light/LICENCE */!function(i){"use strict";var o,a={precision:20,rounding:4,toExpNeg:-7,toExpPos:21,LN10:"2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286"},u=!0,s="[DecimalError] ",l=s+"Invalid argument: ",c=s+"Exponent out of range: ",f=Math.floor,h=Math.pow,p=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,d=1e7,y=f(1286742750677284.5),v={};function g(t,e){var n,r,i,o,a,s,l,c,f=t.constructor,h=f.precision;if(!t.s||!e.s)return e.s||(e=new f(t)),u?P(e,h):e;if(l=t.d,c=e.d,a=t.e,i=e.e,l=l.slice(),o=a-i){for(o<0?(r=l,o=-o,s=c.length):(r=c,i=a,s=l.length),o>(s=(a=Math.ceil(h/7))>s?a+1:s+1)&&(o=s,r.length=1),r.reverse();o--;)r.push(0);r.reverse()}for((s=l.length)-(o=c.length)<0&&(o=s,r=c,c=l,l=r),n=0;o;)n=(l[--o]=l[o]+c[o]+n)/d|0,l[o]%=d;for(n&&(l.unshift(n),++i),s=l.length;0==l[--s];)l.pop();return e.d=l,e.e=i,u?P(e,h):e}function m(t,e,n){if(t!==~~t||t<e||t>n)throw Error(l+t)}function _(t){var e,n,r,i=t.length-1,o="",a=t[0];if(i>0){for(o+=a,e=1;e<i;e++)(n=7-(r=t[e]+"").length)&&(o+=A(n)),o+=r;(n=7-(r=(a=t[e])+"").length)&&(o+=A(n))}else if(0===a)return"0";for(;a%10==0;)a/=10;return o+a}v.absoluteValue=v.abs=function(){var t=new this.constructor(this);return t.s&&(t.s=1),t},v.comparedTo=v.cmp=function(t){var e,n,r,i,o=this;if(t=new o.constructor(t),o.s!==t.s)return o.s||-t.s;if(o.e!==t.e)return o.e>t.e^o.s<0?1:-1;for(e=0,n=(r=o.d.length)<(i=t.d.length)?r:i;e<n;++e)if(o.d[e]!==t.d[e])return o.d[e]>t.d[e]^o.s<0?1:-1;return r===i?0:r>i^o.s<0?1:-1},v.decimalPlaces=v.dp=function(){var t=this,e=t.d.length-1,n=7*(e-t.e);if(e=t.d[e])for(;e%10==0;e/=10)n--;return n<0?0:n},v.dividedBy=v.div=function(t){return b(this,new this.constructor(t))},v.dividedToIntegerBy=v.idiv=function(t){var e=this.constructor;return P(b(this,new e(t),0,1),e.precision)},v.equals=v.eq=function(t){return!this.cmp(t)},v.exponent=function(){return O(this)},v.greaterThan=v.gt=function(t){return this.cmp(t)>0},v.greaterThanOrEqualTo=v.gte=function(t){return this.cmp(t)>=0},v.isInteger=v.isint=function(){return this.e>this.d.length-2},v.isNegative=v.isneg=function(){return this.s<0},v.isPositive=v.ispos=function(){return this.s>0},v.isZero=function(){return 0===this.s},v.lessThan=v.lt=function(t){return this.cmp(t)<0},v.lessThanOrEqualTo=v.lte=function(t){return this.cmp(t)<1},v.logarithm=v.log=function(t){var e,n=this,r=n.constructor,i=r.precision,a=i+5;if(void 0===t)t=new r(10);else if((t=new r(t)).s<1||t.eq(o))throw Error(s+"NaN");if(n.s<1)throw Error(s+(n.s?"NaN":"-Infinity"));return n.eq(o)?new r(0):(u=!1,e=b(E(n,a),E(t,a),a),u=!0,P(e,i))},v.minus=v.sub=function(t){var e=this;return t=new e.constructor(t),e.s==t.s?S(e,t):g(e,(t.s=-t.s,t))},v.modulo=v.mod=function(t){var e,n=this,r=n.constructor,i=r.precision;if(!(t=new r(t)).s)throw Error(s+"NaN");return n.s?(u=!1,e=b(n,t,0,1).times(t),u=!0,n.minus(e)):P(new r(n),i)},v.naturalExponential=v.exp=function(){return x(this)},v.naturalLogarithm=v.ln=function(){return E(this)},v.negated=v.neg=function(){var t=new this.constructor(this);return t.s=-t.s||0,t},v.plus=v.add=function(t){var e=this;return t=new e.constructor(t),e.s==t.s?g(e,t):S(e,(t.s=-t.s,t))},v.precision=v.sd=function(t){var e,n,r,i=this;if(void 0!==t&&t!==!!t&&1!==t&&0!==t)throw Error(l+t);if(e=O(i)+1,n=7*(r=i.d.length-1)+1,r=i.d[r]){for(;r%10==0;r/=10)n--;for(r=i.d[0];r>=10;r/=10)n++}return t&&e>n?e:n},v.squareRoot=v.sqrt=function(){var t,e,n,r,i,o,a,l=this,c=l.constructor;if(l.s<1){if(!l.s)return new c(0);throw Error(s+"NaN")}for(t=O(l),u=!1,0==(i=Math.sqrt(+l))||i==1/0?(((e=_(l.d)).length+t)%2==0&&(e+="0"),i=Math.sqrt(e),t=f((t+1)/2)-(t<0||t%2),r=new c(e=i==1/0?"5e"+t:(e=i.toExponential()).slice(0,e.indexOf("e")+1)+t)):r=new c(i.toString()),i=a=(n=c.precision)+3;;)if(r=(o=r).plus(b(l,o,a+2)).times(.5),_(o.d).slice(0,a)===(e=_(r.d)).slice(0,a)){if(e=e.slice(a-3,a+1),i==a&&"4999"==e){if(P(o,n+1,0),o.times(o).eq(l)){r=o;break}}else if("9999"!=e)break;a+=4}return u=!0,P(r,n)},v.times=v.mul=function(t){var e,n,r,i,o,a,s,l,c,f=this,h=f.constructor,p=f.d,y=(t=new h(t)).d;if(!f.s||!t.s)return new h(0);for(t.s*=f.s,n=f.e+t.e,(l=p.length)<(c=y.length)&&(o=p,p=y,y=o,a=l,l=c,c=a),o=[],r=a=l+c;r--;)o.push(0);for(r=c;--r>=0;){for(e=0,i=l+r;i>r;)s=o[i]+y[r]*p[i-r-1]+e,o[i--]=s%d|0,e=s/d|0;o[i]=(o[i]+e)%d|0}for(;!o[--a];)o.pop();return e?++n:o.shift(),t.d=o,t.e=n,u?P(t,h.precision):t},v.toDecimalPlaces=v.todp=function(t,e){var n=this,r=n.constructor;return n=new r(n),void 0===t?n:(m(t,0,1e9),void 0===e?e=r.rounding:m(e,0,8),P(n,t+O(n)+1,e))},v.toExponential=function(t,e){var n,r=this,i=r.constructor;return void 0===t?n=k(r,!0):(m(t,0,1e9),void 0===e?e=i.rounding:m(e,0,8),n=k(r=P(new i(r),t+1,e),!0,t+1)),n},v.toFixed=function(t,e){var n,r,i=this,o=i.constructor;return void 0===t?k(i):(m(t,0,1e9),void 0===e?e=o.rounding:m(e,0,8),n=k((r=P(new o(i),t+O(i)+1,e)).abs(),!1,t+O(r)+1),i.isneg()&&!i.isZero()?"-"+n:n)},v.toInteger=v.toint=function(){var t=this,e=t.constructor;return P(new e(t),O(t)+1,e.rounding)},v.toNumber=function(){return+this},v.toPower=v.pow=function(t){var e,n,r,i,a,l,c=this,h=c.constructor,p=+(t=new h(t));if(!t.s)return new h(o);if(!(c=new h(c)).s){if(t.s<1)throw Error(s+"Infinity");return c}if(c.eq(o))return c;if(r=h.precision,t.eq(o))return P(c,r);if(l=(e=t.e)>=(n=t.d.length-1),a=c.s,l){if((n=p<0?-p:p)<=9007199254740991){for(i=new h(o),e=Math.ceil(r/7+4),u=!1;n%2&&C((i=i.times(c)).d,e),0!==(n=f(n/2));)C((c=c.times(c)).d,e);return u=!0,t.s<0?new h(o).div(i):P(i,r)}}else if(a<0)throw Error(s+"NaN");return a=a<0&&1&t.d[Math.max(e,n)]?-1:1,c.s=1,u=!1,i=t.times(E(c,r+12)),u=!0,(i=x(i)).s=a,i},v.toPrecision=function(t,e){var n,r,i=this,o=i.constructor;return void 0===t?r=k(i,(n=O(i))<=o.toExpNeg||n>=o.toExpPos):(m(t,1,1e9),void 0===e?e=o.rounding:m(e,0,8),r=k(i=P(new o(i),t,e),t<=(n=O(i))||n<=o.toExpNeg,t)),r},v.toSignificantDigits=v.tosd=function(t,e){var n=this.constructor;return void 0===t?(t=n.precision,e=n.rounding):(m(t,1,1e9),void 0===e?e=n.rounding:m(e,0,8)),P(new n(this),t,e)},v.toString=v.valueOf=v.val=v.toJSON=function(){var t=this,e=O(t),n=t.constructor;return k(t,e<=n.toExpNeg||e>=n.toExpPos)};var b=function(){function t(t,e){var n,r=0,i=t.length;for(t=t.slice();i--;)n=t[i]*e+r,t[i]=n%d|0,r=n/d|0;return r&&t.unshift(r),t}function e(t,e,n,r){var i,o;if(n!=r)o=n>r?1:-1;else for(i=o=0;i<n;i++)if(t[i]!=e[i]){o=t[i]>e[i]?1:-1;break}return o}function n(t,e,n){for(var r=0;n--;)t[n]-=r,r=t[n]<e[n]?1:0,t[n]=r*d+t[n]-e[n];for(;!t[0]&&t.length>1;)t.shift()}return function(r,i,o,a){var u,l,c,f,h,p,y,v,g,m,_,b,x,w,A,E,M,S,k=r.constructor,C=r.s==i.s?1:-1,j=r.d,T=i.d;if(!r.s)return new k(r);if(!i.s)throw Error(s+"Division by zero");for(l=r.e-i.e,M=T.length,A=j.length,v=(y=new k(C)).d=[],c=0;T[c]==(j[c]||0);)++c;if(T[c]>(j[c]||0)&&--l,(b=null==o?o=k.precision:a?o+(O(r)-O(i))+1:o)<0)return new k(0);if(b=b/7+2|0,c=0,1==M)for(f=0,T=T[0],b++;(c<A||f)&&b--;c++)x=f*d+(j[c]||0),v[c]=x/T|0,f=x%T|0;else{for((f=d/(T[0]+1)|0)>1&&(T=t(T,f),j=t(j,f),M=T.length,A=j.length),w=M,m=(g=j.slice(0,M)).length;m<M;)g[m++]=0;(S=T.slice()).unshift(0),E=T[0],T[1]>=d/2&&++E;do{f=0,(u=e(T,g,M,m))<0?(_=g[0],M!=m&&(_=_*d+(g[1]||0)),(f=_/E|0)>1?(f>=d&&(f=d-1),1==(u=e(h=t(T,f),g,p=h.length,m=g.length))&&(f--,n(h,M<p?S:T,p))):(0==f&&(u=f=1),h=T.slice()),(p=h.length)<m&&h.unshift(0),n(g,h,m),-1==u&&(u=e(T,g,M,m=g.length))<1&&(f++,n(g,M<m?S:T,m)),m=g.length):0===u&&(f++,g=[0]),v[c++]=f,u&&g[0]?g[m++]=j[w]||0:(g=[j[w]],m=1)}while((w++<A||void 0!==g[0])&&b--)}return v[0]||v.shift(),y.e=l,P(y,a?o+O(y)+1:o)}}();function x(t,e){var n,r,i,a,s,l=0,f=0,p=t.constructor,d=p.precision;if(O(t)>16)throw Error(c+O(t));if(!t.s)return new p(o);for(null==e?(u=!1,s=d):s=e,a=new p(.03125);t.abs().gte(.1);)t=t.times(a),f+=5;for(s+=Math.log(h(2,f))/Math.LN10*2+5|0,n=r=i=new p(o),p.precision=s;;){if(r=P(r.times(t),s),n=n.times(++l),_((a=i.plus(b(r,n,s))).d).slice(0,s)===_(i.d).slice(0,s)){for(;f--;)i=P(i.times(i),s);return p.precision=d,null==e?(u=!0,P(i,d)):i}i=a}}function O(t){for(var e=7*t.e,n=t.d[0];n>=10;n/=10)e++;return e}function w(t,e,n){if(e>t.LN10.sd())throw u=!0,n&&(t.precision=n),Error(s+"LN10 precision limit exceeded");return P(new t(t.LN10),e)}function A(t){for(var e="";t--;)e+="0";return e}function E(t,e){var n,r,i,a,l,c,f,h,p,d=1,y=t,v=y.d,g=y.constructor,m=g.precision;if(y.s<1)throw Error(s+(y.s?"NaN":"-Infinity"));if(y.eq(o))return new g(0);if(null==e?(u=!1,h=m):h=e,y.eq(10))return null==e&&(u=!0),w(g,h);if(h+=10,g.precision=h,r=(n=_(v)).charAt(0),a=O(y),!(Math.abs(a)<15e14))return f=w(g,h+2,m).times(a+""),y=E(new g(r+"."+n.slice(1)),h-10).plus(f),g.precision=m,null==e?(u=!0,P(y,m)):y;for(;r<7&&1!=r||1==r&&n.charAt(1)>3;)r=(n=_((y=y.times(t)).d)).charAt(0),d++;for(a=O(y),r>1?(y=new g("0."+n),a++):y=new g(r+"."+n.slice(1)),c=l=y=b(y.minus(o),y.plus(o),h),p=P(y.times(y),h),i=3;;){if(l=P(l.times(p),h),_((f=c.plus(b(l,new g(i),h))).d).slice(0,h)===_(c.d).slice(0,h))return c=c.times(2),0!==a&&(c=c.plus(w(g,h+2,m).times(a+""))),c=b(c,new g(d),h),g.precision=m,null==e?(u=!0,P(c,m)):c;c=f,i+=2}}function M(t,e){var n,r,i;for((n=e.indexOf("."))>-1&&(e=e.replace(".","")),(r=e.search(/e/i))>0?(n<0&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):n<0&&(n=e.length),r=0;48===e.charCodeAt(r);)++r;for(i=e.length;48===e.charCodeAt(i-1);)--i;if(e=e.slice(r,i)){if(i-=r,n=n-r-1,t.e=f(n/7),t.d=[],r=(n+1)%7,n<0&&(r+=7),r<i){for(r&&t.d.push(+e.slice(0,r)),i-=7;r<i;)t.d.push(+e.slice(r,r+=7));r=7-(e=e.slice(r)).length}else r-=i;for(;r--;)e+="0";if(t.d.push(+e),u&&(t.e>y||t.e<-y))throw Error(c+n)}else t.s=0,t.e=0,t.d=[0];return t}function P(t,e,n){var r,i,o,a,s,l,p,v,g=t.d;for(a=1,o=g[0];o>=10;o/=10)a++;if((r=e-a)<0)r+=7,i=e,p=g[v=0];else{if((v=Math.ceil((r+1)/7))>=(o=g.length))return t;for(p=o=g[v],a=1;o>=10;o/=10)a++;i=(r%=7)-7+a}if(void 0!==n&&(s=p/(o=h(10,a-i-1))%10|0,l=e<0||void 0!==g[v+1]||p%o,l=n<4?(s||l)&&(0==n||n==(t.s<0?3:2)):s>5||5==s&&(4==n||l||6==n&&(r>0?i>0?p/h(10,a-i):0:g[v-1])%10&1||n==(t.s<0?8:7))),e<1||!g[0])return l?(o=O(t),g.length=1,e=e-o-1,g[0]=h(10,(7-e%7)%7),t.e=f(-e/7)||0):(g.length=1,g[0]=t.e=t.s=0),t;if(0==r?(g.length=v,o=1,v--):(g.length=v+1,o=h(10,7-r),g[v]=i>0?(p/h(10,a-i)%h(10,i)|0)*o:0),l)for(;;){if(0==v){(g[0]+=o)==d&&(g[0]=1,++t.e);break}if(g[v]+=o,g[v]!=d)break;g[v--]=0,o=1}for(r=g.length;0===g[--r];)g.pop();if(u&&(t.e>y||t.e<-y))throw Error(c+O(t));return t}function S(t,e){var n,r,i,o,a,s,l,c,f,h,p=t.constructor,y=p.precision;if(!t.s||!e.s)return e.s?e.s=-e.s:e=new p(t),u?P(e,y):e;if(l=t.d,h=e.d,r=e.e,c=t.e,l=l.slice(),a=c-r){for((f=a<0)?(n=l,a=-a,s=h.length):(n=h,r=c,s=l.length),a>(i=Math.max(Math.ceil(y/7),s)+2)&&(a=i,n.length=1),n.reverse(),i=a;i--;)n.push(0);n.reverse()}else{for((f=(i=l.length)<(s=h.length))&&(s=i),i=0;i<s;i++)if(l[i]!=h[i]){f=l[i]<h[i];break}a=0}for(f&&(n=l,l=h,h=n,e.s=-e.s),s=l.length,i=h.length-s;i>0;--i)l[s++]=0;for(i=h.length;i>a;){if(l[--i]<h[i]){for(o=i;o&&0===l[--o];)l[o]=d-1;--l[o],l[i]+=d}l[i]-=h[i]}for(;0===l[--s];)l.pop();for(;0===l[0];l.shift())--r;return l[0]?(e.d=l,e.e=r,u?P(e,y):e):new p(0)}function k(t,e,n){var r,i=O(t),o=_(t.d),a=o.length;return e?(n&&(r=n-a)>0?o=o.charAt(0)+"."+o.slice(1)+A(r):a>1&&(o=o.charAt(0)+"."+o.slice(1)),o=o+(i<0?"e":"e+")+i):i<0?(o="0."+A(-i-1)+o,n&&(r=n-a)>0&&(o+=A(r))):i>=a?(o+=A(i+1-a),n&&(r=n-i-1)>0&&(o=o+"."+A(r))):((r=i+1)<a&&(o=o.slice(0,r)+"."+o.slice(r)),n&&(r=n-a)>0&&(i+1===a&&(o+="."),o+=A(r))),t.s<0?"-"+o:o}function C(t,e){if(t.length>e)return t.length=e,!0}function j(t){if(!t||"object"!=typeof t)throw Error(s+"Object expected");var e,n,r,i=["precision",1,1e9,"rounding",0,8,"toExpNeg",-1/0,0,"toExpPos",0,1/0];for(e=0;e<i.length;e+=3)if(void 0!==(r=t[n=i[e]])){if(!(f(r)===r&&r>=i[e+1]&&r<=i[e+2]))throw Error(l+n+": "+r);this[n]=r}if(void 0!==(r=t[n="LN10"])){if(r!=Math.LN10)throw Error(l+n+": "+r);this[n]=new this(r)}return this}(a=function t(e){var n,r,i;function o(t){var e=this;if(!(e instanceof o))return new o(t);if(e.constructor=o,t instanceof o)return e.s=t.s,e.e=t.e,void(e.d=(t=t.d)?t.slice():t);if("number"==typeof t){if(0*t!=0)throw Error(l+t);if(t>0)e.s=1;else{if(!(t<0))return e.s=0,e.e=0,void(e.d=[0]);t=-t,e.s=-1}return t===~~t&&t<1e7?(e.e=0,void(e.d=[t])):M(e,t.toString())}if("string"!=typeof t)throw Error(l+t);if(45===t.charCodeAt(0)?(t=t.slice(1),e.s=-1):e.s=1,!p.test(t))throw Error(l+t);M(e,t)}if(o.prototype=v,o.ROUND_UP=0,o.ROUND_DOWN=1,o.ROUND_CEIL=2,o.ROUND_FLOOR=3,o.ROUND_HALF_UP=4,o.ROUND_HALF_DOWN=5,o.ROUND_HALF_EVEN=6,o.ROUND_HALF_CEIL=7,o.ROUND_HALF_FLOOR=8,o.clone=t,o.config=o.set=j,void 0===e&&(e={}),e)for(i=["precision","rounding","toExpNeg","toExpPos","LN10"],n=0;n<i.length;)e.hasOwnProperty(r=i[n++])||(e[r]=this[r]);return o.config(e),o}(a)).default=a.Decimal=a,o=new a(1),void 0===(r=function(){return a}.call(e,n,e,t))||(t.exports=r)}()},function(t,e,n){"use strict";function r(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}Object.defineProperty(e,"__esModule",{value:!0}),e.memoize=e.reverse=e.compose=e.map=e.range=e.curry=e.PLACE_HOLDER=void 0;var i=function(t){return t},o={"@@functional/placeholder":!0};e.PLACE_HOLDER=o;var a=function(t){return t===o},u=function(t){return function e(){return 0===arguments.length||1===arguments.length&&a(arguments.length<=0?void 0:arguments[0])?e:t.apply(void 0,arguments)}},s=function(t){return function t(e,n){return 1===e?n:u((function(){for(var i=arguments.length,s=new Array(i),l=0;l<i;l++)s[l]=arguments[l];var c=s.filter((function(t){return t!==o})).length;return c>=e?n.apply(void 0,s):t(e-c,u((function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var o=s.map((function(t){return a(t)?e.shift():t}));return n.apply(void 0,r(o).concat(e))})))}))}(t.length,t)};e.curry=s;e.range=function(t,e){for(var n=[],r=t;r<e;++r)n[r-t]=r;return n};var l=s((function(t,e){return Array.isArray(e)?e.map(t):Object.keys(e).map((function(t){return e[t]})).map(t)}));e.map=l;e.compose=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];if(!e.length)return i;var r=e.reverse(),o=r[0],a=r.slice(1);return function(){return a.reduce((function(t,e){return e(t)}),o.apply(void 0,arguments))}};e.reverse=function(t){return Array.isArray(t)?t.reverse():t.split("").reverse.join("")};e.memoize=function(t){var e=null,n=null;return function(){for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return e&&i.every((function(t,n){return t===e[n]}))?n:(e=i,n=t.apply(void 0,i))}}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Cross=void 0;var c=s(n(0)),f=l(n(4)),h=n(5),p=n(2),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.getPath=function(t,e,n,r,i,o){return"M"+t+","+i+"v"+r+"M"+o+","+e+"h"+n},e.prototype.render=function(){var t=this.props,n=t.x,r=t.y,i=t.width,a=t.height,u=t.top,s=t.left,l=t.className;return h.isNumber(n)&&h.isNumber(r)&&h.isNumber(i)&&h.isNumber(a)&&h.isNumber(u)&&h.isNumber(s)?c.default.createElement("path",o({},p.filterProps(this.props,!0),{className:f.default("recharts-cross",l),d:e.getPath(n,r,i,a,u,s)})):null},e.defaultProps={x:0,y:0,top:0,left:0,width:0,height:0},e}(c.PureComponent);e.Cross=d},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Pie=void 0;var c=s(n(0)),f=l(n(10)),h=l(n(4)),p=l(n(3)),d=n(6),y=n(45),v=n(28),g=n(22),m=n(17),_=n(15),b=n(27),x=n(9),O=n(8),w=n(11),A=n(5),E=n(7),M=n(26),P=n(2),S=function(t){function e(e){var n=t.call(this,e)||this;return n.id=A.uniqueId("recharts-pie-"),n.handleAnimationEnd=function(){var t=n.props.onAnimationEnd;n.setState({isAnimationFinished:!0}),p.default.isFunction(t)&&t()},n.handleAnimationStart=function(){var t=n.props.onAnimationStart;n.setState({isAnimationFinished:!1}),p.default.isFunction(t)&&t()},n.state={isAnimationFinished:!e.isAnimationActive,prevIsAnimationActive:e.isAnimationActive,prevAnimationId:e.animationId},n}return i(e,t),e.getDerivedStateFromProps=function(t,e){return e.prevIsAnimationActive!==t.isAnimationActive?{prevIsAnimationActive:t.isAnimationActive,prevAnimationId:t.animationId,curSectors:t.sectors,prevSectors:[]}:t.isAnimationActive&&t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curSectors:t.sectors,prevSectors:e.curSectors}:t.sectors!==e.curSectors?{curSectors:t.sectors}:null},e.getTextAnchor=function(t,e){return t>e?"start":t<e?"end":"middle"},e.prototype.isActiveIndex=function(t){var e=this.props.activeIndex;return Array.isArray(e)?-1!==e.indexOf(t):t===e},e.renderLabelLineItem=function(t,e){return c.default.isValidElement(t)?c.default.cloneElement(t,e):p.default.isFunction(t)?t(e):c.default.createElement(v.Curve,o({},e,{type:"linear",className:"recharts-pie-label-line"}))},e.renderLabelItem=function(t,e,n){if(c.default.isValidElement(t))return c.default.cloneElement(t,e);var r=n;return p.default.isFunction(t)&&(r=t(e),c.default.isValidElement(r))?r:c.default.createElement(g.Text,o({},e,{alignmentBaseline:"middle",className:"recharts-pie-label-text"}),r)},e.prototype.renderLabels=function(t){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var n=this.props,r=n.label,i=n.labelLine,a=n.dataKey,u=n.valueKey,s=P.filterProps(this.props),l=P.filterProps(r),f=P.filterProps(i),h=r&&r.offsetRadius||20,y=t.map((function(t,n){var y=(t.startAngle+t.endAngle)/2,v=w.polarToCartesian(t.cx,t.cy,t.outerRadius+h,y),g=o(o(o(o(o(o({},s),t),{stroke:"none"}),l),{index:n,textAnchor:e.getTextAnchor(v.x,t.cx)}),v),m=o(o(o(o(o({},s),t),{fill:"none",stroke:t.fill}),f),{index:n,points:[w.polarToCartesian(t.cx,t.cy,t.outerRadius,y),v],key:"line"}),_=a;return p.default.isNil(a)&&p.default.isNil(u)?_="value":p.default.isNil(a)&&(_=u),c.default.createElement(d.Layer,{key:"label-"+n},i&&e.renderLabelLineItem(i,m),e.renderLabelItem(r,g,E.getValueByDataKey(t,_)))}));return c.default.createElement(d.Layer,{className:"recharts-pie-labels"},y)},e.renderSectorItem=function(t,e){return c.default.isValidElement(t)?c.default.cloneElement(t,e):p.default.isFunction(t)?t(e):p.default.isPlainObject(t)?c.default.createElement(y.Sector,o({},e,t)):c.default.createElement(y.Sector,o({},e))},e.prototype.renderSectorsStatically=function(t){var n=this,r=this.props,i=r.activeShape,a=r.blendStroke;return t.map((function(t,r){var u=n.isActiveIndex(r)?i:null,s=o(o({},t),{stroke:a?t.fill:t.stroke});return c.default.createElement(d.Layer,o({className:"recharts-pie-sector"},P.adaptEventsOfChild(n.props,t,r),{key:"sector-"+r}),e.renderSectorItem(u,s))}))},e.prototype.renderSectorsWithAnimation=function(){var t=this,e=this.props,n=e.sectors,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,s=e.animationId,l=this.state,h=l.prevSectors,y=l.prevIsAnimationActive;return c.default.createElement(f.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"pie-"+s+"-"+y,onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(e){var r=e.t,i=[],a=(n&&n[0]).startAngle;return n.forEach((function(t,e){var n=h&&h[e],u=e>0?p.default.get(t,"paddingAngle",0):0;if(n){var s=A.interpolateNumber(n.endAngle-n.startAngle,t.endAngle-t.startAngle),l=o(o({},t),{startAngle:a+u,endAngle:a+s(r)+u});i.push(l),a=l.endAngle}else{var c=t.endAngle,f=t.startAngle,d=A.interpolateNumber(0,c-f)(r);l=o(o({},t),{startAngle:a+u,endAngle:a+d+u});i.push(l),a=l.endAngle}})),c.default.createElement(d.Layer,null,t.renderSectorsStatically(i))}))},e.prototype.renderSectors=function(){var t=this.props,e=t.sectors,n=t.isAnimationActive,r=this.state.prevSectors;return!(n&&e&&e.length)||r&&p.default.isEqual(r,e)?this.renderSectorsStatically(e):this.renderSectorsWithAnimation()},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.sectors,r=t.className,i=t.label,o=t.cx,a=t.cy,u=t.innerRadius,s=t.outerRadius,l=t.isAnimationActive,f=this.state.isAnimationFinished;if(e||!n||!n.length||!A.isNumber(o)||!A.isNumber(a)||!A.isNumber(u)||!A.isNumber(s))return null;var p=h.default("recharts-pie",r);return c.default.createElement(d.Layer,{className:p},this.renderSectors(),i&&this.renderLabels(n),m.Label.renderCallByParent(this.props,null,!1),(!l||f)&&_.LabelList.renderCallByParent(this.props,n,!1))},e.displayName="Pie",e.defaultProps={stroke:"#fff",fill:"#808080",legendType:"rect",cx:"50%",cy:"50%",startAngle:0,endAngle:360,innerRadius:0,outerRadius:"80%",paddingAngle:0,labelLine:!0,hide:!1,minAngle:0,isAnimationActive:!O.Global.isSsr,animationBegin:400,animationDuration:1500,animationEasing:"ease",nameKey:"name",blendStroke:!1},e.parseDeltaAngle=function(t,e){return A.mathSign(e-t)*Math.min(Math.abs(e-t),360)},e.getRealPieData=function(t){var e=t.props,n=e.data,r=e.children,i=P.filterProps(t.props),a=x.findAllByType(r,b.Cell.displayName);return n&&n.length?n.map((function(t,e){return o(o(o({payload:t},i),t),a&&a[e]&&a[e].props)})):a&&a.length?a.map((function(t){return o(o({},i),t.props)})):[]},e.parseCoordinateOfPie=function(t,e){var n=e.top,r=e.left,i=e.width,o=e.height,a=w.getMaxRadius(i,o);return{cx:r+A.getPercentValue(t.props.cx,i,i/2),cy:n+A.getPercentValue(t.props.cy,o,o/2),innerRadius:A.getPercentValue(t.props.innerRadius,a,0),outerRadius:A.getPercentValue(t.props.outerRadius,a,.8*a),maxRadius:t.props.maxRadius||Math.sqrt(i*i+o*o)/2}},e.getComposedData=function(t){var n=t.item,r=t.offset,i=e.getRealPieData(n);if(!i||!i.length)return null;var a=n.props,u=a.cornerRadius,s=a.startAngle,l=a.endAngle,c=a.paddingAngle,f=a.dataKey,h=a.nameKey,d=a.valueKey,y=a.tooltipType,v=Math.abs(n.props.minAngle),g=e.parseCoordinateOfPie(n,r),m=e.parseDeltaAngle(s,l),_=Math.abs(m),b=f;p.default.isNil(f)&&p.default.isNil(d)?(M.warn(!1,'Use "dataKey" to specify the value of pie,\n      the props "valueKey" will be deprecated in 1.1.0'),b="value"):p.default.isNil(f)&&(M.warn(!1,'Use "dataKey" to specify the value of pie,\n      the props "valueKey" will be deprecated in 1.1.0'),b=d);var x,O,P=i.filter((function(t){return 0!==E.getValueByDataKey(t,b,0)})).length,S=_-P*v-(_>=360?P:P-1)*c,k=i.reduce((function(t,e){var n=E.getValueByDataKey(e,b,0);return t+(A.isNumber(n)?n:0)}),0);k>0&&(x=i.map((function(t,e){var n,r=E.getValueByDataKey(t,b,0),i=E.getValueByDataKey(t,h,e),a=(A.isNumber(r)?r:0)/k,l=(n=e?O.endAngle+A.mathSign(m)*c*(0!==r?1:0):s)+A.mathSign(m)*((0!==r?v:0)+a*S),f=(n+l)/2,p=(g.innerRadius+g.outerRadius)/2,d=[{name:i,value:r,payload:t,dataKey:b,type:y}],_=w.polarToCartesian(g.cx,g.cy,p,f);return O=o(o(o({percent:a,cornerRadius:u,name:i,tooltipPayload:d,midAngle:f,middleRadius:p,tooltipPosition:_},t),g),{value:E.getValueByDataKey(t,b),startAngle:n,endAngle:l,payload:t,paddingAngle:A.mathSign(m)*c})})));return o(o({},g),{sectors:x,data:i})},e}(c.PureComponent);e.Pie=S},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Radar=void 0;var c=s(n(0)),f=l(n(10)),h=l(n(4)),p=l(n(3)),d=n(5),y=n(8),v=n(11),g=n(7),m=n(46),_=n(23),b=n(6),x=n(15),O=n(2),w=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),p.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),p.default.isFunction(t)&&t()},e.handleMouseEnter=function(t){var n=e.props.onMouseEnter;n&&n(e.props,t)},e.handleMouseLeave=function(t){var n=e.props.onMouseLeave;n&&n(e.props,t)},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curPoints:t.points,prevPoints:e.curPoints}:t.points!==e.curPoints?{curPoints:t.points}:null},e.renderDotItem=function(t,e){return c.default.isValidElement(t)?c.default.cloneElement(t,e):p.default.isFunction(t)?t(e):c.default.createElement(_.Dot,o({},e,{className:"recharts-radar-dot"}))},e.prototype.renderDots=function(t){var n=this.props,r=n.dot,i=n.dataKey,a=O.filterProps(this.props),u=O.filterProps(r),s=t.map((function(t,n){var s=o(o(o({key:"dot-"+n,r:3},a),u),{dataKey:i,cx:t.x,cy:t.y,index:n,payload:t});return e.renderDotItem(r,s)}));return c.default.createElement(b.Layer,{className:"recharts-radar-dots"},s)},e.prototype.renderPolygonStatically=function(t){var e,n=this.props,r=n.shape,i=n.dot,a=n.isRange,u=n.baseLinePoints,s=n.connectNulls;return e=c.default.isValidElement(r)?c.default.cloneElement(r,o(o({},this.props),{points:t})):p.default.isFunction(r)?r(o(o({},this.props),{points:t})):c.default.createElement(m.Polygon,o({},O.filterProps(this.props,!0),{onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave,points:t,baseLinePoints:a?u:null,connectNulls:s})),c.default.createElement(b.Layer,{className:"recharts-radar-polygon"},e,i?this.renderDots(t):null)},e.prototype.renderPolygonWithAnimation=function(){var t=this,e=this.props,n=e.points,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,s=e.animationId,l=this.state.prevPoints;return c.default.createElement(f.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"radar-"+s,onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(e){var r=e.t,i=l&&l.length/n.length,a=n.map((function(t,e){var n=l&&l[Math.floor(e*i)];if(n){var a=d.interpolateNumber(n.x,t.x),u=d.interpolateNumber(n.y,t.y);return o(o({},t),{x:a(r),y:u(r)})}var s=d.interpolateNumber(t.cx,t.x),c=d.interpolateNumber(t.cy,t.y);return o(o({},t),{x:s(r),y:c(r)})}));return t.renderPolygonStatically(a)}))},e.prototype.renderPolygon=function(){var t=this.props,e=t.points,n=t.isAnimationActive,r=t.isRange,i=this.state.prevPoints;return!(n&&e&&e.length)||r||i&&p.default.isEqual(i,e)?this.renderPolygonStatically(e):this.renderPolygonWithAnimation()},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.className,r=t.points,i=t.isAnimationActive;if(e||!r||!r.length)return null;var o=this.state.isAnimationFinished,a=h.default("recharts-radar",n);return c.default.createElement(b.Layer,{className:a},this.renderPolygon(),(!i||o)&&x.LabelList.renderCallByParent(this.props,r))},e.displayName="Radar",e.defaultProps={angleAxisId:0,radiusAxisId:0,hide:!1,activeDot:!0,dot:!1,legendType:"rect",isAnimationActive:!y.Global.isSsr,animationBegin:0,animationDuration:1500,animationEasing:"ease"},e.getComposedData=function(t){var e=t.radiusAxis,n=t.angleAxis,r=t.displayedData,i=t.dataKey,a=t.bandSize,u=n.cx,s=n.cy,l=!1,c=[];r.forEach((function(t,r){var f=g.getValueByDataKey(t,n.dataKey,r),h=g.getValueByDataKey(t,i),d=n.scale(f)+(a||0),y=p.default.isArray(h)?p.default.last(h):h,m=p.default.isNil(y)?void 0:e.scale(y);p.default.isArray(h)&&h.length>=2&&(l=!0),c.push(o(o({},v.polarToCartesian(u,s,m,d)),{name:f,value:h,cx:u,cy:s,radius:m,angle:d,payload:t}))}));var f=[];return l&&c.forEach((function(t){if(p.default.isArray(t.value)){var n=p.default.first(t.value),r=p.default.isNil(n)?void 0:e.scale(n);f.push(o(o(o({},t),{radius:r}),v.polarToCartesian(u,s,r,t.angle)))}else f.push(t)})),{points:c,isRange:l,baseLinePoints:f}},e}(c.PureComponent);e.Radar=w},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.RadialBar=void 0;var f=s(n(0)),h=c(n(4)),p=c(n(10)),d=c(n(3)),y=n(45),v=n(6),g=n(9),m=n(8),_=n(15),b=n(27),x=n(5),O=n(7),w=n(2),A=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),d.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),d.default.isFunction(t)&&t()},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curData:t.data,prevData:e.curData}:t.data!==e.curData?{curData:t.data}:null},e.prototype.getDeltaAngle=function(){var t=this.props,e=t.startAngle,n=t.endAngle;return x.mathSign(n-e)*Math.min(Math.abs(n-e),360)},e.renderSectorShape=function(t,e){return f.default.isValidElement(t)?f.default.cloneElement(t,e):d.default.isFunction(t)?t(e):f.default.createElement(y.Sector,e)},e.prototype.renderSectorsStatically=function(t){var n=this,r=this.props,i=r.shape,a=r.activeShape,u=r.activeIndex,s=r.cornerRadius,c=l(r,["shape","activeShape","activeIndex","cornerRadius"]),f=w.filterProps(c);return t.map((function(t,r){var l=o(o(o(o(o({},f),{cornerRadius:s}),t),w.adaptEventsOfChild(n.props,t,r)),{key:"sector-"+r,className:"recharts-radial-bar-sector",forceCornerRadius:c.forceCornerRadius,cornerIsExternal:c.cornerIsExternal});return e.renderSectorShape(r===u?a:i,l)}))},e.prototype.renderSectorsWithAnimation=function(){var t=this,e=this.props,n=e.data,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,s=e.animationId,l=this.state.prevData;return f.default.createElement(p.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"radialBar-"+s,onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(e){var r=e.t,i=n.map((function(t,e){var n=l&&l[e];if(n){var i=x.interpolateNumber(n.startAngle,t.startAngle),a=x.interpolateNumber(n.endAngle,t.endAngle);return o(o({},t),{startAngle:i(r),endAngle:a(r)})}var u=t.endAngle,s=t.startAngle,c=x.interpolateNumber(s,u);return o(o({},t),{endAngle:c(r)})}));return f.default.createElement(v.Layer,null,t.renderSectorsStatically(i))}))},e.prototype.renderSectors=function(){var t=this.props,e=t.data,n=t.isAnimationActive,r=this.state.prevData;return!(n&&e&&e.length)||r&&d.default.isEqual(r,e)?this.renderSectorsStatically(e):this.renderSectorsWithAnimation()},e.prototype.renderBackground=function(t){var n=this,r=this.props.cornerRadius,i=w.filterProps(this.props.background);return t.map((function(t,a){t.value;var u=t.background,s=l(t,["value","background"]);if(!u)return null;var c=o(o(o(o(o(o({cornerRadius:r},s),{fill:"#eee"}),u),i),w.adaptEventsOfChild(n.props,t,a)),{index:a,key:"sector-"+a,className:"recharts-radial-bar-background-sector"});return e.renderSectorShape(u,c)}))},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.data,r=t.className,i=t.background,a=t.isAnimationActive;if(e||!n||!n.length)return null;var u=this.state.isAnimationFinished,s=h.default("recharts-area",r);return f.default.createElement(v.Layer,{className:s},i&&f.default.createElement(v.Layer,{className:"recharts-radial-bar-background"},this.renderBackground(n)),f.default.createElement(v.Layer,{className:"recharts-radial-bar-sectors"},this.renderSectors()),(!a||u)&&_.LabelList.renderCallByParent(o(o({},this.props),{clockWise:this.getDeltaAngle()<0}),n))},e.displayName="RadialBar",e.defaultProps={angleAxisId:0,radiusAxisId:0,minPointSize:0,hide:!1,legendType:"rect",data:[],isAnimationActive:!m.Global.isSsr,animationBegin:0,animationDuration:1500,animationEasing:"ease",forceCornerRadius:!1,cornerIsExternal:!1},e.getComposedData=function(t){var e=t.item,n=t.props,r=t.radiusAxis,i=t.radiusAxisTicks,a=t.angleAxis,u=t.angleAxisTicks,s=t.displayedData,l=t.dataKey,c=t.stackedData,f=t.barPosition,h=t.bandSize,p=t.dataStartIndex,y=O.findPositionOfBar(f,e);if(!y)return null;var v=a.cx,m=a.cy,_=n.layout,w=e.props,A=w.children,E=w.minPointSize,M="radial"===_?a:r,P=c?M.scale.domain():null,S=O.getBaseValueOfBar({numericAxis:M}),k=g.findAllByType(A,b.Cell.displayName);return{data:s.map((function(t,e){var s,f,g,b,w,A;if(c?s=O.truncateByDomain(c[p+e],P):(s=O.getValueByDataKey(t,l),d.default.isArray(s)||(s=[S,s])),"radial"===_){f=O.getCateCoordinateOfBar({axis:r,ticks:i,bandSize:h,offset:y.offset,entry:t,index:e}),w=a.scale(s[1]),b=a.scale(s[0]),g=f+y.size;var M=w-b;if(Math.abs(E)>0&&Math.abs(M)<Math.abs(E))w+=x.mathSign(M||E)*(Math.abs(E)-Math.abs(M));A={background:{cx:v,cy:m,innerRadius:f,outerRadius:g,startAngle:n.startAngle,endAngle:n.endAngle}}}else{f=r.scale(s[0]),g=r.scale(s[1]),w=(b=O.getCateCoordinateOfBar({axis:a,ticks:u,bandSize:h,offset:y.offset,entry:t,index:e}))+y.size;var C=g-f;if(Math.abs(E)>0&&Math.abs(C)<Math.abs(E))g+=x.mathSign(C||E)*(Math.abs(E)-Math.abs(C))}return o(o(o(o({},t),A),{payload:t,value:c?s:s[1],cx:v,cy:m,innerRadius:f,outerRadius:g,startAngle:b,endAngle:w}),k&&k[e]&&k[e].props)})),layout:_}},e}(f.PureComponent);e.RadialBar=A},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Brush=void 0;var c=s(n(0)),f=l(n(4)),h=n(111),p=l(n(3)),d=n(6),y=n(22),v=n(7),g=n(5),m=n(247),_=n(2),b=function(t){return t.changedTouches&&!!t.changedTouches.length},x=function(t){function e(e){var n=t.call(this,e)||this;return n.handleDrag=function(t){n.leaveTimer&&(clearTimeout(n.leaveTimer),n.leaveTimer=null),n.state.isTravellerMoving?n.handleTravellerMove(t):n.state.isSlideMoving&&n.handleSlideDrag(t)},n.handleTouchMove=function(t){null!=t.changedTouches&&t.changedTouches.length>0&&n.handleDrag(t.changedTouches[0])},n.handleDragEnd=function(){n.setState({isTravellerMoving:!1,isSlideMoving:!1}),n.detachDragEndListener()},n.handleLeaveWrapper=function(){(n.state.isTravellerMoving||n.state.isSlideMoving)&&(n.leaveTimer=window.setTimeout(n.handleDragEnd,n.props.leaveTimeOut))},n.handleEnterSlideOrTraveller=function(){n.setState({isTextActive:!0})},n.handleLeaveSlideOrTraveller=function(){n.setState({isTextActive:!1})},n.handleSlideDragStart=function(t){var e=b(t)?t.changedTouches[0]:t;n.setState({isTravellerMoving:!1,isSlideMoving:!0,slideMoveStartX:e.pageX}),n.attachDragEndListener()},n.travellerDragStartHandlers={startX:n.handleTravellerDragStart.bind(n,"startX"),endX:n.handleTravellerDragStart.bind(n,"endX")},n.state={},n}return i(e,t),e.renderDefaultTraveller=function(t){var e=t.x,n=t.y,r=t.width,i=t.height,o=t.stroke,a=Math.floor(n+i/2)-1;return c.default.createElement(c.default.Fragment,null,c.default.createElement("rect",{x:e,y:n,width:r,height:i,fill:o,stroke:"none"}),c.default.createElement("line",{x1:e+1,y1:a,x2:e+r-1,y2:a,fill:"none",stroke:"#fff"}),c.default.createElement("line",{x1:e+1,y1:a+2,x2:e+r-1,y2:a+2,fill:"none",stroke:"#fff"}))},e.renderTraveller=function(t,n){return c.default.isValidElement(t)?c.default.cloneElement(t,n):p.default.isFunction(t)?t(n):e.renderDefaultTraveller(n)},e.getDerivedStateFromProps=function(t,e){var n=t.data,r=t.width,i=t.x,a=t.travellerWidth,u=t.updateId,s=t.startIndex,l=t.endIndex;if(n!==e.prevData||u!==e.prevUpdateId)return o({prevData:n,prevTravellerWidth:a,prevUpdateId:u,prevX:i,prevWidth:r},n&&n.length?function(t){var e=t.data,n=t.startIndex,r=t.endIndex,i=t.x,o=t.width,a=t.travellerWidth;if(!e||!e.length)return{};var u=e.length,s=h.scalePoint().domain(p.default.range(0,u)).range([i,i+o-a]),l=s.domain().map((function(t){return s(t)}));return{isTextActive:!1,isSlideMoving:!1,isTravellerMoving:!1,startX:s(n),endX:s(r),scale:s,scaleValues:l}}({data:n,width:r,x:i,travellerWidth:a,startIndex:s,endIndex:l}):{scale:null,scaleValues:null});if(e.scale&&(r!==e.prevWidth||i!==e.prevX||a!==e.prevTravellerWidth)){e.scale.range([i,i+r-a]);var c=e.scale.domain().map((function(t){return e.scale(t)}));return{prevData:n,prevTravellerWidth:a,prevUpdateId:u,prevX:i,prevWidth:r,startX:e.scale(t.startIndex),endX:e.scale(t.endIndex),scaleValues:c}}return null},e.prototype.componentWillUnmount=function(){this.leaveTimer&&(clearTimeout(this.leaveTimer),this.leaveTimer=null),this.detachDragEndListener()},e.getIndexInRange=function(t,e){for(var n=0,r=t.length-1;r-n>1;){var i=Math.floor((n+r)/2);t[i]>e?r=i:n=i}return e>=t[r]?r:n},e.prototype.getIndex=function(t){var n=t.startX,r=t.endX,i=this.state.scaleValues,o=this.props,a=o.gap,u=o.data.length-1,s=Math.min(n,r),l=Math.max(n,r),c=e.getIndexInRange(i,s),f=e.getIndexInRange(i,l);return{startIndex:c-c%a,endIndex:f===u?u:f-f%a}},e.prototype.getTextOfTick=function(t){var e=this.props,n=e.data,r=e.tickFormatter,i=e.dataKey,o=v.getValueByDataKey(n[t],i,t);return p.default.isFunction(r)?r(o,t):o},e.prototype.attachDragEndListener=function(){window.addEventListener("mouseup",this.handleDragEnd,!0),window.addEventListener("touchend",this.handleDragEnd,!0)},e.prototype.detachDragEndListener=function(){window.removeEventListener("mouseup",this.handleDragEnd,!0),window.removeEventListener("touchend",this.handleDragEnd,!0)},e.prototype.handleSlideDrag=function(t){var e=this.state,n=e.slideMoveStartX,r=e.startX,i=e.endX,o=this.props,a=o.x,u=o.width,s=o.travellerWidth,l=o.startIndex,c=o.endIndex,f=o.onChange,h=t.pageX-n;h>0?h=Math.min(h,a+u-s-i,a+u-s-r):h<0&&(h=Math.max(h,a-r,a-i));var p=this.getIndex({startX:r+h,endX:i+h});p.startIndex===l&&p.endIndex===c||!f||f(p),this.setState({startX:r+h,endX:i+h,slideMoveStartX:t.pageX})},e.prototype.handleTravellerDragStart=function(t,e){var n=b(e)?e.changedTouches[0]:e;this.setState({isSlideMoving:!1,isTravellerMoving:!0,movingTravellerId:t,brushMoveStartX:n.pageX}),this.attachDragEndListener()},e.prototype.handleTravellerMove=function(t){var e,n=this.state,r=n.brushMoveStartX,i=n.movingTravellerId,o=n.endX,a=n.startX,u=this.state[i],s=this.props,l=s.x,c=s.width,f=s.travellerWidth,h=s.onChange,p=s.gap,d=s.data,y={startX:this.state.startX,endX:this.state.endX},v=t.pageX-r;v>0?v=Math.min(v,l+c-f-u):v<0&&(v=Math.max(v,l-u)),y[i]=u+v;var g=this.getIndex(y),m=g.startIndex,_=g.endIndex;this.setState(((e={})[i]=u+v,e.brushMoveStartX=t.pageX,e),(function(){var t;h&&(t=d.length-1,("startX"===i&&(o>a?m%p==0:_%p==0)||o<a&&_===t||"endX"===i&&(o>a?_%p==0:m%p==0)||o>a&&_===t)&&h(g))}))},e.prototype.renderBackground=function(){var t=this.props,e=t.x,n=t.y,r=t.width,i=t.height,o=t.fill,a=t.stroke;return c.default.createElement("rect",{stroke:a,fill:o,x:e,y:n,width:r,height:i})},e.prototype.renderPanorama=function(){var t=this.props,e=t.x,n=t.y,r=t.width,i=t.height,o=t.data,a=t.children,u=t.padding,s=c.Children.only(a);return s?c.default.cloneElement(s,{x:e,y:n,width:r,height:i,margin:u,compact:!0,data:o}):null},e.prototype.renderTravellerLayer=function(t,n){var r=this.props,i=r.y,a=r.travellerWidth,u=r.height,s=r.traveller,l=Math.max(t,this.props.x),f=o(o({},_.filterProps(this.props)),{x:l,y:i,width:a,height:u});return c.default.createElement(d.Layer,{className:"recharts-brush-traveller",onMouseEnter:this.handleEnterSlideOrTraveller,onMouseLeave:this.handleLeaveSlideOrTraveller,onMouseDown:this.travellerDragStartHandlers[n],onTouchStart:this.travellerDragStartHandlers[n],style:{cursor:"col-resize"}},e.renderTraveller(s,f))},e.prototype.renderSlide=function(t,e){var n=this.props,r=n.y,i=n.height,o=n.stroke,a=n.travellerWidth,u=Math.min(t,e)+a,s=Math.max(Math.abs(e-t)-a,0);return c.default.createElement("rect",{className:"recharts-brush-slide",onMouseEnter:this.handleEnterSlideOrTraveller,onMouseLeave:this.handleLeaveSlideOrTraveller,onMouseDown:this.handleSlideDragStart,onTouchStart:this.handleSlideDragStart,style:{cursor:"move"},stroke:"none",fill:o,fillOpacity:.2,x:u,y:r,width:s,height:i})},e.prototype.renderText=function(){var t=this.props,e=t.startIndex,n=t.endIndex,r=t.y,i=t.height,a=t.travellerWidth,u=t.stroke,s=this.state,l=s.startX,f=s.endX,h={pointerEvents:"none",fill:u};return c.default.createElement(d.Layer,{className:"recharts-brush-texts"},c.default.createElement(y.Text,o({textAnchor:"end",verticalAnchor:"middle",x:Math.min(l,f)-5,y:r+i/2},h),this.getTextOfTick(e)),c.default.createElement(y.Text,o({textAnchor:"start",verticalAnchor:"middle",x:Math.max(l,f)+a+5,y:r+i/2},h),this.getTextOfTick(n)))},e.prototype.render=function(){var t=this.props,e=t.data,n=t.className,r=t.children,i=t.x,o=t.y,a=t.width,u=t.height,s=t.alwaysShowText,l=this.state,h=l.startX,p=l.endX,y=l.isTextActive,v=l.isSlideMoving,_=l.isTravellerMoving;if(!e||!e.length||!g.isNumber(i)||!g.isNumber(o)||!g.isNumber(a)||!g.isNumber(u)||a<=0||u<=0)return null;var b=f.default("recharts-brush",n),x=1===c.default.Children.count(r),O=m.generatePrefixStyle("userSelect","none");return c.default.createElement(d.Layer,{className:b,onMouseMove:this.handleDrag,onMouseLeave:this.handleLeaveWrapper,onTouchMove:this.handleTouchMove,style:O},this.renderBackground(),x&&this.renderPanorama(),this.renderSlide(h,p),this.renderTravellerLayer(h,"startX"),this.renderTravellerLayer(p,"endX"),(y||v||_||s)&&this.renderText())},e.displayName="Brush",e.defaultProps={height:40,travellerWidth:5,gap:1,fill:"#fff",stroke:"#666",padding:{top:1,right:1,bottom:1,left:1},leaveTimeOut:1e3,alwaysShowText:!1},e}(c.PureComponent);e.Brush=x},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ReferenceLine=void 0;var o=i(n(0)),a=i(n(3)),u=i(n(4)),s=n(6),l=n(17),c=n(49),f=n(5),h=n(18),p=n(26),d=n(2);function y(t){var e=t.x,n=t.y,i=t.segment,y=t.xAxis,v=t.yAxis,g=t.shape,m=t.className,_=t.alwaysShow,b=t.clipPathId;p.warn(void 0===_,'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');var x=function(t,e,n,r,i){var o=i.viewBox,u=o.x,s=o.y,l=o.width,f=o.height,h=i.position;if(n){var p=i.y,d=i.yAxis.orientation,y=t.y.apply(p,{position:h});if(c.ifOverflowMatches(i,"discard")&&!t.y.isInRange(y))return null;var v=[{x:u+l,y:y},{x:u,y:y}];return"left"===d?v.reverse():v}if(e){var g=i.x,m=i.xAxis.orientation;y=t.x.apply(g,{position:h});if(c.ifOverflowMatches(i,"discard")&&!t.x.isInRange(y))return null;v=[{x:y,y:s+f},{x:y,y:s}];return"top"===m?v.reverse():v}if(r){v=i.segment.map((function(e){return t.apply(e,{position:h})}));return c.ifOverflowMatches(i,"discard")&&a.default.some(v,(function(e){return!t.isInRange(e)}))?null:v}return null}(h.createLabeledScales({x:y.scale,y:v.scale}),f.isNumOrStr(e),f.isNumOrStr(n),i&&2===i.length,t);if(!x)return null;var O=x[0],w=O.x,A=O.y,E=x[1],M=E.x,P=E.y,S=c.ifOverflowMatches(t,"hidden")?"url(#"+b+")":void 0,k=r(r({clipPath:S},d.filterProps(t,!0)),{x1:w,y1:A,x2:M,y2:P});return o.default.createElement(s.Layer,{className:u.default("recharts-reference-line",m)},function(t,e){return o.default.isValidElement(t)?o.default.cloneElement(t,e):a.default.isFunction(t)?t(e):o.default.createElement("line",r({},e,{className:"recharts-reference-line-line"}))}(g,k),l.Label.renderCallByParent(t,h.rectWithCoords({x1:w,y1:A,x2:M,y2:P})))}e.ReferenceLine=y,y.displayName="ReferenceLine",y.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,fill:"none",stroke:"#ccc",fillOpacity:1,strokeWidth:1,position:"middle"}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ReferenceDot=void 0;var o=i(n(0)),a=i(n(3)),u=i(n(4)),s=n(6),l=n(23),c=n(17),f=n(5),h=n(49),p=n(18),d=n(26),y=n(2);function v(t){var e=t.x,n=t.y,i=t.r,a=t.alwaysShow,l=t.clipPathId,g=f.isNumOrStr(e),m=f.isNumOrStr(n);if(d.warn(void 0===a,'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.'),!g||!m)return null;var _=function(t){var e=t.x,n=t.y,r=t.xAxis,i=t.yAxis,o=p.createLabeledScales({x:r.scale,y:i.scale}),a=o.apply({x:e,y:n},{bandAware:!0});return h.ifOverflowMatches(t,"discard")&&!o.isInRange(a)?null:a}(t);if(!_)return null;var b=_.x,x=_.y,O=t.shape,w=t.className,A=h.ifOverflowMatches(t,"hidden")?"url(#"+l+")":void 0,E=r(r({clipPath:A},y.filterProps(t,!0)),{cx:b,cy:x});return o.default.createElement(s.Layer,{className:u.default("recharts-reference-dot",w)},v.renderDot(O,E),c.Label.renderCallByParent(t,{x:b-i,y:x-i,width:2*i,height:2*i}))}e.ReferenceDot=v,v.displayName="ReferenceDot",v.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,r:10,fill:"#fff",stroke:"#ccc",fillOpacity:1,strokeWidth:1},v.renderDot=function(t,e){return o.default.isValidElement(t)?o.default.cloneElement(t,e):a.default.isFunction(t)?t(e):o.default.createElement(l.Dot,r({},e,{cx:e.cx,cy:e.cy,className:"recharts-reference-dot-dot"}))}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ReferenceArea=void 0;var o=i(n(0)),a=i(n(3)),u=i(n(4)),s=n(6),l=n(17),c=n(18),f=n(49),h=n(5),p=n(26),d=n(29),y=n(2);function v(t){var e=t.x1,n=t.x2,i=t.y1,a=t.y2,d=t.className,g=t.alwaysShow,m=t.clipPathId;p.warn(void 0===g,'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');var _=h.isNumOrStr(e),b=h.isNumOrStr(n),x=h.isNumOrStr(i),O=h.isNumOrStr(a),w=t.shape;if(!(_||b||x||O||w))return null;var A=function(t,e,n,r,i){var o=i.x1,a=i.x2,u=i.y1,s=i.y2,l=i.xAxis,h=i.yAxis,p=c.createLabeledScales({x:l.scale,y:h.scale}),d={x:t?p.x.apply(o,{position:"start"}):p.x.rangeMin,y:n?p.y.apply(u,{position:"start"}):p.y.rangeMin},y={x:e?p.x.apply(a,{position:"end"}):p.x.rangeMax,y:r?p.y.apply(s,{position:"end"}):p.y.rangeMax};return!f.ifOverflowMatches(i,"discard")||p.isInRange(d)&&p.isInRange(y)?c.rectWithPoints(d,y):null}(_,b,x,O,t);if(!A&&!w)return null;var E=f.ifOverflowMatches(t,"hidden")?"url(#"+m+")":void 0;return o.default.createElement(s.Layer,{className:u.default("recharts-reference-area",d)},v.renderRect(w,r(r({clipPath:E},y.filterProps(t,!0)),A)),l.Label.renderCallByParent(t,A))}e.ReferenceArea=v,v.displayName="ReferenceArea",v.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,r:10,fill:"#ccc",fillOpacity:.5,stroke:"none",strokeWidth:1},v.renderRect=function(t,e){return o.default.isValidElement(t)?o.default.cloneElement(t,e):a.default.isFunction(t)?t(e):o.default.createElement(d.Rectangle,r({},e,{className:"recharts-reference-area-rect"}))}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.CartesianAxis=void 0;var f=s(n(0)),h=c(n(3)),p=c(n(4)),d=n(44),y=n(43),v=n(6),g=n(22),m=n(17),_=n(8),b=n(5),x=n(2),O=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.getTicks=function(t){var n=t.tick,r=t.ticks,i=t.viewBox,o=t.minTickGap,a=t.orientation,u=t.interval,s=t.tickFormatter,l=t.unit;return r&&r.length&&n?b.isNumber(u)||_.Global.isSsr?e.getNumberIntervalTicks(r,"number"==typeof u&&b.isNumber(u)?u:0):"preserveStartEnd"===u?e.getTicksStart({ticks:r,tickFormatter:s,viewBox:i,orientation:a,minTickGap:o,unit:l},!0):"preserveStart"===u?e.getTicksStart({ticks:r,tickFormatter:s,viewBox:i,orientation:a,minTickGap:o,unit:l}):e.getTicksEnd({ticks:r,tickFormatter:s,viewBox:i,orientation:a,minTickGap:o,unit:l}):[]},e.getNumberIntervalTicks=function(t,e){return t.filter((function(t,n){return n%(e+1)==0}))},e.getTicksStart=function(t,e){var n,r,i=t.ticks,a=t.tickFormatter,u=t.viewBox,s=t.orientation,l=t.minTickGap,c=t.unit,f=u.x,p=u.y,d=u.width,v=u.height,g="top"===s||"bottom"===s?"width":"height",m=(i||[]).slice(),_=c&&"width"===g?y.getStringSize(c)[g]:0,x=m.length,O=x>=2?b.mathSign(m[1].coordinate-m[0].coordinate):1;if(1===O?(n="width"===g?f:p,r="width"===g?f+d:p+v):(n="width"===g?f+d:p+v,r="width"===g?f:p),e){var w=i[x-1],A=h.default.isFunction(a)?a(w.value,x-1):w.value,E=y.getStringSize(A)[g]+_,M=O*(w.coordinate+O*E/2-r);m[x-1]=w=o(o({},w),{tickCoord:M>0?w.coordinate-M*O:w.coordinate}),O*(w.tickCoord-O*E/2-n)>=0&&O*(w.tickCoord+O*E/2-r)<=0&&(r=w.tickCoord-O*(E/2+l),m[x-1]=o(o({},w),{isShow:!0}))}for(var P=e?x-1:x,S=0;S<P;S++){var k=m[S],C=h.default.isFunction(a)?a(k.value,S):k.value,j=y.getStringSize(C)[g]+_;if(0===S){var T=O*(k.coordinate-O*j/2-n);m[S]=k=o(o({},k),{tickCoord:T<0?k.coordinate-T*O:k.coordinate})}else m[S]=k=o(o({},k),{tickCoord:k.coordinate});O*(k.tickCoord-O*j/2-n)>=0&&O*(k.tickCoord+O*j/2-r)<=0&&(n=k.tickCoord+O*(j/2+l),m[S]=o(o({},k),{isShow:!0}))}return m.filter((function(t){return t.isShow}))},e.getTicksEnd=function(t){var e,n,r=t.ticks,i=t.tickFormatter,a=t.viewBox,u=t.orientation,s=t.minTickGap,l=t.unit,c=a.x,f=a.y,p=a.width,d=a.height,v="top"===u||"bottom"===u?"width":"height",g=l&&"width"===v?y.getStringSize(l)[v]:0,m=(r||[]).slice(),_=m.length,x=_>=2?b.mathSign(m[1].coordinate-m[0].coordinate):1;1===x?(e="width"===v?c:f,n="width"===v?c+p:f+d):(e="width"===v?c+p:f+d,n="width"===v?c:f);for(var O=_-1;O>=0;O--){var w=m[O],A=h.default.isFunction(i)?i(w.value,_-O-1):w.value,E=y.getStringSize(A)[v]+g;if(O===_-1){var M=x*(w.coordinate+x*E/2-n);m[O]=w=o(o({},w),{tickCoord:M>0?w.coordinate-M*x:w.coordinate})}else m[O]=w=o(o({},w),{tickCoord:w.coordinate});x*(w.tickCoord-x*E/2-e)>=0&&x*(w.tickCoord+x*E/2-n)<=0&&(n=w.tickCoord-x*(E/2+s),m[O]=o(o({},w),{isShow:!0}))}return m.filter((function(t){return t.isShow}))},e.prototype.shouldComponentUpdate=function(t){var e=t.viewBox,n=l(t,["viewBox"]),r=this.props,i=r.viewBox,o=l(r,["viewBox"]);return!d.shallowEqual(e,i)||!d.shallowEqual(n,o)},e.prototype.getTickLineCoord=function(t){var e,n,r,i,o,a,u=this.props,s=u.x,l=u.y,c=u.width,f=u.height,h=u.orientation,p=u.tickSize,d=u.mirror,y=u.tickMargin,v=d?-1:1,g=t.tickSize||p,m=b.isNumber(t.tickCoord)?t.tickCoord:t.coordinate;switch(h){case"top":e=n=t.coordinate,a=(r=(i=l+ +!d*f)-v*g)-v*y,o=m;break;case"left":r=i=t.coordinate,o=(e=(n=s+ +!d*c)-v*g)-v*y,a=m;break;case"right":r=i=t.coordinate,o=(e=(n=s+ +d*c)+v*g)+v*y,a=m;break;default:e=n=t.coordinate,a=(r=(i=l+ +d*f)+v*g)+v*y,o=m}return{line:{x1:e,y1:r,x2:n,y2:i},tick:{x:o,y:a}}},e.prototype.getTickTextAnchor=function(){var t,e=this.props,n=e.orientation,r=e.mirror;switch(n){case"left":t=r?"start":"end";break;case"right":t=r?"end":"start";break;default:t="middle"}return t},e.prototype.getTickVerticalAnchor=function(){var t=this.props,e=t.orientation,n=t.mirror,r="end";switch(e){case"left":case"right":r="middle";break;case"top":r=n?"start":"end";break;default:r=n?"end":"start"}return r},e.prototype.renderAxisLine=function(){console.log("Saurabh this renders axisline");var t=this.props,e=t.x,n=t.y,r=t.width,i=t.height,a=t.orientation,u=t.mirror,s=t.axisLine,l=o(o(o({},x.filterProps(this.props)),x.filterProps(s)),{fill:"none"});if("top"===a||"bottom"===a){var c=+("top"===a&&!u||"bottom"===a&&u);l=o(o({},l),{x1:e,y1:n+c*i,x2:e+r,y2:n+c*i})}else{var d=+("left"===a&&!u||"right"===a&&u);l=o(o({},l),{x1:e+d*r,y1:n,x2:e+d*r,y2:n+i})}return f.default.createElement("line",o({},l,{className:p.default("recharts-cartesian-axis-line",h.default.get(s,"className"))}))},e.renderTickItem=function(t,e,n){return f.default.isValidElement(t)?f.default.cloneElement(t,e):h.default.isFunction(t)?t(e):f.default.createElement(g.Text,o({},e,{className:"recharts-cartesian-axis-tick-value"}),n)},e.prototype.renderTicks=function(t){var n=this,r=this.props,i=r.tickLine,a=r.stroke,u=r.tick,s=r.tickFormatter,l=r.unit,c=e.getTicks(o(o({},this.props),{ticks:t})),d=this.getTickTextAnchor(),y=this.getTickVerticalAnchor(),g=x.filterProps(this.props),m=x.filterProps(u),_=o(o(o({},g),{fill:"none"}),x.filterProps(i)),b=c.map((function(t,r){var b=n.getTickLineCoord(t),O=b.line,w=b.tick,A=o(o(o(o(o({textAnchor:d,verticalAnchor:y},g),{stroke:"none",fill:a}),m),w),{index:r,payload:t,visibleTicksCount:c.length,tickFormatter:s});return f.default.createElement(v.Layer,o({className:"recharts-cartesian-axis-tick",key:"tick-"+r},x.adaptEventsOfChild(n.props,t,r)),i&&f.default.createElement("line",o({},_,O,{className:p.default("recharts-cartesian-axis-tick-line",h.default.get(i,"className"))})),u&&e.renderTickItem(u,A,""+(h.default.isFunction(s)?s(t.value,r):t.value)+(l||"")))}));return f.default.createElement("g",{className:"recharts-cartesian-axis-ticks"},b)},e.prototype.render=function(){var t=this.props,e=t.axisLine,n=t.width,r=t.height,i=t.ticksGenerator,o=t.className;if(t.hide)return null;var a=this.props,u=a.ticks,s=l(a,["ticks"]),c=u;return h.default.isFunction(i)&&(c=u&&u.length>0?i(this.props):i(s)),n<=0||r<=0||!c||!c.length?null:f.default.createElement(v.Layer,{className:p.default("recharts-cartesian-axis",o)},e&&this.renderAxisLine(),this.renderTicks(c),m.Label.renderCallByParent(this.props))},e.displayName="CartesianAxis",e.defaultProps={x:0,y:0,width:0,height:0,viewBox:{x:0,y:0,width:0,height:0},orientation:"bottom",ticks:[],stroke:"#666",tickLine:!0,axisLine:!0,tick:!0,mirror:!1,minTickGap:5,tickSize:6,tickMargin:2,interval:"preserveEnd"},e}(f.Component);e.CartesianAxis=O},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Funnel=void 0;var c=s(n(0)),f=l(n(10)),h=l(n(4)),p=l(n(3)),d=n(6),y=n(110),v=n(15),g=n(27),m=n(9),_=n(8),b=n(5),x=n(7),O=n(2),w=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={isAnimationFinished:!1},e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),p.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),p.default.isFunction(t)&&t()},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){return t.animationId!==e.prevAnimationId?{prevAnimationId:t.animationId,curTrapezoids:t.trapezoids,prevTrapezoids:e.curTrapezoids}:t.trapezoids!==e.curTrapezoids?{curTrapezoids:t.trapezoids}:null},e.prototype.isActiveIndex=function(t){var e=this.props.activeIndex;return Array.isArray(e)?-1!==e.indexOf(t):t===e},e.renderTrapezoidItem=function(t,e){return c.default.isValidElement(t)?c.default.cloneElement(t,e):p.default.isFunction(t)?t(e):p.default.isPlainObject(t)?c.default.createElement(y.Trapezoid,o({},e,t)):c.default.createElement(y.Trapezoid,o({},e))},e.prototype.renderTrapezoidsStatically=function(t){var n=this,r=this.props.activeShape;return t.map((function(t,i){var a=n.isActiveIndex(i)?r:null,u=o(o({},t),{stroke:t.stroke});return c.default.createElement(d.Layer,o({className:"recharts-funnel-trapezoid"},O.adaptEventsOfChild(n.props,t,i),{key:"trapezoid-"+i}),e.renderTrapezoidItem(a,u))}))},e.prototype.renderTrapezoidsWithAnimation=function(){var t=this,e=this.props,n=e.trapezoids,r=e.isAnimationActive,i=e.animationBegin,a=e.animationDuration,u=e.animationEasing,s=e.animationId,l=this.state.prevTrapezoids;return c.default.createElement(f.default,{begin:i,duration:a,isActive:r,easing:u,from:{t:0},to:{t:1},key:"funnel-"+s,onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(e){var r=e.t,i=n.map((function(t,e){var n=l&&l[e];if(n){var i=b.interpolateNumber(n.x,t.x),a=b.interpolateNumber(n.y,t.y),u=b.interpolateNumber(n.upperWidth,t.upperWidth),s=b.interpolateNumber(n.lowerWidth,t.lowerWidth),c=b.interpolateNumber(n.height,t.height);return o(o({},t),{x:i(r),y:a(r),upperWidth:u(r),lowerWidth:s(r),height:c(r)})}var f=b.interpolateNumber(t.x+t.upperWidth/2,t.x),h=b.interpolateNumber(t.y+t.height/2,t.y),p=b.interpolateNumber(0,t.upperWidth),d=b.interpolateNumber(0,t.lowerWidth),y=b.interpolateNumber(0,t.height);return o(o({},t),{x:f(r),y:h(r),upperWidth:p(r),lowerWidth:d(r),height:y(r)})}));return c.default.createElement(d.Layer,null,t.renderTrapezoidsStatically(i))}))},e.prototype.renderTrapezoids=function(){var t=this.props,e=t.trapezoids,n=t.isAnimationActive,r=this.state.prevTrapezoids;return!(n&&e&&e.length)||r&&p.default.isEqual(r,e)?this.renderTrapezoidsStatically(e):this.renderTrapezoidsWithAnimation()},e.prototype.render=function(){var t=this.props,e=t.hide,n=t.trapezoids,r=t.className,i=t.isAnimationActive,o=this.state.isAnimationFinished;if(e||!n||!n.length)return null;var a=h.default("recharts-trapezoids",r);return c.default.createElement(d.Layer,{className:a},this.renderTrapezoids(),(!i||o)&&v.LabelList.renderCallByParent(this.props,n))},e.displayName="Funnel",e.defaultProps={stroke:"#fff",fill:"#808080",legendType:"rect",labelLine:!0,hide:!1,isAnimationActive:!_.Global.isSsr,animationBegin:400,animationDuration:1500,animationEasing:"ease",nameKey:"name",lastShapeType:"triangle"},e.getRealFunnelData=function(t){var e=t.props,n=e.data,r=e.children,i=O.filterProps(t.props),a=m.findAllByType(r,g.Cell.displayName);return n&&n.length?n.map((function(t,e){return o(o(o({payload:t},i),t),a&&a[e]&&a[e].props)})):a&&a.length?a.map((function(t){return o(o({},i),t.props)})):[]},e.getRealWidthHeight=function(t,e){var n=t.props.width,r=e.width,i=e.height,o=e.left,a=e.right,u=e.top,s=e.bottom,l=i,c=r;return p.default.isNumber(n)?c=n:p.default.isString(n)&&(c=c*parseFloat(n)/100),{realWidth:c-o-a-50,realHeight:l-s-u,offsetX:(r-c)/2,offsetY:(i-l)/2}},e.getComposedData=function(t){var n=t.item,r=t.offset,i=e.getRealFunnelData(n),a=n.props,u=a.dataKey,s=a.nameKey,l=a.tooltipType,c=a.lastShapeType,f=a.reversed,h=r.left,d=r.top,y=e.getRealWidthHeight(n,r),v=y.realHeight,g=y.realWidth,m=y.offsetX,_=y.offsetY,b=Math.max.apply(null,i.map((function(t){return x.getValueByDataKey(t,u,0)}))),O=i.length,w=v/O,A={x:r.left,y:r.top,width:r.width,height:r.height},E=i.map((function(t,e){var n,r=x.getValueByDataKey(t,u,0),a=x.getValueByDataKey(t,s,e),f=r;e!==O-1?(n=x.getValueByDataKey(i[e+1],u,0))instanceof Array&&(n=n[0]):r instanceof Array&&2===r.length?(f=r[0],n=r[1]):n="rectangle"===c?f:0;var y=(b-f)*g/(2*b)+d+25+m,v=w*e+h+_,E=f/b*g,M=n/b*g,P=[{name:a,value:f,payload:t,dataKey:u,type:l}],S={x:y+E/2,y:v+w/2};return o(o({x:y,y:v,width:Math.max(E,M),upperWidth:E,lowerWidth:M,height:w,name:a,val:f,tooltipPayload:P,tooltipPosition:S},p.default.omit(t,"width")),{payload:t,parentViewBox:A,labelViewBox:{x:y+(E-M)/4,y:v,width:Math.abs(E-M)/2+Math.min(E,M),height:w}})}));return f&&(E=E.map((function(t,e){var n=t.y-e*w+(O-1-e)*w;return o(o({},t),{upperWidth:t.lowerWidth,lowerWidth:t.upperWidth,x:t.x-(t.lowerWidth-t.upperWidth)/2,y:t.y-e*w+(O-1-e)*w,tooltipPosition:o(o({},t.tooltipPosition),{y:n+w/2}),labelViewBox:o(o({},t.labelViewBox),{y:n})})}))),{trapezoids:E,data:i}},e}(c.PureComponent);e.Funnel=w},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Trapezoid=void 0;var c=s(n(0)),f=l(n(4)),h=l(n(10)),p=n(2),d=function(t,e,n,r,i){var o,a=n-r;return o="M "+t+","+e,o+="L "+(t+n)+","+e,o+="L "+(t+n-a/2)+","+(e+i),o+="L "+(t+n-a/2-r)+","+(e+i),o+="L "+t+","+e+" Z"},y=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={totalLength:-1},e}return i(e,t),e.prototype.componentDidMount=function(){if(this.node&&this.node.getTotalLength)try{var t=this.node.getTotalLength();t&&this.setState({totalLength:t})}catch(t){}},e.prototype.render=function(){var t=this,e=this.props,n=e.x,r=e.y,i=e.upperWidth,a=e.lowerWidth,u=e.height,s=e.className,l=this.state.totalLength,y=this.props,v=y.animationEasing,g=y.animationDuration,m=y.animationBegin,_=y.isUpdateAnimationActive;if(n!==+n||r!==+r||i!==+i||a!==+a||u!==+u||0===i&&0===a||0===u)return null;var b=f.default("recharts-trapezoid",s);return _?c.default.createElement(h.default,{canBegin:l>0,from:{upperWidth:0,lowerWidth:0,height:u,x:n,y:r},to:{upperWidth:i,lowerWidth:a,height:u,x:n,y:r},duration:g,animationEasing:v,isActive:_},(function(e){var n=e.upperWidth,r=e.lowerWidth,i=e.height,a=e.x,u=e.y;return c.default.createElement(h.default,{canBegin:l>0,from:"0px "+(-1===l?1:l)+"px",to:l+"px 0px",attributeName:"strokeDasharray",begin:m,duration:g,easing:v},c.default.createElement("path",o({},p.filterProps(t.props,!0),{className:b,d:d(a,u,n,r,i),ref:function(e){t.node=e}})))})):c.default.createElement("g",null,c.default.createElement("path",o({},p.filterProps(this.props,!0),{className:b,d:d(n,r,i,a,u)})))},e.defaultProps={x:0,y:0,upperWidth:0,lowerWidth:0,height:0,isUpdateAnimationActive:!1,animationBegin:0,animationDuration:1500,animationEasing:"ease"},e}(c.PureComponent);e.Trapezoid=y},function(t,e,n){"use strict";n.r(e),n.d(e,"scaleBand",(function(){return s})),n.d(e,"scalePoint",(function(){return c})),n.d(e,"scaleIdentity",(function(){return Wt})),n.d(e,"scaleLinear",(function(){return Vt})),n.d(e,"scaleLog",(function(){return Zt})),n.d(e,"scaleSymlog",(function(){return ee})),n.d(e,"scaleOrdinal",(function(){return u})),n.d(e,"scaleImplicit",(function(){return a})),n.d(e,"scalePow",(function(){return ae})),n.d(e,"scaleSqrt",(function(){return ue})),n.d(e,"scaleRadial",(function(){return ce})),n.d(e,"scaleQuantile",(function(){return ve})),n.d(e,"scaleQuantize",(function(){return ge})),n.d(e,"scaleThreshold",(function(){return me})),n.d(e,"scaleTime",(function(){return kr})),n.d(e,"scaleUtc",(function(){return Lr})),n.d(e,"scaleSequential",(function(){return zr})),n.d(e,"scaleSequentialLog",(function(){return Fr})),n.d(e,"scaleSequentialPow",(function(){return Wr})),n.d(e,"scaleSequentialSqrt",(function(){return Ur})),n.d(e,"scaleSequentialSymlog",(function(){return Vr})),n.d(e,"scaleSequentialQuantile",(function(){return qr})),n.d(e,"scaleDiverging",(function(){return Kr})),n.d(e,"scaleDivergingLog",(function(){return Xr})),n.d(e,"scaleDivergingPow",(function(){return $r})),n.d(e,"scaleDivergingSqrt",(function(){return Zr})),n.d(e,"scaleDivergingSymlog",(function(){return Yr})),n.d(e,"tickFormat",(function(){return zt}));var r=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o};function i(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function o(t,e){switch(arguments.length){case 0:break;case 1:"function"==typeof t?this.interpolator(t):this.range(t);break;default:this.domain(t),"function"==typeof e?this.interpolator(e):this.range(e)}return this}const a=Symbol("implicit");function u(){var t=new Map,e=[],n=[],r=a;function o(i){var o=i+"",u=t.get(o);if(!u){if(r!==a)return r;t.set(o,u=e.push(i))}return n[(u-1)%n.length]}return o.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new Map;for(const r of n){const n=r+"";t.has(n)||t.set(n,e.push(r))}return o},o.range=function(t){return arguments.length?(n=Array.from(t),o):n.slice()},o.unknown=function(t){return arguments.length?(r=t,o):r},o.copy=function(){return u(e,n).unknown(r)},i.apply(o,arguments),o}function s(){var t,e,n=u().unknown(void 0),o=n.domain,a=n.range,l=0,c=1,f=!1,h=0,p=0,d=.5;function y(){var n=o().length,i=c<l,u=i?c:l,s=i?l:c;t=(s-u)/Math.max(1,n-h+2*p),f&&(t=Math.floor(t)),u+=(s-u-t*(n-h))*d,e=t*(1-h),f&&(u=Math.round(u),e=Math.round(e));var y=r(n).map((function(e){return u+t*e}));return a(i?y.reverse():y)}return delete n.unknown,n.domain=function(t){return arguments.length?(o(t),y()):o()},n.range=function(t){return arguments.length?([l,c]=t,l=+l,c=+c,y()):[l,c]},n.rangeRound=function(t){return[l,c]=t,l=+l,c=+c,f=!0,y()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(f=!!t,y()):f},n.padding=function(t){return arguments.length?(h=Math.min(1,p=+t),y()):h},n.paddingInner=function(t){return arguments.length?(h=Math.min(1,t),y()):h},n.paddingOuter=function(t){return arguments.length?(p=+t,y()):p},n.align=function(t){return arguments.length?(d=Math.max(0,Math.min(1,t)),y()):d},n.copy=function(){return s(o(),[l,c]).round(f).paddingInner(h).paddingOuter(p).align(d)},i.apply(y(),arguments)}function l(t){var e=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return l(e())},t}function c(){return l(s.apply(null,arguments).paddingInner(1))}var f=Math.sqrt(50),h=Math.sqrt(10),p=Math.sqrt(2),d=function(t,e,n){var r,i,o,a,u=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=y(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++u<i;)o[u]=(t+u)*a;else for(a=-a,t=Math.ceil(t*a),e=Math.floor(e*a),o=new Array(i=Math.ceil(e-t+1));++u<i;)o[u]=(t+u)/a;return r&&o.reverse(),o};function y(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=f?10:o>=h?5:o>=p?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=f?10:o>=h?5:o>=p?2:1)}function v(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=f?i*=10:o>=h?i*=5:o>=p&&(i*=2),e<t?-i:i}var g=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},m=function(t){let e=t,n=t;function r(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const o=r+i>>>1;n(t[o],e)<0?r=o+1:i=o}return r}return 1===t.length&&(e=(e,n)=>t(e)-n,n=function(t){return(e,n)=>g(t(e),n)}(t)),{left:r,center:function(t,n,i,o){null==i&&(i=0),null==o&&(o=t.length);const a=r(t,n,i,o-1);return a>i&&e(t[a-1],n)>-e(t[a],n)?a-1:a},right:function(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const o=r+i>>>1;n(t[o],e)>0?i=o:r=o+1}return r}}};var _=function(t){return null===t?NaN:+t};const b=m(g),x=b.right;b.left,m(_).center;var O=x,w=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function A(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function E(){}var M="\\s*([+-]?\\d+)\\s*",P="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",S="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",k=/^#([0-9a-f]{3,8})$/,C=new RegExp("^rgb\\("+[M,M,M]+"\\)$"),j=new RegExp("^rgb\\("+[S,S,S]+"\\)$"),T=new RegExp("^rgba\\("+[M,M,M,P]+"\\)$"),N=new RegExp("^rgba\\("+[S,S,S,P]+"\\)$"),D=new RegExp("^hsl\\("+[P,S,S]+"\\)$"),I=new RegExp("^hsla\\("+[P,S,S,P]+"\\)$"),L={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function R(){return this.rgb().formatHex()}function B(){return this.rgb().formatRgb()}function z(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=k.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?F(e):3===n?new q(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?V(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?V(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=C.exec(t))?new q(e[1],e[2],e[3],1):(e=j.exec(t))?new q(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=T.exec(t))?V(e[1],e[2],e[3],e[4]):(e=N.exec(t))?V(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=D.exec(t))?X(e[1],e[2]/100,e[3]/100,1):(e=I.exec(t))?X(e[1],e[2]/100,e[3]/100,e[4]):L.hasOwnProperty(t)?F(L[t]):"transparent"===t?new q(NaN,NaN,NaN,0):null}function F(t){return new q(t>>16&255,t>>8&255,255&t,1)}function V(t,e,n,r){return r<=0&&(t=e=n=NaN),new q(t,e,n,r)}function W(t){return t instanceof E||(t=z(t)),t?new q((t=t.rgb()).r,t.g,t.b,t.opacity):new q}function U(t,e,n,r){return 1===arguments.length?W(t):new q(t,e,n,null==r?1:r)}function q(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function G(){return"#"+K(this.r)+K(this.g)+K(this.b)}function H(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function K(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function X(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new $(t,e,n,r)}function Y(t){if(t instanceof $)return new $(t.h,t.s,t.l,t.opacity);if(t instanceof E||(t=z(t)),!t)return new $;if(t instanceof $)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=e===o?(n-r)/u+6*(n<r):n===o?(r-e)/u+2:(e-n)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new $(a,u,s,t.opacity)}function $(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Z(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function J(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}w(E,z,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:R,formatHex:R,formatHsl:function(){return Y(this).formatHsl()},formatRgb:B,toString:B}),w(q,U,A(E,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new q(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new q(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:G,formatHex:G,formatRgb:H,toString:H})),w($,(function(t,e,n,r){return 1===arguments.length?Y(t):new $(t,e,n,null==r?1:r)}),A(E,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new $(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new $(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new q(Z(t>=240?t-240:t+120,i,r),Z(t,i,r),Z(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Q=t=>()=>t;function tt(t,e){return function(n){return t+n*e}}function et(t){return 1==(t=+t)?nt:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Q(isNaN(e)?n:e)}}function nt(t,e){var n=e-t;return n?tt(t,n):Q(isNaN(t)?e:t)}var rt=function t(e){var n=et(e);function r(t,e){var r=n((t=U(t)).r,(e=U(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=nt(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function it(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),u=new Array(i);for(n=0;n<i;++n)r=U(e[n]),o[n]=r.r||0,a[n]=r.g||0,u[n]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}it((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<e-1?t[r+2]:2*o-i;return J((n-r/e)*e,a,i,o,u)}})),it((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],u=t[(r+2)%e];return J((n-r/e)*e,i,o,a,u)}}));var ot=function(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}};function at(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function ut(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=dt(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}var st=function(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}},lt=function(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}},ct=function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=dt(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},ft=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ht=new RegExp(ft.source,"g");var pt=function(t,e){var n,r,i,o=ft.lastIndex=ht.lastIndex=0,a=-1,u=[],s=[];for(t+="",e+="";(n=ft.exec(t))&&(r=ht.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:lt(n,r)})),o=ht.lastIndex;return o<e.length&&(i=e.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)u[(n=s[r]).i]=n.x(t);return u.join("")})},dt=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?Q(e):("number"===r?lt:"string"===r?(n=z(e))?(e=n,rt):pt:e instanceof z?rt:e instanceof Date?st:at(e)?ot:Array.isArray(e)?ut:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?ct:lt)(t,e)},yt=function(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}};function vt(t){return+t}var gt=[0,1];function mt(t){return t}function _t(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function bt(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=_t(i,r),o=n(a,o)):(r=_t(r,i),o=n(o,a)),function(t){return o(r(t))}}function xt(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=_t(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=O(t,e,1,r)-1;return o[n](i[n](e))}}function Ot(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function wt(){var t,e,n,r,i,o,a=gt,u=gt,s=dt,l=mt;function c(){var t,e,n,s=Math.min(a.length,u.length);return l!==mt&&(t=a[0],e=a[s-1],t>e&&(n=t,t=e,e=n),l=function(n){return Math.max(t,Math.min(e,n))}),r=s>2?xt:bt,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),u,s)))(t(l(e)))}return f.invert=function(n){return l(e((o||(o=r(u,a.map(t),lt)))(n)))},f.domain=function(t){return arguments.length?(a=Array.from(t,vt),c()):a.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),c()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),s=yt,c()},f.clamp=function(t){return arguments.length?(l=!!t||mt,c()):l!==mt},f.interpolate=function(t){return arguments.length?(s=t,c()):s},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function At(){return wt()(mt,mt)}var Et=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Mt(t){if(!(e=Et.exec(t)))throw new Error("invalid format: "+t);var e;return new Pt({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Pt(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Mt.prototype=Pt.prototype,Pt.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};function St(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}var kt,Ct,jt,Tt,Nt=function(t){return(t=St(Math.abs(t)))?t[1]:NaN},Dt=function(t,e){var n=St(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},It={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>Dt(100*t,e),r:Dt,s:function(t,e){var n=St(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(kt=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+St(t,Math.max(0,e+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)},Lt=function(t){return t},Rt=Array.prototype.map,Bt=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Ct=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Lt:(e=Rt.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=e[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?Lt:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Rt.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=Mt(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,y=t.comma,v=t.precision,g=t.trim,m=t.type;"n"===m?(y=!0,m="g"):It[m]||(void 0===v&&(v=12),g=!0,m="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",b="$"===h?o:/[%p]/.test(m)?s:"",x=It[m],O=/[defgprs%]/.test(m);function w(t){var i,o,s,h=_,w=b;if("c"===m)w=x(t)+w,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:x(Math.abs(t),v),g&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),A&&0==+t&&"+"!==f&&(A=!1),h=(A?"("===f?f:l:"-"===f||"("===f?"":f)+h,w=("s"===m?Bt[8+kt/3]:"")+w+(A&&"("===f?")":""),O)for(i=-1,o=t.length;++i<o;)if(48>(s=t.charCodeAt(i))||s>57){w=(46===s?a+t.slice(i+1):t.slice(i))+w,t=t.slice(0,i);break}}y&&!p&&(t=r(t,1/0));var E=h.length+t.length+w.length,M=E<d?new Array(d-E+1).join(e):"";switch(y&&p&&(t=r(M+t,M.length?d-w.length:1/0),M=""),n){case"<":t=h+t+w+M;break;case"=":t=h+M+t+w;break;case"^":t=M.slice(0,E=M.length>>1)+h+t+w+M.slice(E);break;default:t=M+h+t+w}return u(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),w.toString=function(){return t+""},w}return{format:f,formatPrefix:function(t,e){var n=f(((t=Mt(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Nt(e)/3))),i=Math.pow(10,-r),o=Bt[8+r/3];return function(t){return n(i*t)+o}}}}({thousands:",",grouping:[3],currency:["$",""]}),jt=Ct.format,Tt=Ct.formatPrefix;function zt(t,e,n,r){var i,o=v(t,e,n);switch((r=Mt(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Nt(e)/3)))-Nt(Math.abs(t)))}(o,a))||(r.precision=i),Tt(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Nt(e)-Nt(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Nt(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return jt(r)}function Ft(t){var e=t.domain;return t.ticks=function(t){var n=e();return d(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return zt(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i,o=e(),a=0,u=o.length-1,s=o[a],l=o[u],c=10;for(l<s&&(i=s,s=l,l=i,i=a,a=u,u=i);c-- >0;){if((i=y(s,l,n))===r)return o[a]=s,o[u]=l,e(o);if(i>0)s=Math.floor(s/i)*i,l=Math.ceil(l/i)*i;else{if(!(i<0))break;s=Math.ceil(s*i)/i,l=Math.floor(l*i)/i}r=i}return t},t}function Vt(){var t=At();return t.copy=function(){return Ot(t,Vt())},i.apply(t,arguments),Ft(t)}function Wt(t){var e;function n(t){return isNaN(t=+t)?e:t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=Array.from(e,vt),n):t.slice()},n.unknown=function(t){return arguments.length?(e=t,n):e},n.copy=function(){return Wt(t).unknown(e)},t=arguments.length?Array.from(t,vt):[0,1],Ft(n)}function Ut(t,e){var n,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),t[r]=e.floor(o),t[i]=e.ceil(a),t}function qt(t){return Math.log(t)}function Gt(t){return Math.exp(t)}function Ht(t){return-Math.log(-t)}function Kt(t){return-Math.exp(-t)}function Xt(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Yt(t){return function(e){return-t(-e)}}function $t(t){var e,n,r=t(qt,Gt),i=r.domain,o=10;function a(){return e=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})}(o),n=function(t){return 10===t?Xt:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}}(o),i()[0]<0?(e=Yt(e),n=Yt(n),t(Ht,Kt)):t(qt,Gt),r}return r.base=function(t){return arguments.length?(o=+t,a()):o},r.domain=function(t){return arguments.length?(i(t),a()):i()},r.ticks=function(t){var r,a=i(),u=a[0],s=a[a.length-1];(r=s<u)&&(h=u,u=s,s=h);var l,c,f,h=e(u),p=e(s),y=null==t?10:+t,v=[];if(!(o%1)&&p-h<y){if(h=Math.floor(h),p=Math.ceil(p),u>0){for(;h<=p;++h)for(c=1,l=n(h);c<o;++c)if(!((f=l*c)<u)){if(f>s)break;v.push(f)}}else for(;h<=p;++h)for(c=o-1,l=n(h);c>=1;--c)if(!((f=l*c)<u)){if(f>s)break;v.push(f)}2*v.length<y&&(v=d(u,s,y))}else v=d(h,p,Math.min(p-h,y)).map(n);return r?v.reverse():v},r.tickFormat=function(t,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=jt(i)),t===1/0)return i;null==t&&(t=10);var a=Math.max(1,o*t/r.ticks().length);return function(t){var r=t/n(Math.round(e(t)));return r*o<o-.5&&(r*=o),r<=a?i(t):""}},r.nice=function(){return i(Ut(i(),{floor:function(t){return n(Math.floor(e(t)))},ceil:function(t){return n(Math.ceil(e(t)))}}))},r}function Zt(){var t=$t(wt()).domain([1,10]);return t.copy=function(){return Ot(t,Zt()).base(t.base())},i.apply(t,arguments),t}function Jt(t){return function(e){return Math.sign(e)*Math.log1p(Math.abs(e/t))}}function Qt(t){return function(e){return Math.sign(e)*Math.expm1(Math.abs(e))*t}}function te(t){var e=1,n=t(Jt(e),Qt(e));return n.constant=function(n){return arguments.length?t(Jt(e=+n),Qt(e)):e},Ft(n)}function ee(){var t=te(wt());return t.copy=function(){return Ot(t,ee()).constant(t.constant())},i.apply(t,arguments)}function ne(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function re(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function ie(t){return t<0?-t*t:t*t}function oe(t){var e=t(mt,mt),n=1;function r(){return 1===n?t(mt,mt):.5===n?t(re,ie):t(ne(n),ne(1/n))}return e.exponent=function(t){return arguments.length?(n=+t,r()):n},Ft(e)}function ae(){var t=oe(wt());return t.copy=function(){return Ot(t,ae()).exponent(t.exponent())},i.apply(t,arguments),t}function ue(){return ae.apply(null,arguments).exponent(.5)}function se(t){return Math.sign(t)*t*t}function le(t){return Math.sign(t)*Math.sqrt(Math.abs(t))}function ce(){var t,e=At(),n=[0,1],r=!1;function o(n){var i=le(e(n));return isNaN(i)?t:r?Math.round(i):i}return o.invert=function(t){return e.invert(se(t))},o.domain=function(t){return arguments.length?(e.domain(t),o):e.domain()},o.range=function(t){return arguments.length?(e.range((n=Array.from(t,vt)).map(se)),o):n.slice()},o.rangeRound=function(t){return o.range(t).round(!0)},o.round=function(t){return arguments.length?(r=!!t,o):r},o.clamp=function(t){return arguments.length?(e.clamp(t),o):e.clamp()},o.unknown=function(e){return arguments.length?(t=e,o):t},o.copy=function(){return ce(e.domain(),n).round(r).clamp(e.clamp()).unknown(t)},i.apply(o,arguments),Ft(o)}function fe(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n<i||void 0===n&&i>=i)&&(n=i)}return n}function he(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n>i||void 0===n&&i>=i)&&(n=i)}return n}function pe(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function de(t,e,n){if(r=(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}}(t,n))).length){if((e=+e)<=0||r<2)return he(t);if(e>=1)return fe(t);var r,i=(r-1)*e,o=Math.floor(i),a=fe(function t(e,n,r=0,i=e.length-1,o=g){for(;i>r;){if(i-r>600){const a=i-r+1,u=n-r+1,s=Math.log(a),l=.5*Math.exp(2*s/3),c=.5*Math.sqrt(s*l*(a-l)/a)*(u-a/2<0?-1:1);t(e,n,Math.max(r,Math.floor(n-u*l/a+c)),Math.min(i,Math.floor(n+(a-u)*l/a+c)),o)}const a=e[n];let u=r,s=i;for(pe(e,r,n),o(e[i],a)>0&&pe(e,r,i);u<s;){for(pe(e,u,s),++u,--s;o(e[u],a)<0;)++u;for(;o(e[s],a)>0;)--s}0===o(e[r],a)?pe(e,r,s):(++s,pe(e,s,i)),s<=n&&(r=s+1),n<=s&&(i=s-1)}return e}(t,o).subarray(0,o+1));return a+(he(t.subarray(o+1))-a)*(i-o)}}function ye(t,e,n=_){if(r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,o=Math.floor(i),a=+n(t[o],o,t);return a+(+n(t[o+1],o+1,t)-a)*(i-o)}}function ve(){var t,e=[],n=[],r=[];function o(){var t=0,i=Math.max(1,n.length);for(r=new Array(i-1);++t<i;)r[t-1]=ye(e,t/i);return a}function a(e){return isNaN(e=+e)?t:n[O(r,e)]}return a.invertExtent=function(t){var i=n.indexOf(t);return i<0?[NaN,NaN]:[i>0?r[i-1]:e[0],i<r.length?r[i]:e[e.length-1]]},a.domain=function(t){if(!arguments.length)return e.slice();e=[];for(let n of t)null==n||isNaN(n=+n)||e.push(n);return e.sort(g),o()},a.range=function(t){return arguments.length?(n=Array.from(t),o()):n.slice()},a.unknown=function(e){return arguments.length?(t=e,a):t},a.quantiles=function(){return r.slice()},a.copy=function(){return ve().domain(e).range(n).unknown(t)},i.apply(a,arguments)}function ge(){var t,e=0,n=1,r=1,o=[.5],a=[0,1];function u(e){return e<=e?a[O(o,e,0,r)]:t}function s(){var t=-1;for(o=new Array(r);++t<r;)o[t]=((t+1)*n-(t-r)*e)/(r+1);return u}return u.domain=function(t){return arguments.length?([e,n]=t,e=+e,n=+n,s()):[e,n]},u.range=function(t){return arguments.length?(r=(a=Array.from(t)).length-1,s()):a.slice()},u.invertExtent=function(t){var i=a.indexOf(t);return i<0?[NaN,NaN]:i<1?[e,o[0]]:i>=r?[o[r-1],n]:[o[i-1],o[i]]},u.unknown=function(e){return arguments.length?(t=e,u):u},u.thresholds=function(){return o.slice()},u.copy=function(){return ge().domain([e,n]).range(a).unknown(t)},i.apply(Ft(u),arguments)}function me(){var t,e=[.5],n=[0,1],r=1;function o(i){return i<=i?n[O(e,i,0,r)]:t}return o.domain=function(t){return arguments.length?(e=Array.from(t),r=Math.min(e.length,n.length-1),o):e.slice()},o.range=function(t){return arguments.length?(n=Array.from(t),r=Math.min(e.length,n.length-1),o):n.slice()},o.invertExtent=function(t){var r=n.indexOf(t);return[e[r-1],e[r]]},o.unknown=function(e){return arguments.length?(t=e,o):t},o.copy=function(){return me().domain(e).range(n).unknown(t)},i.apply(o,arguments)}var _e=new Date,be=new Date;function xe(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var a,u=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return u;do{u.push(a=new Date(+n)),e(n,o),t(n)}while(a<n&&n<r);return u},i.filter=function(n){return xe((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return _e.setTime(+e),be.setTime(+r),t(_e),t(be),Math.floor(n(_e,be))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var Oe=xe((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Oe.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xe((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var we=Oe,Ae=(Oe.range,xe((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),Ee=Ae;Ae.range;function Me(t){return xe((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Pe=Me(0),Se=Me(1),ke=Me(2),Ce=Me(3),je=Me(4),Te=Me(5),Ne=Me(6),De=(Pe.range,Se.range,ke.range,Ce.range,je.range,Te.range,Ne.range,xe(t=>t.setHours(0,0,0,0),(t,e)=>t.setDate(t.getDate()+e),(t,e)=>(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5,t=>t.getDate()-1)),Ie=De,Le=(De.range,xe((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),Re=Le,Be=(Le.range,xe((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()}))),ze=Be,Fe=(Be.range,xe((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Ve=Fe,We=(Fe.range,xe((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t})));We.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?xe((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):We:null};var Ue=We;We.range;function qe(t){return xe((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var Ge=qe(0),He=qe(1),Ke=qe(2),Xe=qe(3),Ye=qe(4),$e=qe(5),Ze=qe(6),Je=(Ge.range,He.range,Ke.range,Xe.range,Ye.range,$e.range,Ze.range,xe((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Qe=Je,tn=(Je.range,xe((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));tn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xe((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var en=tn;tn.range;function nn(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function rn(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function on(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var an,un,sn,ln={"-":"",_:" ",0:"0"},cn=/^\s*\d+/,fn=/^%/,hn=/[\\^$*+?|[\]().{}]/g;function pn(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function dn(t){return t.replace(hn,"\\$&")}function yn(t){return new RegExp("^(?:"+t.map(dn).join("|")+")","i")}function vn(t){return new Map(t.map((t,e)=>[t.toLowerCase(),e]))}function gn(t,e,n){var r=cn.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function mn(t,e,n){var r=cn.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function _n(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function bn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function xn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function On(t,e,n){var r=cn.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function wn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function An(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function En(t,e,n){var r=cn.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function Mn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Pn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Sn(t,e,n){var r=cn.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function kn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Cn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function jn(t,e,n){var r=cn.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Tn(t,e,n){var r=cn.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Nn(t,e,n){var r=cn.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Dn(t,e,n){var r=fn.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function In(t,e,n){var r=cn.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Ln(t,e,n){var r=cn.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function Rn(t,e){return pn(t.getDate(),e,2)}function Bn(t,e){return pn(t.getHours(),e,2)}function zn(t,e){return pn(t.getHours()%12||12,e,2)}function Fn(t,e){return pn(1+Ie.count(we(t),t),e,3)}function Vn(t,e){return pn(t.getMilliseconds(),e,3)}function Wn(t,e){return Vn(t,e)+"000"}function Un(t,e){return pn(t.getMonth()+1,e,2)}function qn(t,e){return pn(t.getMinutes(),e,2)}function Gn(t,e){return pn(t.getSeconds(),e,2)}function Hn(t){var e=t.getDay();return 0===e?7:e}function Kn(t,e){return pn(Pe.count(we(t)-1,t),e,2)}function Xn(t){var e=t.getDay();return e>=4||0===e?je(t):je.ceil(t)}function Yn(t,e){return t=Xn(t),pn(je.count(we(t),t)+(4===we(t).getDay()),e,2)}function $n(t){return t.getDay()}function Zn(t,e){return pn(Se.count(we(t)-1,t),e,2)}function Jn(t,e){return pn(t.getFullYear()%100,e,2)}function Qn(t,e){return pn((t=Xn(t)).getFullYear()%100,e,2)}function tr(t,e){return pn(t.getFullYear()%1e4,e,4)}function er(t,e){var n=t.getDay();return pn((t=n>=4||0===n?je(t):je.ceil(t)).getFullYear()%1e4,e,4)}function nr(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+pn(e/60|0,"0",2)+pn(e%60,"0",2)}function rr(t,e){return pn(t.getUTCDate(),e,2)}function ir(t,e){return pn(t.getUTCHours(),e,2)}function or(t,e){return pn(t.getUTCHours()%12||12,e,2)}function ar(t,e){return pn(1+Qe.count(en(t),t),e,3)}function ur(t,e){return pn(t.getUTCMilliseconds(),e,3)}function sr(t,e){return ur(t,e)+"000"}function lr(t,e){return pn(t.getUTCMonth()+1,e,2)}function cr(t,e){return pn(t.getUTCMinutes(),e,2)}function fr(t,e){return pn(t.getUTCSeconds(),e,2)}function hr(t){var e=t.getUTCDay();return 0===e?7:e}function pr(t,e){return pn(Ge.count(en(t)-1,t),e,2)}function dr(t){var e=t.getUTCDay();return e>=4||0===e?Ye(t):Ye.ceil(t)}function yr(t,e){return t=dr(t),pn(Ye.count(en(t),t)+(4===en(t).getUTCDay()),e,2)}function vr(t){return t.getUTCDay()}function gr(t,e){return pn(He.count(en(t)-1,t),e,2)}function mr(t,e){return pn(t.getUTCFullYear()%100,e,2)}function _r(t,e){return pn((t=dr(t)).getUTCFullYear()%100,e,2)}function br(t,e){return pn(t.getUTCFullYear()%1e4,e,4)}function xr(t,e){var n=t.getUTCDay();return pn((t=n>=4||0===n?Ye(t):Ye.ceil(t)).getUTCFullYear()%1e4,e,4)}function Or(){return"+0000"}function wr(){return"%"}function Ar(t){return+t}function Er(t){return Math.floor(+t/1e3)}!function(t){an=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,s=t.shortMonths,l=yn(i),c=vn(i),f=yn(o),h=vn(o),p=yn(a),d=vn(a),y=yn(u),v=vn(u),g=yn(s),m=vn(s),_={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:Rn,e:Rn,f:Wn,g:Qn,G:er,H:Bn,I:zn,j:Fn,L:Vn,m:Un,M:qn,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Ar,s:Er,S:Gn,u:Hn,U:Kn,V:Yn,w:$n,W:Zn,x:null,X:null,y:Jn,Y:tr,Z:nr,"%":wr},b={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:rr,e:rr,f:sr,g:_r,G:xr,H:ir,I:or,j:ar,L:ur,m:lr,M:cr,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Ar,s:Er,S:fr,u:hr,U:pr,V:yr,w:vr,W:gr,x:null,X:null,y:mr,Y:br,Z:Or,"%":wr},x={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=d.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=m.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=v.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,n,r){return A(t,e,n,r)},d:Pn,e:Pn,f:Nn,g:wn,G:On,H:kn,I:kn,j:Sn,L:Tn,m:Mn,M:Cn,p:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.p=c.get(r[0].toLowerCase()),n+r[0].length):-1},q:En,Q:In,s:Ln,S:jn,u:mn,U:_n,V:bn,w:gn,W:xn,x:function(t,e,r){return A(t,n,e,r)},X:function(t,e,n){return A(t,r,e,n)},y:wn,Y:On,Z:An,"%":Dn};function O(t,e){return function(n){var r,i,o,a=[],u=-1,s=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++u<l;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=ln[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function w(t,e){return function(n){var r,i,o=on(1900,void 0,1);if(A(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(e&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=rn(on(o.y,0,1))).getUTCDay(),r=i>4||0===i?He.ceil(r):He(r),r=Qe.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=nn(on(o.y,0,1))).getDay(),r=i>4||0===i?Se.ceil(r):Se(r),r=Ie.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?rn(on(o.y,0,1)).getUTCDay():nn(on(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,rn(o)):nn(o)}}function A(t,e,n,r){for(var i,o,a=0,u=e.length,s=n.length;a<u;){if(r>=s)return-1;if(37===(i=e.charCodeAt(a++))){if(i=e.charAt(a++),!(o=x[i in ln?e.charAt(a++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return _.x=O(n,_),_.X=O(r,_),_.c=O(e,_),b.x=O(n,b),b.X=O(r,b),b.c=O(e,b),{format:function(t){var e=O(t+="",_);return e.toString=function(){return t},e},parse:function(t){var e=w(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=O(t+="",b);return e.toString=function(){return t},e},utcParse:function(t){var e=w(t+="",!0);return e.toString=function(){return t},e}}}(t),un=an.format,an.parse,sn=an.utcFormat,an.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function Mr(t){return new Date(t)}function Pr(t){return t instanceof Date?+t:+new Date(+t)}function Sr(t,e,n,r,i,o,a,u,s){var l=At(),c=l.invert,f=l.domain,h=s(".%L"),p=s(":%S"),d=s("%I:%M"),y=s("%I %p"),g=s("%a %d"),_=s("%b %d"),b=s("%B"),x=s("%Y"),O=[[a,1,1e3],[a,5,5e3],[a,15,15e3],[a,30,3e4],[o,1,6e4],[o,5,3e5],[o,15,9e5],[o,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[n,1,6048e5],[e,1,2592e6],[e,3,7776e6],[t,1,31536e6]];function w(u){return(a(u)<u?h:o(u)<u?p:i(u)<u?d:r(u)<u?y:e(u)<u?n(u)<u?g:_:t(u)<u?b:x)(u)}function A(e,n,r){if(null==e&&(e=10),"number"==typeof e){var i,o=Math.abs(r-n)/e,a=m((function(t){return t[2]})).right(O,o);return a===O.length?(i=v(n/31536e6,r/31536e6,e),e=t):a?(i=(a=O[o/O[a-1][2]<O[a][2]/o?a-1:a])[1],e=a[0]):(i=Math.max(v(n,r,e),1),e=u),e.every(i)}return e}return l.invert=function(t){return new Date(c(t))},l.domain=function(t){return arguments.length?f(Array.from(t,Pr)):f().map(Mr)},l.ticks=function(t){var e,n=f(),r=n[0],i=n[n.length-1],o=i<r;return o&&(e=r,r=i,i=e),e=(e=A(t,r,i))?e.range(r,i+1):[],o?e.reverse():e},l.tickFormat=function(t,e){return null==e?w:s(e)},l.nice=function(t){var e=f();return(t=A(t,e[0],e[e.length-1]))?f(Ut(e,t)):l},l.copy=function(){return Ot(l,Sr(t,e,n,r,i,o,a,u,s))},l}function kr(){return i.apply(Sr(we,Ee,Pe,Ie,Re,ze,Ve,Ue,un).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}var Cr=xe((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),jr=Cr,Tr=(Cr.range,xe((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),Nr=Tr,Dr=(Tr.range,xe((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()}))),Ir=Dr;Dr.range;function Lr(){return i.apply(Sr(en,jr,Ge,Qe,Nr,Ir,Ve,Ue,sn).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}function Rr(){var t,e,n,r,i,o=0,a=1,u=mt,s=!1;function l(e){return isNaN(e=+e)?i:u(0===n?.5:(e=(r(e)-t)*n,s?Math.max(0,Math.min(1,e)):e))}function c(t){return function(e){var n,r;return arguments.length?([n,r]=e,u=t(n,r),l):[u(0),u(1)]}}return l.domain=function(i){return arguments.length?([o,a]=i,t=r(o=+o),e=r(a=+a),n=t===e?0:1/(e-t),l):[o,a]},l.clamp=function(t){return arguments.length?(s=!!t,l):s},l.interpolator=function(t){return arguments.length?(u=t,l):u},l.range=c(dt),l.rangeRound=c(yt),l.unknown=function(t){return arguments.length?(i=t,l):i},function(i){return r=i,t=i(o),e=i(a),n=t===e?0:1/(e-t),l}}function Br(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function zr(){var t=Ft(Rr()(mt));return t.copy=function(){return Br(t,zr())},o.apply(t,arguments)}function Fr(){var t=$t(Rr()).domain([1,10]);return t.copy=function(){return Br(t,Fr()).base(t.base())},o.apply(t,arguments)}function Vr(){var t=te(Rr());return t.copy=function(){return Br(t,Vr()).constant(t.constant())},o.apply(t,arguments)}function Wr(){var t=oe(Rr());return t.copy=function(){return Br(t,Wr()).exponent(t.exponent())},o.apply(t,arguments)}function Ur(){return Wr.apply(null,arguments).exponent(.5)}function qr(){var t=[],e=mt;function n(n){if(!isNaN(n=+n))return e((O(t,n,1)-1)/(t.length-1))}return n.domain=function(e){if(!arguments.length)return t.slice();t=[];for(let n of e)null==n||isNaN(n=+n)||t.push(n);return t.sort(g),n},n.interpolator=function(t){return arguments.length?(e=t,n):e},n.range=function(){return t.map((n,r)=>e(r/(t.length-1)))},n.quantiles=function(e){return Array.from({length:e+1},(n,r)=>de(t,r/e))},n.copy=function(){return qr(e).domain(t)},o.apply(n,arguments)}function Gr(t,e){void 0===e&&(e=t,t=dt);for(var n=0,r=e.length-1,i=e[0],o=new Array(r<0?0:r);n<r;)o[n]=t(i,i=e[++n]);return function(t){var e=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[e](t-e)}}function Hr(){var t,e,n,r,i,o,a,u=0,s=.5,l=1,c=1,f=mt,h=!1;function p(t){return isNaN(t=+t)?a:(t=.5+((t=+o(t))-e)*(c*t<c*e?r:i),f(h?Math.max(0,Math.min(1,t)):t))}function d(t){return function(e){var n,r,i;return arguments.length?([n,r,i]=e,f=Gr(t,[n,r,i]),p):[f(0),f(.5),f(1)]}}return p.domain=function(a){return arguments.length?([u,s,l]=a,t=o(u=+u),e=o(s=+s),n=o(l=+l),r=t===e?0:.5/(e-t),i=e===n?0:.5/(n-e),c=e<t?-1:1,p):[u,s,l]},p.clamp=function(t){return arguments.length?(h=!!t,p):h},p.interpolator=function(t){return arguments.length?(f=t,p):f},p.range=d(dt),p.rangeRound=d(yt),p.unknown=function(t){return arguments.length?(a=t,p):a},function(a){return o=a,t=a(u),e=a(s),n=a(l),r=t===e?0:.5/(e-t),i=e===n?0:.5/(n-e),c=e<t?-1:1,p}}function Kr(){var t=Ft(Hr()(mt));return t.copy=function(){return Br(t,Kr())},o.apply(t,arguments)}function Xr(){var t=$t(Hr()).domain([.1,1,10]);return t.copy=function(){return Br(t,Xr()).base(t.base())},o.apply(t,arguments)}function Yr(){var t=te(Hr());return t.copy=function(){return Br(t,Yr()).constant(t.constant())},o.apply(t,arguments)}function $r(){var t=oe(Hr());return t.copy=function(){return Br(t,$r()).exponent(t.exponent())},o.apply(t,arguments)}function Zr(){return $r.apply(null,arguments).exponent(.5)}},function(t,e,n){var r=n(57);t.exports=function(t,e){return r(t,e)}},function(t,e,n){var r=n(63),i=n(181),o=n(188),a=n(196),u=o((function(t){var e=r(t,a);return e.length&&e[0]===t[0]?i(e):[]}));t.exports=u},function(t,e,n){var r=n(83),i=n(198),o=n(204),a=n(14);t.exports=function(t,e){return(a(t)?r:i)(t,o(e,3))}},function(t,e,n){"use strict";(function(t){var n=function(){if("undefined"!=typeof Map)return Map;function t(t,e){var n=-1;return t.some((function(t,r){return t[0]===e&&(n=r,!0)})),n}return function(){function e(){this.__entries__=[]}return Object.defineProperty(e.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),e.prototype.get=function(e){var n=t(this.__entries__,e),r=this.__entries__[n];return r&&r[1]},e.prototype.set=function(e,n){var r=t(this.__entries__,e);~r?this.__entries__[r][1]=n:this.__entries__.push([e,n])},e.prototype.delete=function(e){var n=this.__entries__,r=t(n,e);~r&&n.splice(r,1)},e.prototype.has=function(e){return!!~t(this.__entries__,e)},e.prototype.clear=function(){this.__entries__.splice(0)},e.prototype.forEach=function(t,e){void 0===e&&(e=null);for(var n=0,r=this.__entries__;n<r.length;n++){var i=r[n];t.call(e,i[1],i[0])}},e}()}(),r="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,i=void 0!==t&&t.Math===Math?t:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),o="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(i):function(t){return setTimeout((function(){return t(Date.now())}),1e3/60)};var a=["top","right","bottom","left","width","height","size","weight"],u="undefined"!=typeof MutationObserver,s=function(){function t(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(t,e){var n=!1,r=!1,i=0;function a(){n&&(n=!1,t()),r&&s()}function u(){o(a)}function s(){var t=Date.now();if(n){if(t-i<2)return;r=!0}else n=!0,r=!1,setTimeout(u,e);i=t}return s}(this.refresh.bind(this),20)}return t.prototype.addObserver=function(t){~this.observers_.indexOf(t)||this.observers_.push(t),this.connected_||this.connect_()},t.prototype.removeObserver=function(t){var e=this.observers_,n=e.indexOf(t);~n&&e.splice(n,1),!e.length&&this.connected_&&this.disconnect_()},t.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},t.prototype.updateObservers_=function(){var t=this.observers_.filter((function(t){return t.gatherActive(),t.hasActive()}));return t.forEach((function(t){return t.broadcastActive()})),t.length>0},t.prototype.connect_=function(){r&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),u?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},t.prototype.disconnect_=function(){r&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},t.prototype.onTransitionEnd_=function(t){var e=t.propertyName,n=void 0===e?"":e;a.some((function(t){return!!~n.indexOf(t)}))&&this.refresh()},t.getInstance=function(){return this.instance_||(this.instance_=new t),this.instance_},t.instance_=null,t}(),l=function(t,e){for(var n=0,r=Object.keys(e);n<r.length;n++){var i=r[n];Object.defineProperty(t,i,{value:e[i],enumerable:!1,writable:!1,configurable:!0})}return t},c=function(t){return t&&t.ownerDocument&&t.ownerDocument.defaultView||i},f=g(0,0,0,0);function h(t){return parseFloat(t)||0}function p(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return e.reduce((function(e,n){return e+h(t["border-"+n+"-width"])}),0)}function d(t){var e=t.clientWidth,n=t.clientHeight;if(!e&&!n)return f;var r=c(t).getComputedStyle(t),i=function(t){for(var e={},n=0,r=["top","right","bottom","left"];n<r.length;n++){var i=r[n],o=t["padding-"+i];e[i]=h(o)}return e}(r),o=i.left+i.right,a=i.top+i.bottom,u=h(r.width),s=h(r.height);if("border-box"===r.boxSizing&&(Math.round(u+o)!==e&&(u-=p(r,"left","right")+o),Math.round(s+a)!==n&&(s-=p(r,"top","bottom")+a)),!function(t){return t===c(t).document.documentElement}(t)){var l=Math.round(u+o)-e,d=Math.round(s+a)-n;1!==Math.abs(l)&&(u-=l),1!==Math.abs(d)&&(s-=d)}return g(i.left,i.top,u,s)}var y="undefined"!=typeof SVGGraphicsElement?function(t){return t instanceof c(t).SVGGraphicsElement}:function(t){return t instanceof c(t).SVGElement&&"function"==typeof t.getBBox};function v(t){return r?y(t)?function(t){var e=t.getBBox();return g(0,0,e.width,e.height)}(t):d(t):f}function g(t,e,n,r){return{x:t,y:e,width:n,height:r}}var m=function(){function t(t){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=g(0,0,0,0),this.target=t}return t.prototype.isActive=function(){var t=v(this.target);return this.contentRect_=t,t.width!==this.broadcastWidth||t.height!==this.broadcastHeight},t.prototype.broadcastRect=function(){var t=this.contentRect_;return this.broadcastWidth=t.width,this.broadcastHeight=t.height,t},t}(),_=function(t,e){var n,r,i,o,a,u,s,c=(r=(n=e).x,i=n.y,o=n.width,a=n.height,u="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,s=Object.create(u.prototype),l(s,{x:r,y:i,width:o,height:a,top:i,right:r+o,bottom:a+i,left:r}),s);l(this,{target:t,contentRect:c})},b=function(){function t(t,e,r){if(this.activeObservations_=[],this.observations_=new n,"function"!=typeof t)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=t,this.controller_=e,this.callbackCtx_=r}return t.prototype.observe=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof c(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)||(e.set(t,new m(t)),this.controller_.addObserver(this),this.controller_.refresh())}},t.prototype.unobserve=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof c(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)&&(e.delete(t),e.size||this.controller_.removeObserver(this))}},t.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},t.prototype.gatherActive=function(){var t=this;this.clearActive(),this.observations_.forEach((function(e){e.isActive()&&t.activeObservations_.push(e)}))},t.prototype.broadcastActive=function(){if(this.hasActive()){var t=this.callbackCtx_,e=this.activeObservations_.map((function(t){return new _(t.target,t.broadcastRect())}));this.callback_.call(t,e,t),this.clearActive()}},t.prototype.clearActive=function(){this.activeObservations_.splice(0)},t.prototype.hasActive=function(){return this.activeObservations_.length>0},t}(),x="undefined"!=typeof WeakMap?new WeakMap:new n,O=function t(e){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=s.getInstance(),r=new b(e,n,this);x.set(this,r)};["observe","unobserve","disconnect"].forEach((function(t){O.prototype[t]=function(){var e;return(e=x.get(this))[t].apply(e,arguments)}}));var w=void 0!==i.ResizeObserver?i.ResizeObserver:O;e.a=w}).call(this,n(34))},function(t,e,n){var r=n(71),i=n(25);t.exports=function(t,e,n){var o=!0,a=!0;if("function"!=typeof t)throw new TypeError("Expected a function");return i(n)&&(o="leading"in n?!!n.leading:o,a="trailing"in n?!!n.trailing:a),r(t,e,{leading:o,maxWait:e,trailing:a})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Trapezoid=e.FunnelChart=e.Funnel=e.ComposedChart=e.RadialBarChart=e.AreaChart=e.ScatterChart=e.RadarChart=e.Sankey=e.Treemap=e.PieChart=e.BarChart=e.LineChart=e.ErrorBar=e.ZAxis=e.YAxis=e.XAxis=e.Scatter=e.Bar=e.Area=e.Line=e.CartesianGrid=e.CartesianAxis=e.ReferenceArea=e.ReferenceDot=e.ReferenceLine=e.Brush=e.RadialBar=e.Radar=e.Pie=e.PolarAngleAxis=e.PolarRadiusAxis=e.PolarGrid=e.Symbols=e.Cross=e.Dot=e.Polygon=e.Rectangle=e.Curve=e.Sector=e.Customized=e.LabelList=e.Label=e.Text=e.Cell=e.ResponsiveContainer=e.Tooltip=e.Legend=e.Layer=e.Surface=void 0,e.Global=void 0;var r=n(32);Object.defineProperty(e,"Surface",{enumerable:!0,get:function(){return r.Surface}});var i=n(6);Object.defineProperty(e,"Layer",{enumerable:!0,get:function(){return i.Layer}});var o=n(55);Object.defineProperty(e,"Legend",{enumerable:!0,get:function(){return o.Legend}});var a=n(35);Object.defineProperty(e,"Tooltip",{enumerable:!0,get:function(){return a.Tooltip}});var u=n(229);Object.defineProperty(e,"ResponsiveContainer",{enumerable:!0,get:function(){return u.ResponsiveContainer}});var s=n(27);Object.defineProperty(e,"Cell",{enumerable:!0,get:function(){return s.Cell}});var l=n(22);Object.defineProperty(e,"Text",{enumerable:!0,get:function(){return l.Text}});var c=n(17);Object.defineProperty(e,"Label",{enumerable:!0,get:function(){return c.Label}});var f=n(15);Object.defineProperty(e,"LabelList",{enumerable:!0,get:function(){return f.LabelList}});var h=n(245);Object.defineProperty(e,"Customized",{enumerable:!0,get:function(){return h.Customized}});var p=n(45);Object.defineProperty(e,"Sector",{enumerable:!0,get:function(){return p.Sector}});var d=n(28);Object.defineProperty(e,"Curve",{enumerable:!0,get:function(){return d.Curve}});var y=n(29);Object.defineProperty(e,"Rectangle",{enumerable:!0,get:function(){return y.Rectangle}});var v=n(46);Object.defineProperty(e,"Polygon",{enumerable:!0,get:function(){return v.Polygon}});var g=n(23);Object.defineProperty(e,"Dot",{enumerable:!0,get:function(){return g.Dot}});var m=n(100);Object.defineProperty(e,"Cross",{enumerable:!0,get:function(){return m.Cross}});var _=n(56);Object.defineProperty(e,"Symbols",{enumerable:!0,get:function(){return _.Symbols}});var b=n(246);Object.defineProperty(e,"PolarGrid",{enumerable:!0,get:function(){return b.PolarGrid}});var x=n(47);Object.defineProperty(e,"PolarRadiusAxis",{enumerable:!0,get:function(){return x.PolarRadiusAxis}});var O=n(48);Object.defineProperty(e,"PolarAngleAxis",{enumerable:!0,get:function(){return O.PolarAngleAxis}});var w=n(101);Object.defineProperty(e,"Pie",{enumerable:!0,get:function(){return w.Pie}});var A=n(102);Object.defineProperty(e,"Radar",{enumerable:!0,get:function(){return A.Radar}});var E=n(103);Object.defineProperty(e,"RadialBar",{enumerable:!0,get:function(){return E.RadialBar}});var M=n(104);Object.defineProperty(e,"Brush",{enumerable:!0,get:function(){return M.Brush}});var P=n(105);Object.defineProperty(e,"ReferenceLine",{enumerable:!0,get:function(){return P.ReferenceLine}});var S=n(106);Object.defineProperty(e,"ReferenceDot",{enumerable:!0,get:function(){return S.ReferenceDot}});var k=n(107);Object.defineProperty(e,"ReferenceArea",{enumerable:!0,get:function(){return k.ReferenceArea}});var C=n(108);Object.defineProperty(e,"CartesianAxis",{enumerable:!0,get:function(){return C.CartesianAxis}});var j=n(248);Object.defineProperty(e,"CartesianGrid",{enumerable:!0,get:function(){return j.CartesianGrid}});var T=n(66);Object.defineProperty(e,"Line",{enumerable:!0,get:function(){return T.Line}});var N=n(67);Object.defineProperty(e,"Area",{enumerable:!0,get:function(){return N.Area}});var D=n(68);Object.defineProperty(e,"Bar",{enumerable:!0,get:function(){return D.Bar}});var I=n(69);Object.defineProperty(e,"Scatter",{enumerable:!0,get:function(){return I.Scatter}});var L=n(30);Object.defineProperty(e,"XAxis",{enumerable:!0,get:function(){return L.XAxis}});var R=n(31);Object.defineProperty(e,"YAxis",{enumerable:!0,get:function(){return R.YAxis}});var B=n(51);Object.defineProperty(e,"ZAxis",{enumerable:!0,get:function(){return B.ZAxis}});var z=n(50);Object.defineProperty(e,"ErrorBar",{enumerable:!0,get:function(){return z.ErrorBar}});var F=n(249);Object.defineProperty(e,"LineChart",{enumerable:!0,get:function(){return F.LineChart}});var V=n(253);Object.defineProperty(e,"BarChart",{enumerable:!0,get:function(){return V.BarChart}});var W=n(254);Object.defineProperty(e,"PieChart",{enumerable:!0,get:function(){return W.PieChart}});var U=n(255);Object.defineProperty(e,"Treemap",{enumerable:!0,get:function(){return U.Treemap}});var q=n(257);Object.defineProperty(e,"Sankey",{enumerable:!0,get:function(){return q.Sankey}});var G=n(258);Object.defineProperty(e,"RadarChart",{enumerable:!0,get:function(){return G.RadarChart}});var H=n(259);Object.defineProperty(e,"ScatterChart",{enumerable:!0,get:function(){return H.ScatterChart}});var K=n(260);Object.defineProperty(e,"AreaChart",{enumerable:!0,get:function(){return K.AreaChart}});var X=n(261);Object.defineProperty(e,"RadialBarChart",{enumerable:!0,get:function(){return X.RadialBarChart}});var Y=n(262);Object.defineProperty(e,"ComposedChart",{enumerable:!0,get:function(){return Y.ComposedChart}});var $=n(109);Object.defineProperty(e,"Funnel",{enumerable:!0,get:function(){return $.Funnel}});var Z=n(263);Object.defineProperty(e,"FunnelChart",{enumerable:!0,get:function(){return Z.FunnelChart}});var J=n(110);Object.defineProperty(e,"Trapezoid",{enumerable:!0,get:function(){return J.Trapezoid}});var Q=n(8);Object.defineProperty(e,"Global",{enumerable:!0,get:function(){return Q.Global}})},,,,function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.DefaultLegendContent=void 0;var c=s(n(0)),f=l(n(4)),h=n(32),p=n(56),d=n(2),y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.renderIcon=function(t){var e=this.props.inactiveColor,n=t.inactive?e:t.color;if("plainline"===t.type)return c.default.createElement("line",{strokeWidth:4,fill:"none",stroke:n,strokeDasharray:t.payload.strokeDasharray,x1:0,y1:16,x2:32,y2:16,className:"recharts-legend-icon"});if("line"===t.type)return c.default.createElement("path",{strokeWidth:4,fill:"none",stroke:n,d:"M0,16h"+32/3+"\n            A"+32/6+","+32/6+",0,1,1,"+32/3*2+",16\n            H32M"+32/3*2+",16\n            A"+32/6+","+32/6+",0,1,1,"+32/3+",16",className:"recharts-legend-icon"});if("rect"===t.type)return c.default.createElement("path",{stroke:"none",fill:n,d:"M0,4h32v24h-32z",className:"recharts-legend-icon"});if(c.default.isValidElement(t.legendIcon)){var r=o({},t);return delete r.legendIcon,c.default.cloneElement(t.legendIcon,r)}return c.default.createElement(p.Symbols,{fill:n,cx:16,cy:16,size:32,sizeType:"diameter",type:t.type})},e.prototype.renderItems=function(){var t=this,e=this.props,n=e.payload,r=e.iconSize,i=e.layout,a=e.formatter,u=e.inactiveColor,s={x:0,y:0,width:32,height:32},l={display:"horizontal"===i?"inline-block":"block",marginRight:10},p={display:"inline-block",verticalAlign:"middle",marginRight:4};return n.map((function(e,n){var i,y=e.formatter||a,v=f.default(((i={"recharts-legend-item":!0})["legend-item-"+n]=!0,i.inactive=e.inactive,i));if("none"===e.type)return null;var g=e.inactive?u:e.color;return c.default.createElement("li",o({className:v,style:l,key:"legend-item-"+n},d.adaptEventsOfChild(t.props,e,n)),c.default.createElement(h.Surface,{width:r,height:r,viewBox:s,style:p},t.renderIcon(e)),c.default.createElement("span",{className:"recharts-legend-item-text",style:{color:g}},y?y(e.value,e,n):e.value))}))},e.prototype.render=function(){var t=this.props,e=t.payload,n=t.layout,r=t.align;if(!e||!e.length)return null;var i={padding:0,margin:0,textAlign:"horizontal"===n?r:"left"};return c.default.createElement("ul",{className:"recharts-default-legend",style:i},this.renderItems())},e.displayName="Legend",e.defaultProps={iconSize:14,layout:"horizontal",align:"center",verticalAlign:"middle",inactiveColor:"#ccc"},e}(c.PureComponent);e.DefaultLegendContent=y},function(t,e,n){var r=n(75),i=n(80),o=n(154),a=n(158),u=n(174),s=n(14),l=n(85),c=n(87),f="[object Object]",h=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,p,d,y){var v=s(t),g=s(e),m=v?"[object Array]":u(t),_=g?"[object Array]":u(e),b=(m="[object Arguments]"==m?f:m)==f,x=(_="[object Arguments]"==_?f:_)==f,O=m==_;if(O&&l(t)){if(!l(e))return!1;v=!0,b=!1}if(O&&!b)return y||(y=new r),v||c(t)?i(t,e,n,p,d,y):o(t,e,m,n,p,d,y);if(!(1&n)){var w=b&&h.call(t,"__wrapped__"),A=x&&h.call(e,"__wrapped__");if(w||A){var E=w?t.value():t,M=A?e.value():e;return y||(y=new r),d(E,M,n,p,y)}}return!!O&&(y||(y=new r),a(t,e,n,p,d,y))}},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,n){var r=n(37),i=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0)&&(n==e.length-1?e.pop():i.call(e,n,1),--this.size,!0)}},function(t,e,n){var r=n(37);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},function(t,e,n){var r=n(37);t.exports=function(t){return r(this.__data__,t)>-1}},function(t,e,n){var r=n(37);t.exports=function(t,e){var n=this.__data__,i=r(n,t);return i<0?(++this.size,n.push([t,e])):n[i][1]=e,this}},function(t,e,n){var r=n(36);t.exports=function(){this.__data__=new r,this.size=0}},function(t,e){t.exports=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}},function(t,e){t.exports=function(t){return this.__data__.get(t)}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e,n){var r=n(36),i=n(58),o=n(59);t.exports=function(t,e){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!i||a.length<199)return a.push([t,e]),this.size=++n.size,this;n=this.__data__=new o(a)}return n.set(t,e),this.size=n.size,this}},function(t,e,n){var r=n(77),i=n(136),o=n(25),a=n(79),u=/^\[object .+?Constructor\]$/,s=Function.prototype,l=Object.prototype,c=s.toString,f=l.hasOwnProperty,h=RegExp("^"+c.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!o(t)||i(t))&&(r(t)?h:u).test(a(t))}},function(t,e,n){var r=n(38),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,u=r?r.toStringTag:void 0;t.exports=function(t){var e=o.call(t,u),n=t[u];try{t[u]=void 0;var r=!0}catch(t){}var i=a.call(t);return r&&(e?t[u]=n:delete t[u]),i}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e,n){var r,i=n(137),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!o&&o in t}},function(t,e,n){var r=n(12)["__core-js_shared__"];t.exports=r},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e,n){var r=n(140),i=n(36),o=n(58);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},function(t,e,n){var r=n(141),i=n(142),o=n(143),a=n(144),u=n(145);function s(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=i,s.prototype.get=o,s.prototype.has=a,s.prototype.set=u,t.exports=s},function(t,e,n){var r=n(39);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(t,e){t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},function(t,e,n){var r=n(39),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return i.call(e,t)?e[t]:void 0}},function(t,e,n){var r=n(39),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:i.call(e,t)}},function(t,e,n){var r=n(39);t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(t,e,n){var r=n(40);t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},function(t,e){t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},function(t,e,n){var r=n(40);t.exports=function(t){return r(this,t).get(t)}},function(t,e,n){var r=n(40);t.exports=function(t){return r(this,t).has(t)}},function(t,e,n){var r=n(40);t.exports=function(t,e){var n=r(this,t),i=n.size;return n.set(t,e),this.size+=n.size==i?0:1,this}},function(t,e){t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}},function(t,e,n){var r=n(38),i=n(155),o=n(76),a=n(80),u=n(156),s=n(157),l=r?r.prototype:void 0,c=l?l.valueOf:void 0;t.exports=function(t,e,n,r,l,f,h){switch(n){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!f(new i(t),new i(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var p=u;case"[object Set]":var d=1&r;if(p||(p=s),t.size!=e.size&&!d)return!1;var y=h.get(t);if(y)return y==e;r|=2,h.set(t,e);var v=a(p(t),p(e),r,l,f,h);return h.delete(t),v;case"[object Symbol]":if(c)return c.call(t)==c.call(e)}return!1}},function(t,e,n){var r=n(12).Uint8Array;t.exports=r},function(t,e){t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}},function(t,e){t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}},function(t,e,n){var r=n(159),i=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,o,a,u){var s=1&n,l=r(t),c=l.length;if(c!=r(e).length&&!s)return!1;for(var f=c;f--;){var h=l[f];if(!(s?h in e:i.call(e,h)))return!1}var p=u.get(t),d=u.get(e);if(p&&d)return p==e&&d==t;var y=!0;u.set(t,e),u.set(e,t);for(var v=s;++f<c;){var g=t[h=l[f]],m=e[h];if(o)var _=s?o(m,g,h,e,t,u):o(g,m,h,t,e,u);if(!(void 0===_?g===m||a(g,m,n,o,u):_)){y=!1;break}v||(v="constructor"==h)}if(y&&!v){var b=t.constructor,x=e.constructor;b==x||!("constructor"in t)||!("constructor"in e)||"function"==typeof b&&b instanceof b&&"function"==typeof x&&x instanceof x||(y=!1)}return u.delete(t),u.delete(e),y}},function(t,e,n){var r=n(160),i=n(162),o=n(60);t.exports=function(t){return r(t,o,i)}},function(t,e,n){var r=n(161),i=n(14);t.exports=function(t,e,n){var o=e(t);return i(t)?o:r(o,n(t))}},function(t,e){t.exports=function(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}},function(t,e,n){var r=n(83),i=n(163),o=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,u=a?function(t){return null==t?[]:(t=Object(t),r(a(t),(function(e){return o.call(t,e)})))}:i;t.exports=u},function(t,e){t.exports=function(){return[]}},function(t,e,n){var r=n(165),i=n(84),o=n(14),a=n(85),u=n(86),s=n(87),l=Object.prototype.hasOwnProperty;t.exports=function(t,e){var n=o(t),c=!n&&i(t),f=!n&&!c&&a(t),h=!n&&!c&&!f&&s(t),p=n||c||f||h,d=p?r(t.length,String):[],y=d.length;for(var v in t)!e&&!l.call(t,v)||p&&("length"==v||f&&("offset"==v||"parent"==v)||h&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||u(v,y))||d.push(v);return d}},function(t,e){t.exports=function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}},function(t,e,n){var r=n(24),i=n(21);t.exports=function(t){return i(t)&&"[object Arguments]"==r(t)}},function(t,e){t.exports=function(){return!1}},function(t,e,n){var r=n(24),i=n(61),o=n(21),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,t.exports=function(t){return o(t)&&i(t.length)&&!!a[r(t)]}},function(t,e,n){(function(t){var r=n(78),i=e&&!e.nodeType&&e,o=i&&"object"==typeof t&&t&&!t.nodeType&&t,a=o&&o.exports===i&&r.process,u=function(){try{var t=o&&o.require&&o.require("util").types;return t||a&&a.binding&&a.binding("util")}catch(t){}}();t.exports=u}).call(this,n(54)(t))},function(t,e,n){var r=n(171),i=n(172),o=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return i(t);var e=[];for(var n in Object(t))o.call(t,n)&&"constructor"!=n&&e.push(n);return e}},function(t,e){var n=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||n)}},function(t,e,n){var r=n(173)(Object.keys,Object);t.exports=r},function(t,e){t.exports=function(t,e){return function(n){return t(e(n))}}},function(t,e,n){var r=n(175),i=n(58),o=n(176),a=n(177),u=n(178),s=n(24),l=n(79),c=l(r),f=l(i),h=l(o),p=l(a),d=l(u),y=s;(r&&"[object DataView]"!=y(new r(new ArrayBuffer(1)))||i&&"[object Map]"!=y(new i)||o&&"[object Promise]"!=y(o.resolve())||a&&"[object Set]"!=y(new a)||u&&"[object WeakMap]"!=y(new u))&&(y=function(t){var e=s(t),n="[object Object]"==e?t.constructor:void 0,r=n?l(n):"";if(r)switch(r){case c:return"[object DataView]";case f:return"[object Map]";case h:return"[object Promise]";case p:return"[object Set]";case d:return"[object WeakMap]"}return e}),t.exports=y},function(t,e,n){var r=n(20)(n(12),"DataView");t.exports=r},function(t,e,n){var r=n(20)(n(12),"Promise");t.exports=r},function(t,e,n){var r=n(20)(n(12),"Set");t.exports=r},function(t,e,n){var r=n(20)(n(12),"WeakMap");t.exports=r},function(t,e,n){(function(e){(function(){var n,r,i,o,a,u;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:null!=e&&e.hrtime?(t.exports=function(){return(n()-a)/1e6},r=e.hrtime,o=(n=function(){var t;return 1e9*(t=r())[0]+t[1]})(),u=1e9*e.uptime(),a=o-u):Date.now?(t.exports=function(){return Date.now()-i},i=Date.now()):(t.exports=function(){return(new Date).getTime()-i},i=(new Date).getTime())}).call(this)}).call(this,n(180))},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var s,l=[],c=!1,f=-1;function h(){c&&s&&(c=!1,s.length?l=s.concat(l):f=-1,l.length&&p())}function p(){if(!c){var t=u(h);c=!0;for(var e=l.length;e;){for(s=l,l=[];++f<e;)s&&s[f].run();f=-1,e=l.length}s=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new d(t,e)),1!==l.length||c||u(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){var r=n(81),i=n(182),o=n(187),a=n(63),u=n(88),s=n(82),l=Math.min;t.exports=function(t,e,n){for(var c=n?o:i,f=t[0].length,h=t.length,p=h,d=Array(h),y=1/0,v=[];p--;){var g=t[p];p&&e&&(g=a(g,u(e))),y=l(g.length,y),d[p]=!n&&(e||f>=120&&g.length>=120)?new r(p&&g):void 0}g=t[0];var m=-1,_=d[0];t:for(;++m<f&&v.length<y;){var b=g[m],x=e?e(b):b;if(b=n||0!==b?b:0,!(_?s(_,x):c(v,x,n))){for(p=h;--p;){var O=d[p];if(!(O?s(O,x):c(t[p],x,n)))continue t}_&&_.push(x),v.push(b)}}return v}},function(t,e,n){var r=n(183);t.exports=function(t,e){return!!(null==t?0:t.length)&&r(t,e,0)>-1}},function(t,e,n){var r=n(184),i=n(185),o=n(186);t.exports=function(t,e,n){return e==e?o(t,e,n):r(t,i,n)}},function(t,e){t.exports=function(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}},function(t,e){t.exports=function(t){return t!=t}},function(t,e){t.exports=function(t,e,n){for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}},function(t,e){t.exports=function(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}},function(t,e,n){var r=n(64),i=n(189),o=n(191);t.exports=function(t,e){return o(i(t,e,r),t+"")}},function(t,e,n){var r=n(190),i=Math.max;t.exports=function(t,e,n){return e=i(void 0===e?t.length-1:e,0),function(){for(var o=arguments,a=-1,u=i(o.length-e,0),s=Array(u);++a<u;)s[a]=o[e+a];a=-1;for(var l=Array(e+1);++a<e;)l[a]=o[a];return l[e]=n(s),r(t,this,l)}}},function(t,e){t.exports=function(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}},function(t,e,n){var r=n(192),i=n(195)(r);t.exports=i},function(t,e,n){var r=n(193),i=n(194),o=n(64),a=i?function(t,e){return i(t,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:o;t.exports=a},function(t,e){t.exports=function(t){return function(){return t}}},function(t,e,n){var r=n(20),i=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=i},function(t,e){var n=Date.now;t.exports=function(t){var e=0,r=0;return function(){var i=n(),o=16-(i-r);if(r=i,o>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}},function(t,e,n){var r=n(197);t.exports=function(t){return r(t)?t:[]}},function(t,e,n){var r=n(62),i=n(21);t.exports=function(t){return i(t)&&r(t)}},function(t,e,n){var r=n(199);t.exports=function(t,e){var n=[];return r(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}},function(t,e,n){var r=n(200),i=n(203)(r);t.exports=i},function(t,e,n){var r=n(201),i=n(60);t.exports=function(t,e){return t&&r(t,e,i)}},function(t,e,n){var r=n(202)();t.exports=r},function(t,e){t.exports=function(t){return function(e,n,r){for(var i=-1,o=Object(e),a=r(e),u=a.length;u--;){var s=a[t?u:++i];if(!1===n(o[s],s,o))break}return e}}},function(t,e,n){var r=n(62);t.exports=function(t,e){return function(n,i){if(null==n)return n;if(!r(n))return t(n,i);for(var o=n.length,a=e?o:-1,u=Object(n);(e?a--:++a<o)&&!1!==i(u[a],a,u););return n}}},function(t,e,n){var r=n(205),i=n(208),o=n(64),a=n(14),u=n(218);t.exports=function(t){return"function"==typeof t?t:null==t?o:"object"==typeof t?a(t)?i(t[0],t[1]):r(t):u(t)}},function(t,e,n){var r=n(206),i=n(207),o=n(90);t.exports=function(t){var e=i(t);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(n){return n===t||r(n,t,e)}}},function(t,e,n){var r=n(75),i=n(57);t.exports=function(t,e,n,o){var a=n.length,u=a,s=!o;if(null==t)return!u;for(t=Object(t);a--;){var l=n[a];if(s&&l[2]?l[1]!==t[l[0]]:!(l[0]in t))return!1}for(;++a<u;){var c=(l=n[a])[0],f=t[c],h=l[1];if(s&&l[2]){if(void 0===f&&!(c in t))return!1}else{var p=new r;if(o)var d=o(f,h,c,t,e,p);if(!(void 0===d?i(h,f,3,o,p):d))return!1}}return!0}},function(t,e,n){var r=n(89),i=n(60);t.exports=function(t){for(var e=i(t),n=e.length;n--;){var o=e[n],a=t[o];e[n]=[o,a,r(a)]}return e}},function(t,e,n){var r=n(57),i=n(209),o=n(215),a=n(65),u=n(89),s=n(90),l=n(42);t.exports=function(t,e){return a(t)&&u(e)?s(l(t),e):function(n){var a=i(n,t);return void 0===a&&a===e?o(n,t):r(e,a,3)}}},function(t,e,n){var r=n(91);t.exports=function(t,e,n){var i=null==t?void 0:r(t,e);return void 0===i?n:i}},function(t,e,n){var r=n(211),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,a=r((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(i,(function(t,n,r,i){e.push(r?i.replace(o,"$1"):n||t)})),e}));t.exports=a},function(t,e,n){var r=n(212);t.exports=function(t){var e=r(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}},function(t,e,n){var r=n(59);function i(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(i.Cache||r),n}i.Cache=r,t.exports=i},function(t,e,n){var r=n(214);t.exports=function(t){return null==t?"":r(t)}},function(t,e,n){var r=n(38),i=n(63),o=n(14),a=n(41),u=r?r.prototype:void 0,s=u?u.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(o(e))return i(e,t)+"";if(a(e))return s?s.call(e):"";var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},function(t,e,n){var r=n(216),i=n(217);t.exports=function(t,e){return null!=t&&i(t,e,r)}},function(t,e){t.exports=function(t,e){return null!=t&&e in Object(t)}},function(t,e,n){var r=n(92),i=n(84),o=n(14),a=n(86),u=n(61),s=n(42);t.exports=function(t,e,n){for(var l=-1,c=(e=r(e,t)).length,f=!1;++l<c;){var h=s(e[l]);if(!(f=null!=t&&n(t,h)))break;t=t[h]}return f||++l!=c?f:!!(c=null==t?0:t.length)&&u(c)&&a(h,c)&&(o(t)||i(t))}},function(t,e,n){var r=n(219),i=n(220),o=n(65),a=n(42);t.exports=function(t){return o(t)?r(a(t)):i(t)}},function(t,e){t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},function(t,e,n){var r=n(91);t.exports=function(t){return function(e){return r(e,t)}}},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;!function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}e.default=t}(n(1));var r=u(n(222)),i=u(n(225)),o=u(n(0)),a=u(n(93));n(95);function u(t){return t&&t.__esModule?t:{default:t}}function s(){return(s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}var l=function(t,e){return t&&e&&e.split(" ").forEach((function(e){return(0,r.default)(t,e)}))},c=function(t,e){return t&&e&&e.split(" ").forEach((function(e){return(0,i.default)(t,e)}))},f=function(t){var e,n;function r(){for(var e,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(e=t.call.apply(t,[this].concat(r))||this).onEnter=function(t,n){var r=e.getClassNames(n?"appear":"enter").className;e.removeClasses(t,"exit"),l(t,r),e.props.onEnter&&e.props.onEnter(t,n)},e.onEntering=function(t,n){var r=e.getClassNames(n?"appear":"enter").activeClassName;e.reflowAndAddClass(t,r),e.props.onEntering&&e.props.onEntering(t,n)},e.onEntered=function(t,n){var r=e.getClassNames("appear").doneClassName,i=e.getClassNames("enter").doneClassName,o=n?r+" "+i:i;e.removeClasses(t,n?"appear":"enter"),l(t,o),e.props.onEntered&&e.props.onEntered(t,n)},e.onExit=function(t){var n=e.getClassNames("exit").className;e.removeClasses(t,"appear"),e.removeClasses(t,"enter"),l(t,n),e.props.onExit&&e.props.onExit(t)},e.onExiting=function(t){var n=e.getClassNames("exit").activeClassName;e.reflowAndAddClass(t,n),e.props.onExiting&&e.props.onExiting(t)},e.onExited=function(t){var n=e.getClassNames("exit").doneClassName;e.removeClasses(t,"exit"),l(t,n),e.props.onExited&&e.props.onExited(t)},e.getClassNames=function(t){var n=e.props.classNames,r="string"==typeof n,i=r?(r&&n?n+"-":"")+t:n[t];return{className:i,activeClassName:r?i+"-active":n[t+"Active"],doneClassName:r?i+"-done":n[t+"Done"]}},e}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var i=r.prototype;return i.removeClasses=function(t,e){var n=this.getClassNames(e),r=n.className,i=n.activeClassName,o=n.doneClassName;r&&c(t,r),i&&c(t,i),o&&c(t,o)},i.reflowAndAddClass=function(t,e){e&&(t&&t.scrollTop,l(t,e))},i.render=function(){var t=s({},this.props);return delete t.classNames,o.default.createElement(a.default,s({},t,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},r}(o.default.Component);f.defaultProps={classNames:""},f.propTypes={};var h=f;e.default=h,t.exports=e.default},function(t,e,n){"use strict";var r=n(223);e.__esModule=!0,e.default=function(t,e){t.classList?t.classList.add(e):(0,i.default)(t,e)||("string"==typeof t.className?t.className=t.className+" "+e:t.setAttribute("class",(t.className&&t.className.baseVal||"")+" "+e))};var i=r(n(224));t.exports=e.default},function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";e.__esModule=!0,e.default=function(t,e){return t.classList?!!e&&t.classList.contains(e):-1!==(" "+(t.className.baseVal||t.className)+" ").indexOf(" "+e+" ")},t.exports=e.default},function(t,e,n){"use strict";function r(t,e){return t.replace(new RegExp("(^|\\s)"+e+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}t.exports=function(t,e){t.classList?t.classList.remove(e):"string"==typeof t.className?t.className=r(t.className,e):t.setAttribute("class",r(t.className&&t.className.baseVal||"",e))}},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;a(n(1));var r=a(n(0)),i=n(52),o=a(n(96));function a(t){return t&&t.__esModule?t:{default:t}}var u=function(t){var e,n;function a(){for(var e,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(e=t.call.apply(t,[this].concat(r))||this).handleEnter=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEnter",0,n)},e.handleEntering=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEntering",0,n)},e.handleEntered=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEntered",0,n)},e.handleExit=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExit",1,n)},e.handleExiting=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExiting",1,n)},e.handleExited=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExited",1,n)},e}n=t,(e=a).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var u=a.prototype;return u.handleLifecycle=function(t,e,n){var o,a=this.props.children,u=r.default.Children.toArray(a)[e];u.props[t]&&(o=u.props)[t].apply(o,n),this.props[t]&&this.props[t]((0,i.findDOMNode)(this))},u.render=function(){var t=this.props,e=t.children,n=t.in,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,["children","in"]),a=r.default.Children.toArray(e),u=a[0],s=a[1];return delete i.onEnter,delete i.onEntering,delete i.onEntered,delete i.onExit,delete i.onExiting,delete i.onExited,r.default.createElement(o.default,i,n?r.default.cloneElement(u,{key:"first",onEnter:this.handleEnter,onEntering:this.handleEntering,onEntered:this.handleEntered}):r.default.cloneElement(s,{key:"second",onEnter:this.handleExit,onEntering:this.handleExiting,onEntered:this.handleExited}))},a}(r.default.Component);u.propTypes={};var s=u;e.default=s,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.getChildMapping=i,e.mergeChildMappings=o,e.getInitialChildMapping=function(t,e){return i(t.children,(function(n){return(0,r.cloneElement)(n,{onExited:e.bind(null,n),in:!0,appear:a(n,"appear",t),enter:a(n,"enter",t),exit:a(n,"exit",t)})}))},e.getNextChildMapping=function(t,e,n){var u=i(t.children),s=o(e,u);return Object.keys(s).forEach((function(i){var o=s[i];if((0,r.isValidElement)(o)){var l=i in e,c=i in u,f=e[i],h=(0,r.isValidElement)(f)&&!f.props.in;!c||l&&!h?c||!l||h?c&&l&&(0,r.isValidElement)(f)&&(s[i]=(0,r.cloneElement)(o,{onExited:n.bind(null,o),in:f.props.in,exit:a(o,"exit",t),enter:a(o,"enter",t)})):s[i]=(0,r.cloneElement)(o,{in:!1}):s[i]=(0,r.cloneElement)(o,{onExited:n.bind(null,o),in:!0,exit:a(o,"exit",t),enter:a(o,"enter",t)})}})),s};var r=n(0);function i(t,e){var n=Object.create(null);return t&&r.Children.map(t,(function(t){return t})).forEach((function(t){n[t.key]=function(t){return e&&(0,r.isValidElement)(t)?e(t):t}(t)})),n}function o(t,e){function n(n){return n in e?e[n]:t[n]}t=t||{},e=e||{};var r,i=Object.create(null),o=[];for(var a in t)a in e?o.length&&(i[a]=o,o=[]):o.push(a);var u={};for(var s in e){if(i[s])for(r=0;r<i[s].length;r++){var l=i[s][r];u[i[s][r]]=n(l)}u[s]=n(s)}for(r=0;r<o.length;r++)u[o[r]]=n(o[r]);return u}function a(t,e,n){return null!=n[e]?n[e]:t.props[e]}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.DefaultTooltipContent=void 0;var c=l(n(3)),f=s(n(0)),h=l(n(4)),p=n(5);function d(t){return c.default.isArray(t)&&p.isNumOrStr(t[0])&&p.isNumOrStr(t[1])?t.join(" ~ "):t}var y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.renderContent=function(){var t=this.props,e=t.payload,n=t.separator,r=t.formatter,i=t.itemStyle,a=t.itemSorter;if(e&&e.length){var u=(a?c.default.sortBy(e,a):e).map((function(t,a){if("none"===t.type)return null;var u=o({display:"block",paddingTop:4,paddingBottom:4,color:t.color||"#000"},i),s=t.formatter||r||d,l=t.name,c=t.value;if(s){var h=s(c,l,t,a,e);Array.isArray(h)?(c=h[0],l=h[1]):c=h}return f.default.createElement("li",{className:"recharts-tooltip-item",key:"tooltip-item-"+a,style:u},p.isNumOrStr(l)?f.default.createElement("span",{className:"recharts-tooltip-item-name"},l):null,p.isNumOrStr(l)?f.default.createElement("span",{className:"recharts-tooltip-item-separator"},n):null,f.default.createElement("span",{className:"recharts-tooltip-item-value"},c),f.default.createElement("span",{className:"recharts-tooltip-item-unit"},t.unit||""))}));return f.default.createElement("ul",{className:"recharts-tooltip-item-list",style:{padding:0,margin:0}},u)}return null},e.prototype.render=function(){var t=this.props,e=t.wrapperClassName,n=t.contentStyle,r=t.labelClassName,i=t.labelStyle,a=t.label,u=t.labelFormatter,s=t.payload,l=o({margin:0,padding:10,backgroundColor:"#fff",border:"1px solid #ccc",whiteSpace:"nowrap"},n),p=o({margin:0},i),d=!c.default.isNil(a),y=d?a:"",v=h.default("recharts-default-tooltip",e),g=h.default("recharts-tooltip-label",r);return d&&u&&(y=u(a,s)),f.default.createElement("div",{className:v,style:l},f.default.createElement("p",{className:g,style:p},f.default.isValidElement(y)?y:""+y),this.renderContent())},e.displayName="DefaultTooltipContent",e.defaultProps={separator:" : ",contentStyle:{},itemStyle:{},labelStyle:{}},e}(f.PureComponent);e.DefaultTooltipContent=y},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),u=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&o(e,t,n);return a(e,t),e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ResponsiveContainer=void 0;var l=s(n(4)),c=s(n(3)),f=u(n(0)),h=s(n(264)),p=n(5),d=n(26),y=function(t){function e(e){var n=t.call(this,e)||this;return n.updateDimensionsImmediate=function(){if(n.mounted){var t=n.getContainerSize();if(t){var e=n.state,r=e.containerWidth,i=e.containerHeight,o=t.containerWidth,a=t.containerHeight;o===r&&a===i||n.setState({containerWidth:o,containerHeight:a})}}},n.state={containerWidth:-1,containerHeight:-1},n.handleResize=e.debounce>0?c.default.debounce(n.updateDimensionsImmediate,e.debounce):n.updateDimensionsImmediate,n.containerRef=f.default.createRef(),n}return i(e,t),e.prototype.componentDidMount=function(){this.mounted=!0;var t=this.getContainerSize();t&&this.setState(t)},e.prototype.componentWillUnmount=function(){this.mounted=!1},e.prototype.getContainerSize=function(){return this.containerRef.current?{containerWidth:this.containerRef.current.clientWidth,containerHeight:this.containerRef.current.clientHeight}:null},e.prototype.renderChart=function(){var t=this.state,e=t.containerWidth,n=t.containerHeight;if(e<0||n<0)return null;var r=this.props,i=r.aspect,o=r.width,a=r.height,u=r.minWidth,s=r.minHeight,l=r.maxHeight,c=r.children;d.warn(p.isPercent(o)||p.isPercent(a),"The width(%s) and height(%s) are both fixed numbers,\n       maybe you don't need to use a ResponsiveContainer.",o,a),d.warn(!i||i>0,"The aspect(%s) must be greater than zero.",i);var h=p.isPercent(o)?e:o,y=p.isPercent(a)?n:a;return i&&i>0&&(h?y=h/i:y&&(h=y*i),l&&y>l&&(y=l)),d.warn(h>0||y>0,"The width(%s) and height(%s) of chart should be greater than 0,\n       please check the style of container, or the props width(%s) and height(%s),\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\n       height and width.",h,y,o,a,u,s,i),f.default.cloneElement(c,{width:h,height:y})},e.prototype.render=function(){var t=this.props,e=t.minWidth,n=t.minHeight,r=t.width,i=t.height,o=t.maxHeight,a=t.id,u=t.className,s={width:r,height:i,minWidth:e,minHeight:n,maxHeight:o};return f.default.createElement(h.default,{handleWidth:!0,handleHeight:!0,onResize:this.handleResize,targetRef:this.containerRef},f.default.createElement("div",{id:""+a,className:l.default("recharts-responsive-container",u),style:s,ref:this.containerRef},this.renderChart()))},e.defaultProps={width:"100%",height:"100%",debounce:0},e}(f.Component);e.ResponsiveContainer=y},function(t,e,n){var r=n(12);t.exports=function(){return r.Date.now()}},function(t,e,n){var r=n(25),i=n(41),o=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,u=/^0b[01]+$/i,s=/^0o[0-7]+$/i,l=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(i(t))return NaN;if(r(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=r(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(o,"");var n=u.test(t);return n||s.test(t)?l(t.slice(2),n?2:8):a.test(t)?NaN:+t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=u(n(233)),i=n(238),o=u(n(97)),a=u(n(241));function u(t){return t&&t.__esModule?t:{default:t}}var s=/((?:\-[a-z]+\-)?calc)/;e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;return(0,r.default)(t).walk((function(t){if("function"===t.type&&s.test(t.value)){var n=r.default.stringify(t.nodes);if(!(n.indexOf("constant")>=0||n.indexOf("env")>=0)){var u=i.parser.parse(n),l=(0,o.default)(u,e);t.type="word",t.value=(0,a.default)(t.value,l,e)}}}),!0).toString()},t.exports=e.default},function(t,e,n){var r=n(234),i=n(235),o=n(236);function a(t){return this instanceof a?(this.nodes=r(t),this):new a(t)}a.prototype.toString=function(){return Array.isArray(this.nodes)?o(this.nodes):""},a.prototype.walk=function(t,e){return i(this.nodes,t,e),this},a.unit=n(237),a.walk=i,a.stringify=o,t.exports=a},function(t,e){var n="(".charCodeAt(0),r=")".charCodeAt(0),i="'".charCodeAt(0),o='"'.charCodeAt(0),a="\\".charCodeAt(0),u="/".charCodeAt(0),s=",".charCodeAt(0),l=":".charCodeAt(0),c="*".charCodeAt(0);t.exports=function(t){for(var e,f,h,p,d,y,v,g,m=[],_=t,b=0,x=_.charCodeAt(b),O=_.length,w=[{nodes:m}],A=0,E="",M="",P="";b<O;)if(x<=32){e=b;do{e+=1,x=_.charCodeAt(e)}while(x<=32);p=_.slice(b,e),h=m[m.length-1],x===r&&A?P=p:h&&"div"===h.type?h.after=p:x===s||x===l||x===u&&_.charCodeAt(e+1)!==c?M=p:m.push({type:"space",sourceIndex:b,value:p}),b=e}else if(x===i||x===o){e=b,p={type:"string",sourceIndex:b,quote:f=x===i?"'":'"'};do{if(d=!1,~(e=_.indexOf(f,e+1)))for(y=e;_.charCodeAt(y-1)===a;)y-=1,d=!d;else e=(_+=f).length-1,p.unclosed=!0}while(d);p.value=_.slice(b+1,e),m.push(p),b=e+1,x=_.charCodeAt(b)}else if(x===u&&_.charCodeAt(b+1)===c)p={type:"comment",sourceIndex:b},-1===(e=_.indexOf("*/",b))&&(p.unclosed=!0,e=_.length),p.value=_.slice(b+2,e),m.push(p),b=e+2,x=_.charCodeAt(b);else if(x===u||x===s||x===l)p=_[b],m.push({type:"div",sourceIndex:b-M.length,value:p,before:M,after:""}),M="",b+=1,x=_.charCodeAt(b);else if(n===x){e=b;do{e+=1,x=_.charCodeAt(e)}while(x<=32);if(p={type:"function",sourceIndex:b-E.length,value:E,before:_.slice(b+1,e)},b=e,"url"===E&&x!==i&&x!==o){e-=1;do{if(d=!1,~(e=_.indexOf(")",e+1)))for(y=e;_.charCodeAt(y-1)===a;)y-=1,d=!d;else e=(_+=")").length-1,p.unclosed=!0}while(d);v=e;do{v-=1,x=_.charCodeAt(v)}while(x<=32);p.nodes=b!==v+1?[{type:"word",sourceIndex:b,value:_.slice(b,v+1)}]:[],p.unclosed&&v+1!==e?(p.after="",p.nodes.push({type:"space",sourceIndex:v+1,value:_.slice(v+1,e)})):p.after=_.slice(v+1,e),b=e+1,x=_.charCodeAt(b),m.push(p)}else A+=1,p.after="",m.push(p),w.push(p),m=p.nodes=[],g=p;E=""}else if(r===x&&A)b+=1,x=_.charCodeAt(b),g.after=P,P="",A-=1,w.pop(),m=(g=w[A]).nodes;else{e=b;do{x===a&&(e+=1),e+=1,x=_.charCodeAt(e)}while(e<O&&!(x<=32||x===i||x===o||x===s||x===l||x===u||x===n||x===r&&A));p=_.slice(b,e),n===x?E=p:m.push({type:"word",sourceIndex:b,value:p}),b=e}for(b=w.length-1;b;b-=1)w[b].unclosed=!0;return w[0].nodes}},function(t,e){t.exports=function t(e,n,r){var i,o,a,u;for(i=0,o=e.length;i<o;i+=1)a=e[i],r||(u=n(a,i,e)),!1!==u&&"function"===a.type&&Array.isArray(a.nodes)&&t(a.nodes,n,r),r&&n(a,i,e)}},function(t,e){function n(t,e){var n,i,o=t.type,a=t.value;return e&&void 0!==(i=e(t))?i:"word"===o||"space"===o?a:"string"===o?(n=t.quote||"")+a+(t.unclosed?"":n):"comment"===o?"/*"+a+(t.unclosed?"":"*/"):"div"===o?(t.before||"")+a+(t.after||""):Array.isArray(t.nodes)?(n=r(t.nodes),"function"!==o?n:a+"("+(t.before||"")+n+(t.after||"")+(t.unclosed?"":")")):a}function r(t,e){var r,i;if(Array.isArray(t)){for(r="",i=t.length-1;~i;i-=1)r=n(t[i],e)+r;return r}return n(t,e)}t.exports=r},function(t,e){var n="-".charCodeAt(0),r="+".charCodeAt(0),i=".".charCodeAt(0),o="e".charCodeAt(0),a="E".charCodeAt(0);t.exports=function(t){for(var e,u=0,s=t.length,l=!1,c=-1,f=!1;u<s;){if((e=t.charCodeAt(u))>=48&&e<=57)f=!0;else if(e===o||e===a){if(c>-1)break;c=u}else if(e===i){if(l)break;l=!0}else{if(e!==r&&e!==n)break;if(0!==u)break}u+=1}return c+1===u&&u--,!!f&&{number:t.slice(0,u),unit:t.slice(u)}}},function(t,e,n){var r=function(){function t(t,e){var n;if(Object.defineProperty(this,"name",{enumerable:!1,writable:!1,value:"JisonParserError"}),null==t&&(t="???"),Object.defineProperty(this,"message",{enumerable:!1,writable:!0,value:t}),this.hash=e,e&&e.exception instanceof Error){var r=e.exception;this.message=r.message||t,n=r.stack}n||(Error.hasOwnProperty("captureStackTrace")?Error.captureStackTrace(this,this.constructor):n=new Error(t).stack),n&&Object.defineProperty(this,"stack",{enumerable:!1,writable:!1,value:n})}function e(t,e,n){n=n||0;for(var r=0;r<e;r++)this.push(t),t+=n}function n(t,e){for(e+=t=this.length-t;t<e;t++)this.push(this[t])}function r(t){for(var e=[],n=0,r=t.length;n<r;n++){var i=t[n];"function"==typeof i?(n++,i.apply(e,t[n])):e.push(i)}return e}"function"==typeof Object.setPrototypeOf?Object.setPrototypeOf(t.prototype,Error.prototype):t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t.prototype.name="JisonParserError";var i={trace:function(){},JisonParserError:t,yy:{},options:{type:"lalr",hasPartialLrUpgradeOnConflict:!0,errorRecoveryTokenDiscardCount:3},symbols_:{$accept:0,$end:1,ADD:3,ANGLE:16,CHS:22,COMMA:14,CSS_CPROP:13,CSS_VAR:12,DIV:6,EMS:20,EOF:1,EXS:21,FREQ:18,LENGTH:15,LPAREN:7,MUL:5,NESTED_CALC:9,NUMBER:11,PERCENTAGE:28,PREFIX:10,REMS:23,RES:19,RPAREN:8,SUB:4,TIME:17,VHS:24,VMAXS:27,VMINS:26,VWS:25,css_value:33,css_variable:32,error:2,expression:29,math_expression:30,value:31},terminals_:{1:"EOF",2:"error",3:"ADD",4:"SUB",5:"MUL",6:"DIV",7:"LPAREN",8:"RPAREN",9:"NESTED_CALC",10:"PREFIX",11:"NUMBER",12:"CSS_VAR",13:"CSS_CPROP",14:"COMMA",15:"LENGTH",16:"ANGLE",17:"TIME",18:"FREQ",19:"RES",20:"EMS",21:"EXS",22:"CHS",23:"REMS",24:"VHS",25:"VWS",26:"VMINS",27:"VMAXS",28:"PERCENTAGE"},TERROR:2,EOF:1,originalQuoteName:null,originalParseError:null,cleanupAfterParse:null,constructParseErrorInfo:null,yyMergeLocationInfo:null,__reentrant_call_depth:0,__error_infos:[],__error_recovery_infos:[],quoteName:function(t){return'"'+t+'"'},getSymbolName:function(t){if(this.terminals_[t])return this.terminals_[t];var e=this.symbols_;for(var n in e)if(e[n]===t)return n;return null},describeSymbol:function(t){if(t!==this.EOF&&this.terminal_descriptions_&&this.terminal_descriptions_[t])return this.terminal_descriptions_[t];if(t===this.EOF)return"end of input";var e=this.getSymbolName(t);return e?this.quoteName(e):null},collect_expected_token_set:function(t,e){var n=this.TERROR,r=[],i={};if(!e&&this.state_descriptions_&&this.state_descriptions_[t])return[this.state_descriptions_[t]];for(var o in this.table[t])if((o=+o)!==n){var a=e?o:this.describeSymbol(o);a&&!i[a]&&(r.push(a),i[a]=!0)}return r},productions_:function(t){for(var e=[],n=t.pop,r=t.rule,i=0,o=n.length;i<o;i++)e.push([n[i],r[i]]);return e}({pop:r([29,e,[30,10],31,31,32,32,e,[33,15]]),rule:r([2,e,[3,5],4,7,e,[1,4],2,4,6,e,[1,14],2])}),performAction:function(t,e,n){var r=this.yy;r.parser,r.lexer;switch(t){case 0:
/*! Production::    $accept : expression $end */
this.$=n[e-1];break;case 1:
/*! Production::    expression : math_expression EOF */
return this.$=n[e-1],n[e-1];case 2:
/*! Production::    math_expression : math_expression ADD math_expression */case 3:
/*! Production::    math_expression : math_expression SUB math_expression */case 4:
/*! Production::    math_expression : math_expression MUL math_expression */case 5:
/*! Production::    math_expression : math_expression DIV math_expression */
this.$={type:"MathExpression",operator:n[e-1],left:n[e-2],right:n[e]};break;case 6:
/*! Production::    math_expression : LPAREN math_expression RPAREN */
this.$=n[e-1];break;case 7:
/*! Production::    math_expression : NESTED_CALC LPAREN math_expression RPAREN */
this.$={type:"Calc",value:n[e-1]};break;case 8:
/*! Production::    math_expression : SUB PREFIX SUB NESTED_CALC LPAREN math_expression RPAREN */
this.$={type:"Calc",value:n[e-1],prefix:n[e-5]};break;case 9:
/*! Production::    math_expression : css_variable */case 10:
/*! Production::    math_expression : css_value */case 11:
/*! Production::    math_expression : value */
this.$=n[e];break;case 12:
/*! Production::    value : NUMBER */
this.$={type:"Value",value:parseFloat(n[e])};break;case 13:
/*! Production::    value : SUB NUMBER */
this.$={type:"Value",value:-1*parseFloat(n[e])};break;case 14:
/*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP RPAREN */
this.$={type:"CssVariable",value:n[e-1]};break;case 15:
/*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP COMMA math_expression RPAREN */
this.$={type:"CssVariable",value:n[e-3],fallback:n[e-1]};break;case 16:
/*! Production::    css_value : LENGTH */
this.$={type:"LengthValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 17:
/*! Production::    css_value : ANGLE */
this.$={type:"AngleValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 18:
/*! Production::    css_value : TIME */
this.$={type:"TimeValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 19:
/*! Production::    css_value : FREQ */
this.$={type:"FrequencyValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 20:
/*! Production::    css_value : RES */
this.$={type:"ResolutionValue",value:parseFloat(n[e]),unit:/[a-z]+/.exec(n[e])[0]};break;case 21:
/*! Production::    css_value : EMS */
this.$={type:"EmValue",value:parseFloat(n[e]),unit:"em"};break;case 22:
/*! Production::    css_value : EXS */
this.$={type:"ExValue",value:parseFloat(n[e]),unit:"ex"};break;case 23:
/*! Production::    css_value : CHS */
this.$={type:"ChValue",value:parseFloat(n[e]),unit:"ch"};break;case 24:
/*! Production::    css_value : REMS */
this.$={type:"RemValue",value:parseFloat(n[e]),unit:"rem"};break;case 25:
/*! Production::    css_value : VHS */
this.$={type:"VhValue",value:parseFloat(n[e]),unit:"vh"};break;case 26:
/*! Production::    css_value : VWS */
this.$={type:"VwValue",value:parseFloat(n[e]),unit:"vw"};break;case 27:
/*! Production::    css_value : VMINS */
this.$={type:"VminValue",value:parseFloat(n[e]),unit:"vmin"};break;case 28:
/*! Production::    css_value : VMAXS */
this.$={type:"VmaxValue",value:parseFloat(n[e]),unit:"vmax"};break;case 29:
/*! Production::    css_value : PERCENTAGE */
this.$={type:"PercentageValue",value:parseFloat(n[e]),unit:"%"};break;case 30:
/*! Production::    css_value : SUB css_value */
var i=n[e];i.value*=-1,this.$=i}},table:function(t){for(var e=[],n=t.len,r=t.symbol,i=t.type,o=t.state,a=t.mode,u=t.goto,s=0,l=n.length;s<l;s++){for(var c=n[s],f={},h=0;h<c;h++){var p=r.shift();switch(i.shift()){case 2:f[p]=[a.shift(),u.shift()];break;case 0:f[p]=o.shift();break;default:f[p]=[3]}}e.push(f)}return e}({len:r([24,1,5,23,1,18,e,[0,3],1,e,[0,16],e,[23,4],n,[28,3],0,0,16,1,6,6,e,[0,3],5,1,2,n,[37,3],n,[20,3],5,0,0]),symbol:r([4,7,9,11,12,e,[15,19,1],1,1,e,[3,4,1],n,[30,19],n,[29,4],7,4,10,11,n,[22,14],n,[19,3],n,[43,22],n,[23,69],n,[139,4],8,n,[51,24],4,n,[138,15],13,n,[186,5],8,n,[6,6],n,[5,5],9,8,14,n,[159,47],n,[60,10]]),type:r([e,[2,19],e,[0,5],1,e,[2,24],e,[0,4],n,[22,19],n,[43,42],n,[23,70],n,[28,25],n,[45,25],n,[113,54]]),state:r([1,2,8,6,7,30,n,[4,3],33,37,n,[5,3],38,n,[4,3],39,n,[4,3],40,n,[4,3],42,n,[21,4],50,n,[5,3],51,n,[4,3]]),mode:r([e,[1,179],e,[2,3],n,[5,5],n,[6,4],e,[1,57]]),goto:r([5,3,4,24,e,[9,15,1],e,[25,5,1],n,[24,19],31,35,32,34,n,[18,14],36,n,[38,19],n,[19,57],n,[118,4],41,n,[24,19],43,35,n,[16,14],44,e,[2,3],28,29,2,e,[3,3],28,29,3,n,[53,4],e,[45,5,1],n,[100,42],52,n,[5,4],53])}),defaultActions:function(t){for(var e={},n=t.idx,r=t.goto,i=0,o=n.length;i<o;i++){e[n[i]]=r[i]}return e}({idx:r([6,7,8,e,[10,16,1],33,34,39,40,41,45,47,52,53]),goto:r([9,10,11,e,[16,14,1],12,1,30,13,e,[4,4,1],14,15,8])}),parseError:function(t,e,n){if(!e.recoverable)throw"function"==typeof this.trace&&this.trace(t),n||(n=this.JisonParserError),new n(t,e);"function"==typeof this.trace&&this.trace(t),e.destroy()},parse:function(t){var e,n=this,r=new Array(128),i=new Array(128),o=new Array(128),a=this.table,u=0,s=0,l=(this.TERROR,this.EOF),c=(this.options.errorRecoveryTokenDiscardCount,[0,54]);e=this.__lexer__?this.__lexer__:this.__lexer__=Object.create(this.lexer);var f={parseError:void 0,quoteName:void 0,lexer:void 0,parser:void 0,pre_parse:void 0,post_parse:void 0,pre_lex:void 0,post_lex:void 0};function h(){var t=e.fastLex();return"number"!=typeof t&&(t=n.symbols_[t]||t),t||l}"function"!=typeof assert||assert,this.yyGetSharedState=function(){return f},function(t,e){for(var n in e)void 0===t[n]&&Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])}(f,this.yy),f.lexer=e,f.parser=this,"function"==typeof f.parseError?this.parseError=function(t,e,n){return n||(n=this.JisonParserError),f.parseError.call(this,t,e,n)}:this.parseError=this.originalParseError,"function"==typeof f.quoteName?this.quoteName=function(t){return f.quoteName.call(this,t)}:this.quoteName=this.originalQuoteName,this.cleanupAfterParse=function(t,n,a){var s,l;n&&((f.post_parse||this.post_parse)&&(l=this.constructParseErrorInfo(null,null,null,!1)),f.post_parse&&void 0!==(s=f.post_parse.call(this,f,t,l))&&(t=s),this.post_parse&&void 0!==(s=this.post_parse.call(this,f,t,l))&&(t=s),l&&l.destroy&&l.destroy());if(this.__reentrant_call_depth>1)return t;if(e.cleanupAfterLex&&e.cleanupAfterLex(a),f&&(f.lexer=void 0,f.parser=void 0,e.yy===f&&(e.yy=void 0)),f=void 0,this.parseError=this.originalParseError,this.quoteName=this.originalQuoteName,r.length=0,i.length=0,o.length=0,u=0,!a){for(var c=this.__error_infos.length-1;c>=0;c--){var h=this.__error_infos[c];h&&"function"==typeof h.destroy&&h.destroy()}this.__error_infos.length=0}return t},this.constructParseErrorInfo=function(t,n,a,l){var c={errStr:t,exception:n,text:e.match,value:e.yytext,token:this.describeSymbol(s)||s,token_id:s,line:e.yylineno,expected:a,recoverable:l,state:p,action:d,new_state:b,symbol_stack:r,state_stack:i,value_stack:o,stack_pointer:u,yy:f,lexer:e,parser:this,destroy:function(){var t=!!this.recoverable;for(var e in this)this.hasOwnProperty(e)&&"object"==typeof e&&(this[e]=void 0);this.recoverable=t}};return this.__error_infos.push(c),c};var p,d,y,v,g,m,_,b,x=function(){var t=e.lex();return"number"!=typeof t&&(t=n.symbols_[t]||t),t||l},O={$:!0,_$:void 0,yy:f},w=!1;try{if(this.__reentrant_call_depth++,e.setInput(t,f),"function"==typeof e.canIUse)e.canIUse().fastLex&&(x=h);for(o[u]=null,i[u]=0,r[u]=0,++u,this.pre_parse&&this.pre_parse.call(this,f),f.pre_parse&&f.pre_parse.call(this,f),b=i[u-1];;){if(p=b,this.defaultActions[p])d=2,b=this.defaultActions[p];else if(s||(s=x()),v=a[p]&&a[p][s]||c,b=v[1],!(d=v[0])){var A,E=this.describeSymbol(s)||s,M=this.collect_expected_token_set(p);A="number"==typeof e.yylineno?"Parse error on line "+(e.yylineno+1)+": ":"Parse error: ","function"==typeof e.showPosition&&(A+="\n"+e.showPosition(69,10)+"\n"),M.length?A+="Expecting "+M.join(", ")+", got unexpected "+E:A+="Unexpected "+E,g=this.constructParseErrorInfo(A,null,M,!1),void 0!==(y=this.parseError(g.errStr,g,this.JisonParserError))&&(w=y);break}switch(d){default:if(d instanceof Array){g=this.constructParseErrorInfo("Parse Error: multiple actions possible at state: "+p+", token: "+s,null,null,!1),void 0!==(y=this.parseError(g.errStr,g,this.JisonParserError))&&(w=y);break}g=this.constructParseErrorInfo("Parsing halted. No viable error recovery approach available due to internal system failure.",null,null,!1),void 0!==(y=this.parseError(g.errStr,g,this.JisonParserError))&&(w=y);break;case 1:r[u]=s,o[u]=e.yytext,i[u]=b,++u,s=0;continue;case 2:if(m=(_=this.productions_[b-1])[1],void 0!==(y=this.performAction.call(O,b,u-1,o))){w=y;break}u-=m;var P=_[0];r[u]=P,o[u]=O.$,b=a[i[u-1]][P],i[u]=b,++u;continue;case 3:-2!==u&&(w=!0,u--,void 0!==o[u]&&(w=o[u]))}break}}catch(t){if(t instanceof this.JisonParserError)throw t;if(e&&"function"==typeof e.JisonLexerError&&t instanceof e.JisonLexerError)throw t;g=this.constructParseErrorInfo("Parsing aborted due to exception.",t,null,!1),w=!1,void 0!==(y=this.parseError(g.errStr,g,this.JisonParserError))&&(w=y)}finally{w=this.cleanupAfterParse(w,!0,!0),this.__reentrant_call_depth--}return w}};i.originalParseError=i.parseError,i.originalQuoteName=i.quoteName;var o=function(){function t(t,e){var n;if(Object.defineProperty(this,"name",{enumerable:!1,writable:!1,value:"JisonLexerError"}),null==t&&(t="???"),Object.defineProperty(this,"message",{enumerable:!1,writable:!0,value:t}),this.hash=e,e&&e.exception instanceof Error){var r=e.exception;this.message=r.message||t,n=r.stack}n||(Error.hasOwnProperty("captureStackTrace")?Error.captureStackTrace(this,this.constructor):n=new Error(t).stack),n&&Object.defineProperty(this,"stack",{enumerable:!1,writable:!1,value:n})}return"function"==typeof Object.setPrototypeOf?Object.setPrototypeOf(t.prototype,Error.prototype):t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t.prototype.name="JisonLexerError",{EOF:1,ERROR:2,__currentRuleSet__:null,__error_infos:[],__decompressed:!1,done:!1,_backtrack:!1,_input:"",_more:!1,_signaled_error_token:!1,conditionStack:[],match:"",matched:"",matches:!1,yytext:"",offset:0,yyleng:0,yylineno:0,yylloc:null,constructLexErrorInfo:function(t,e,n){if(t=""+t,null==n&&(n=!(t.indexOf("\n")>0&&t.indexOf("^")>0)),this.yylloc&&n)if("function"==typeof this.prettyPrintRange){this.prettyPrintRange(this.yylloc);/\n\s*$/.test(t)||(t+="\n"),t+="\n  Erroneous area:\n"+this.prettyPrintRange(this.yylloc)}else if("function"==typeof this.showPosition){var r=this.showPosition();r&&(t.length&&"\n"!==t[t.length-1]&&"\n"!==r[0]?t+="\n"+r:t+=r)}var i={errStr:t,recoverable:!!e,text:this.match,token:null,line:this.yylineno,loc:this.yylloc,yy:this.yy,lexer:this,destroy:function(){var t=!!this.recoverable;for(var e in this)this.hasOwnProperty(e)&&"object"==typeof e&&(this[e]=void 0);this.recoverable=t}};return this.__error_infos.push(i),i},parseError:function(t,e,n){if(n||(n=this.JisonLexerError),this.yy){if(this.yy.parser&&"function"==typeof this.yy.parser.parseError)return this.yy.parser.parseError.call(this,t,e,n)||this.ERROR;if("function"==typeof this.yy.parseError)return this.yy.parseError.call(this,t,e,n)||this.ERROR}throw new n(t,e)},yyerror:function(t){var e="";this.yylloc&&(e=" on line "+(this.yylineno+1));var n=this.constructLexErrorInfo("Lexical error"+e+": "+t,this.options.lexerErrorsAreRecoverable),r=Array.prototype.slice.call(arguments,1);return r.length&&(n.extra_error_attributes=r),this.parseError(n.errStr,n,this.JisonLexerError)||this.ERROR},cleanupAfterLex:function(t){if(this.setInput("",{}),!t){for(var e=this.__error_infos.length-1;e>=0;e--){var n=this.__error_infos[e];n&&"function"==typeof n.destroy&&n.destroy()}this.__error_infos.length=0}return this},clear:function(){this.yytext="",this.yyleng=0,this.match="",this.matches=!1,this._more=!1,this._backtrack=!1;var t=this.yylloc?this.yylloc.last_column:0;this.yylloc={first_line:this.yylineno+1,first_column:t,last_line:this.yylineno+1,last_column:t,range:[this.offset,this.offset]}},setInput:function(t,e){if(this.yy=e||this.yy||{},!this.__decompressed){for(var n=this.rules,r=0,i=n.length;r<i;r++){"number"==typeof(h=n[r])&&(n[r]=n[h])}var o=this.conditions;for(var a in o){var u=o[a],s=u.rules,l=(i=s.length,new Array(i+1)),c=new Array(i+1);for(r=0;r<i;r++){var f=s[r],h=n[f];l[r+1]=h,c[r+1]=f}u.rules=c,u.__rule_regexes=l,u.__rule_count=i}this.__decompressed=!0}return this._input=t||"",this.clear(),this._signaled_error_token=!1,this.done=!1,this.yylineno=0,this.matched="",this.conditionStack=["INITIAL"],this.__currentRuleSet__=null,this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0,range:[0,0]},this.offset=0,this},editRemainingInput:function(t,e){var n=t.call(this,this._input,e);return"string"!=typeof n?n&&(this._input=""+n):this._input=n,this},input:function(){if(!this._input)return null;var t=this._input[0];this.yytext+=t,this.yyleng++,this.offset++,this.match+=t,this.matched+=t;var e=1,n=!1;if("\n"===t)n=!0;else if("\r"===t){n=!0;var r=this._input[1];"\n"===r&&(e++,t+=r,this.yytext+=r,this.yyleng++,this.offset++,this.match+=r,this.matched+=r,this.yylloc.range[1]++)}return n?(this.yylineno++,this.yylloc.last_line++,this.yylloc.last_column=0):this.yylloc.last_column++,this.yylloc.range[1]++,this._input=this._input.slice(e),t},unput:function(t){var e=t.length,n=t.split(/(?:\r\n?|\n)/g);if(this._input=t+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-e),this.yyleng=this.yytext.length,this.offset-=e,this.match=this.match.substr(0,this.match.length-e),this.matched=this.matched.substr(0,this.matched.length-e),n.length>1){this.yylineno-=n.length-1,this.yylloc.last_line=this.yylineno+1;var r=this.match,i=r.split(/(?:\r\n?|\n)/g);1===i.length&&(i=(r=this.matched).split(/(?:\r\n?|\n)/g)),this.yylloc.last_column=i[i.length-1].length}else this.yylloc.last_column-=e;return this.yylloc.range[1]=this.yylloc.range[0]+this.yyleng,this.done=!1,this},more:function(){return this._more=!0,this},reject:function(){if(this.options.backtrack_lexer)this._backtrack=!0;else{var t="";this.yylloc&&(t=" on line "+(this.yylineno+1));var e=this.constructLexErrorInfo("Lexical error"+t+": You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).",!1);this._signaled_error_token=this.parseError(e.errStr,e,this.JisonLexerError)||this.ERROR}return this},less:function(t){return this.unput(this.match.slice(t))},pastInput:function(t,e){var n=this.matched.substring(0,this.matched.length-this.match.length);t<0?t=n.length:t||(t=20),e<0?e=n.length:e||(e=1);var r=(n=n.substr(2*-t-2)).replace(/\r\n|\r/g,"\n").split("\n");return(n=(r=r.slice(-e)).join("\n")).length>t&&(n="..."+n.substr(-t)),n},upcomingInput:function(t,e){var n=this.match;t<0?t=n.length+this._input.length:t||(t=20),e<0?e=t:e||(e=1),n.length<2*t+2&&(n+=this._input.substring(0,2*t+2));var r=n.replace(/\r\n|\r/g,"\n").split("\n");return(n=(r=r.slice(0,e)).join("\n")).length>t&&(n=n.substring(0,t)+"..."),n},showPosition:function(t,e){var n=this.pastInput(t).replace(/\s/g," "),r=new Array(n.length+1).join("-");return n+this.upcomingInput(e).replace(/\s/g," ")+"\n"+r+"^"},deriveLocationInfo:function(t,e,n,r){var i={first_line:1,first_column:0,last_line:1,last_column:0,range:[0,0]};return t&&(i.first_line=0|t.first_line,i.last_line=0|t.last_line,i.first_column=0|t.first_column,i.last_column=0|t.last_column,t.range&&(i.range[0]=0|t.range[0],i.range[1]=0|t.range[1])),(i.first_line<=0||i.last_line<i.first_line)&&(i.first_line<=0&&e&&(i.first_line=0|e.last_line,i.first_column=0|e.last_column,e.range&&(i.range[0]=0|t.range[1])),(i.last_line<=0||i.last_line<i.first_line)&&n&&(i.last_line=0|n.first_line,i.last_column=0|n.first_column,n.range&&(i.range[1]=0|t.range[0])),i.first_line<=0&&r&&(i.last_line<=0||r.last_line<=i.last_line)&&(i.first_line=0|r.first_line,i.first_column=0|r.first_column,r.range&&(i.range[0]=0|r.range[0])),i.last_line<=0&&r&&(i.first_line<=0||r.first_line>=i.first_line)&&(i.last_line=0|r.last_line,i.last_column=0|r.last_column,r.range&&(i.range[1]=0|r.range[1]))),i.last_line<=0&&(i.first_line<=0?(i.first_line=this.yylloc.first_line,i.last_line=this.yylloc.last_line,i.first_column=this.yylloc.first_column,i.last_column=this.yylloc.last_column,i.range[0]=this.yylloc.range[0],i.range[1]=this.yylloc.range[1]):(i.last_line=this.yylloc.last_line,i.last_column=this.yylloc.last_column,i.range[1]=this.yylloc.range[1])),i.first_line<=0&&(i.first_line=i.last_line,i.first_column=0,i.range[1]=i.range[0]),i.first_column<0&&(i.first_column=0),i.last_column<0&&(i.last_column=i.first_column>0?i.first_column:80),i},prettyPrintRange:function(t,e,n){t=this.deriveLocationInfo(t,e,n);var r=(this.matched+this._input).split("\n"),i=Math.max(1,e?e.first_line:t.first_line-3),o=Math.max(1,n?n.last_line:t.last_line+1),a=1+Math.log10(1|o)|0,u=new Array(a).join(" "),s=[],l=r.slice(i-1,o+1).map((function(e,n){var r=n+i,o=(u+r).substr(-a)+": "+e,l=new Array(a+1).join("^"),c=3,f=0;(r===t.first_line?(c+=t.first_column,f=Math.max(2,(r===t.last_line?t.last_column:e.length)-t.first_column+1)):r===t.last_line?f=Math.max(2,t.last_column+1):r>t.first_line&&r<t.last_line&&(f=Math.max(2,e.length+1)),f)&&(o+="\n"+l+new Array(c).join(".")+new Array(f).join("^"),e.trim().length>0&&s.push(n));return o=o.replace(/\t/g," ")}));if(s.length>4){var c=s[1]+1,f=s[s.length-2]-1,h=new Array(a+1).join(" ")+"  (...continued...)";h+="\n"+new Array(a+1).join("-")+"  (---------------)",l.splice(c,f-c+1,h)}return l.join("\n")},describeYYLLOC:function(t,e){var n,r=t.first_line,i=t.last_line,o=t.first_column,a=t.last_column;if(0===i-r?(n="line "+r+", ",n+=a-o<=1?"column "+o:"columns "+o+" .. "+a):n="lines "+r+"(column "+o+") .. "+i+"(column "+a+")",t.range&&e){var u=t.range[0],s=t.range[1]-1;n+=s<=u?" {String Offset: "+u+"}":" {String Offset range: "+u+" .. "+s+"}"}return n},test_match:function(t,e){var n,r,i,o,a;if(this.options.backtrack_lexer&&(i={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.yylloc.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column,range:this.yylloc.range.slice(0)},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done}),a=(o=t[0]).length,(r=o.split(/(?:\r\n?|\n)/g)).length>1?(this.yylineno+=r.length-1,this.yylloc.last_line=this.yylineno+1,this.yylloc.last_column=r[r.length-1].length):this.yylloc.last_column+=a,this.yytext+=o,this.match+=o,this.matched+=o,this.matches=t,this.yyleng=this.yytext.length,this.yylloc.range[1]+=a,this.offset+=a,this._more=!1,this._backtrack=!1,this._input=this._input.slice(a),n=this.performAction.call(this,this.yy,e,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),n)return n;if(this._backtrack){for(var u in i)this[u]=i[u];return this.__currentRuleSet__=null,!1}return!!this._signaled_error_token&&(n=this._signaled_error_token,this._signaled_error_token=!1,n)},next:function(){if(this.done)return this.clear(),this.EOF;var t,e,n,r;this._input||(this.done=!0),this._more||this.clear();var i=this.__currentRuleSet__;if(!(i||(i=this.__currentRuleSet__=this._currentRules())&&i.rules)){var o="";this.options.trackPosition&&(o=" on line "+(this.yylineno+1));var a=this.constructLexErrorInfo("Internal lexer engine error"+o+': The lex grammar programmer pushed a non-existing condition name "'+this.topState()+'"; this is a fatal error and should be reported to the application programmer team!',!1);return this.parseError(a.errStr,a,this.JisonLexerError)||this.ERROR}for(var u=i.rules,s=i.__rule_regexes,l=i.__rule_count,c=1;c<=l;c++)if((n=this._input.match(s[c]))&&(!e||n[0].length>e[0].length)){if(e=n,r=c,this.options.backtrack_lexer){if(!1!==(t=this.test_match(n,u[c])))return t;if(this._backtrack){e=void 0;continue}return!1}if(!this.options.flex)break}if(e)return!1!==(t=this.test_match(e,u[r]))&&t;if(this._input){o="";this.options.trackPosition&&(o=" on line "+(this.yylineno+1));a=this.constructLexErrorInfo("Lexical error"+o+": Unrecognized text.",this.options.lexerErrorsAreRecoverable);var f=this._input,h=this.topState(),p=this.conditionStack.length;return(t=this.parseError(a.errStr,a,this.JisonLexerError)||this.ERROR)===this.ERROR&&(this.matches||f!==this._input||h!==this.topState()||p!==this.conditionStack.length||this.input()),t}return this.done=!0,this.clear(),this.EOF},lex:function(){var t;for("function"==typeof this.pre_lex&&(t=this.pre_lex.call(this,0)),"function"==typeof this.options.pre_lex&&(t=this.options.pre_lex.call(this,t)||t),this.yy&&"function"==typeof this.yy.pre_lex&&(t=this.yy.pre_lex.call(this,t)||t);!t;)t=this.next();return this.yy&&"function"==typeof this.yy.post_lex&&(t=this.yy.post_lex.call(this,t)||t),"function"==typeof this.options.post_lex&&(t=this.options.post_lex.call(this,t)||t),"function"==typeof this.post_lex&&(t=this.post_lex.call(this,t)||t),t},fastLex:function(){for(var t;!t;)t=this.next();return t},canIUse:function(){return{fastLex:!("function"==typeof this.pre_lex||"function"==typeof this.options.pre_lex||this.yy&&"function"==typeof this.yy.pre_lex||this.yy&&"function"==typeof this.yy.post_lex||"function"==typeof this.options.post_lex||"function"==typeof this.post_lex)&&"function"==typeof this.fastLex}},begin:function(t){return this.pushState(t)},pushState:function(t){return this.conditionStack.push(t),this.__currentRuleSet__=null,this},popState:function(){return this.conditionStack.length-1>0?(this.__currentRuleSet__=null,this.conditionStack.pop()):this.conditionStack[0]},topState:function(t){return(t=this.conditionStack.length-1-Math.abs(t||0))>=0?this.conditionStack[t]:"INITIAL"},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]]:this.conditions.INITIAL},stateStackSize:function(){return this.conditionStack.length},options:{trackPosition:!0},JisonLexerError:t,performAction:function(t,e,n){switch(e){case 1:
/*! Conditions:: INITIAL */
/*! Rule::       \s+ */
break;default:return this.simpleCaseActionClusters[e]}},simpleCaseActionClusters:{
/*! Conditions:: INITIAL */
/*! Rule::       (--[0-9a-z-A-Z-]*) */
0:13,
/*! Conditions:: INITIAL */
/*! Rule::       \* */
2:5,
/*! Conditions:: INITIAL */
/*! Rule::       \/ */
3:6,
/*! Conditions:: INITIAL */
/*! Rule::       \+ */
4:3,
/*! Conditions:: INITIAL */
/*! Rule::       - */
5:4,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)px\b */
6:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)cm\b */
7:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)mm\b */
8:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)in\b */
9:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)pt\b */
10:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)pc\b */
11:15,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)deg\b */
12:16,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)grad\b */
13:16,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)rad\b */
14:16,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)turn\b */
15:16,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)s\b */
16:17,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ms\b */
17:17,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)Hz\b */
18:18,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)kHz\b */
19:18,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dpi\b */
20:19,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dpcm\b */
21:19,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dppx\b */
22:19,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)em\b */
23:20,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ex\b */
24:21,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ch\b */
25:22,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)rem\b */
26:23,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vw\b */
27:25,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vh\b */
28:24,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vmin\b */
29:26,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vmax\b */
30:27,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)% */
31:28,
/*! Conditions:: INITIAL */
/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)\b */
32:11,
/*! Conditions:: INITIAL */
/*! Rule::       (calc) */
33:9,
/*! Conditions:: INITIAL */
/*! Rule::       (var) */
34:12,
/*! Conditions:: INITIAL */
/*! Rule::       ([a-z]+) */
35:10,
/*! Conditions:: INITIAL */
/*! Rule::       \( */
36:7,
/*! Conditions:: INITIAL */
/*! Rule::       \) */
37:8,
/*! Conditions:: INITIAL */
/*! Rule::       , */
38:14,
/*! Conditions:: INITIAL */
/*! Rule::       $ */
39:1},rules:[/^(?:(--[\d\-A-Za-z]*))/,/^(?:\s+)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:(\d+(\.\d*)?|\.\d+)px\b)/,/^(?:(\d+(\.\d*)?|\.\d+)cm\b)/,/^(?:(\d+(\.\d*)?|\.\d+)mm\b)/,/^(?:(\d+(\.\d*)?|\.\d+)in\b)/,/^(?:(\d+(\.\d*)?|\.\d+)pt\b)/,/^(?:(\d+(\.\d*)?|\.\d+)pc\b)/,/^(?:(\d+(\.\d*)?|\.\d+)deg\b)/,/^(?:(\d+(\.\d*)?|\.\d+)grad\b)/,/^(?:(\d+(\.\d*)?|\.\d+)rad\b)/,/^(?:(\d+(\.\d*)?|\.\d+)turn\b)/,/^(?:(\d+(\.\d*)?|\.\d+)s\b)/,/^(?:(\d+(\.\d*)?|\.\d+)ms\b)/,/^(?:(\d+(\.\d*)?|\.\d+)Hz\b)/,/^(?:(\d+(\.\d*)?|\.\d+)kHz\b)/,/^(?:(\d+(\.\d*)?|\.\d+)dpi\b)/,/^(?:(\d+(\.\d*)?|\.\d+)dpcm\b)/,/^(?:(\d+(\.\d*)?|\.\d+)dppx\b)/,/^(?:(\d+(\.\d*)?|\.\d+)em\b)/,/^(?:(\d+(\.\d*)?|\.\d+)ex\b)/,/^(?:(\d+(\.\d*)?|\.\d+)ch\b)/,/^(?:(\d+(\.\d*)?|\.\d+)rem\b)/,/^(?:(\d+(\.\d*)?|\.\d+)vw\b)/,/^(?:(\d+(\.\d*)?|\.\d+)vh\b)/,/^(?:(\d+(\.\d*)?|\.\d+)vmin\b)/,/^(?:(\d+(\.\d*)?|\.\d+)vmax\b)/,/^(?:(\d+(\.\d*)?|\.\d+)%)/,/^(?:(\d+(\.\d*)?|\.\d+)\b)/,/^(?:(calc))/,/^(?:(var))/,/^(?:([a-z]+))/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:$)/],conditions:{INITIAL:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],inclusive:!0}}}}();function a(){this.yy={}}return i.lexer=o,a.prototype=i,i.Parser=a,new a}();e.parser=r,e.Parser=r.Parser,e.parse=function(){return r.parse.apply(r,arguments)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(240),o=(r=i)&&r.__esModule?r:{default:r};e.default=function(t,e,n){switch(t.type){case"LengthValue":case"AngleValue":case"TimeValue":case"FrequencyValue":case"ResolutionValue":return function(t,e,n){e.type===t.type&&(e={type:t.type,value:(0,o.default)(e.value,e.unit,t.unit,n),unit:t.unit});return{left:t,right:e}}(t,e,n);default:return{left:t,right:e}}},t.exports=e.default},function(t,e){var n={px:{px:1,cm:96/2.54,mm:96/25.4,in:96,pt:96/72,pc:16},cm:{px:2.54/96,cm:1,mm:.1,in:2.54,pt:2.54/72,pc:2.54/6},mm:{px:25.4/96,cm:10,mm:1,in:25.4,pt:25.4/72,pc:25.4/6},in:{px:1/96,cm:1/2.54,mm:1/25.4,in:1,pt:1/72,pc:1/6},pt:{px:.75,cm:72/2.54,mm:72/25.4,in:72,pt:1,pc:12},pc:{px:6/96,cm:6/2.54,mm:6/25.4,in:6,pt:6/72,pc:1},deg:{deg:1,grad:.9,rad:180/Math.PI,turn:360},grad:{deg:400/360,grad:1,rad:200/Math.PI,turn:400},rad:{deg:Math.PI/180,grad:Math.PI/200,rad:1,turn:2*Math.PI},turn:{deg:1/360,grad:1/400,rad:.5/Math.PI,turn:1},s:{s:1,ms:.001},ms:{s:1e3,ms:1},Hz:{Hz:1,kHz:1e3},kHz:{Hz:.001,kHz:1},dpi:{dpi:1,dpcm:1/2.54,dppx:1/96},dpcm:{dpi:2.54,dpcm:1,dppx:2.54/96},dppx:{dpi:96,dpcm:96/2.54,dppx:1}};t.exports=function(t,e,r,i){if(!n.hasOwnProperty(r))throw new Error("Cannot convert to "+r);if(!n[r].hasOwnProperty(e))throw new Error("Cannot convert from "+e+" to "+r);var o=n[r][e]*t;return!1!==i?(i=Math.pow(10,parseInt(i)||5),Math.round(o*i)/i):o}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){var a=function t(e,n){switch(e.type){case"MathExpression":var a=e.left,u=e.right,s=e.operator,l="";return"MathExpression"===a.type&&i[s]<i[a.operator]?l+="("+t(a,n)+")":l+=t(a,n),l+=" "+e.operator+" ","MathExpression"===u.type&&i[s]<i[u.operator]?l+="("+t(u,n)+")":"MathExpression"===u.type&&"-"===s&&["+","-"].includes(u.operator)?(u.operator=(0,r.flip)(u.operator),l+=t(u,n)):l+=t(u,n),l;case"Value":return o(e.value,n);case"CssVariable":return e.fallback?"var("+e.value+", "+t(e.fallback,n,!0)+")":"var("+e.value+")";case"Calc":return e.prefix?"-"+e.prefix+"-calc("+t(e.value,n)+")":"calc("+t(e.value,n)+")";default:return o(e.value,n)+e.unit}}(e,n);return"MathExpression"===e.type&&(a=t+"("+a+")"),a};var r=n(97),i={"*":0,"/":0,"+":1,"-":1};function o(t,e){if(!1!==e){var n=Math.pow(10,e);return Math.round(t*n)/n}return t}t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"getTickValues",{enumerable:!0,get:function(){return r.getTickValues}}),Object.defineProperty(e,"getNiceTickValues",{enumerable:!0,get:function(){return r.getNiceTickValues}}),Object.defineProperty(e,"getTickValuesFixedDomain",{enumerable:!0,get:function(){return r.getTickValuesFixedDomain}});var r=n(243)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getTickValuesFixedDomain=e.getTickValues=e.getNiceTickValues=void 0;var r=a(n(98)),i=n(99),o=a(n(244));function a(t){return t&&t.__esModule?t:{default:t}}function u(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function l(t){var e=s(t,2),n=e[0],r=e[1],i=n,o=r;return n>r&&(i=r,o=n),[i,o]}function c(t,e,n){if(t.lte(0))return new r.default(0);var i=o.default.getDigitCount(t.toNumber()),a=new r.default(10).pow(i),u=t.div(a),s=1!==i?.05:.1,l=new r.default(Math.ceil(u.div(s).toNumber())).add(n).mul(s).mul(a);return e?l:new r.default(Math.ceil(l))}function f(t,e,n){var a=1,u=new r.default(t);if(!u.isint()&&n){var s=Math.abs(t);s<1?(a=new r.default(10).pow(o.default.getDigitCount(t)-1),u=new r.default(Math.floor(u.div(a).toNumber())).mul(a)):s>1&&(u=new r.default(Math.floor(t)))}else 0===t?u=new r.default(Math.floor((e-1)/2)):n||(u=new r.default(Math.floor(t)));var l=Math.floor((e-1)/2);return(0,i.compose)((0,i.map)((function(t){return u.add(new r.default(t-l).mul(a)).toNumber()})),i.range)(0,e)}function h(t,e,n,i){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;if(!Number.isFinite((e-t)/(n-1)))return{step:new r.default(0),tickMin:new r.default(0),tickMax:new r.default(0)};var a,u=c(new r.default(e).sub(t).div(n-1),i,o);a=t<=0&&e>=0?new r.default(0):(a=new r.default(t).add(e).div(2)).sub(new r.default(a).mod(u));var s=Math.ceil(a.sub(t).div(u).toNumber()),l=Math.ceil(new r.default(e).sub(a).div(u).toNumber()),f=s+l+1;return f>n?h(t,e,n,i,o+1):(f<n&&(l=e>0?l+(n-f):l,s=e>0?s:s+(n-f)),{step:u,tickMin:a.sub(new r.default(s).mul(u)),tickMax:a.add(new r.default(l).mul(u))})}var p=(0,i.memoize)((function(t){var e=s(t,2),n=e[0],a=e[1],c=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,p=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],d=Math.max(c,2),y=l([n,a]),v=s(y,2),g=v[0],m=v[1];if(g===-1/0||m===1/0){var _=m===1/0?[g].concat(u((0,i.range)(0,c-1).map((function(){return 1/0})))):u((0,i.range)(0,c-1).map((function(){return-1/0}))).concat([m]);return n>a?(0,i.reverse)(_):_}if(g===m)return f(g,c,p);var b=h(g,m,d,p),x=b.step,O=b.tickMin,w=b.tickMax,A=o.default.rangeStep(O,w.add(new r.default(.1).mul(x)),x);return n>a?(0,i.reverse)(A):A}));e.getNiceTickValues=p;var d=(0,i.memoize)((function(t){var e=s(t,2),n=e[0],o=e[1],a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,u=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],h=Math.max(a,2),p=l([n,o]),d=s(p,2),y=d[0],v=d[1];if(y===-1/0||v===1/0)return[n,o];if(y===v)return f(y,a,u);var g=c(new r.default(v).sub(y).div(h-1),u,0),m=(0,i.compose)((0,i.map)((function(t){return new r.default(y).add(new r.default(t).mul(g)).toNumber()})),i.range),_=m(0,h).filter((function(t){return t>=y&&t<=v}));return n>o?(0,i.reverse)(_):_}));e.getTickValues=d;var y=(0,i.memoize)((function(t,e){var n=s(t,2),a=n[0],f=n[1],h=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],p=l([a,f]),d=s(p,2),y=d[0],v=d[1];if(y===-1/0||v===1/0)return[a,f];if(y===v)return[y];var g=Math.max(e,2),m=c(new r.default(v).sub(y).div(g-1),h,0),_=u(o.default.rangeStep(new r.default(y),new r.default(v).sub(new r.default(.99).mul(m)),m)).concat([v]);return a>f?(0,i.reverse)(_):_}));e.getTickValuesFixedDomain=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i=(r=n(98))&&r.__esModule?r:{default:r},o=n(99);var a={rangeStep:function(t,e,n){for(var r=new i.default(t),o=0,a=[];r.lt(e)&&o<1e5;)a.push(r.toNumber()),r=r.add(n),o++;return a},getDigitCount:function(t){return 0===t?1:Math.floor(new i.default(t).abs().log(10).toNumber())+1},interpolateNumber:(0,o.curry)((function(t,e,n){var r=+t;return r+n*(+e-r)})),uninterpolateNumber:(0,o.curry)((function(t,e,n){var r=e-+t;return(n-t)/(r=r||1/0)})),uninterpolateTruncation:(0,o.curry)((function(t,e,n){var r=e-+t;return r=r||1/0,Math.max(0,Math.min(1,(n-t)/r))}))};e.default=a},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&i(e,t,n);return o(e,t),e},u=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Customized=void 0;var l=a(n(0)),c=s(n(3)),f=n(6),h=n(26);function p(t){var e,n=t.component,i=u(t,["component"]);return l.isValidElement(n)?e=l.cloneElement(n,i):c.default.isFunction(n)?e=l.createElement(n,i):h.warn(!1,"Customized's props `component` must be React.element or Function, but got %s.",r(n)),l.default.createElement(f.Layer,{className:"recharts-customized-wrapper"},e)}e.Customized=p,p.displayName="Customized"},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.PolarGrid=void 0;var l=s(n(0)),c=n(11),f=n(2),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.getPolygonPath=function(t){var e=this.props,n=e.cx,r=e.cy,i=e.polarAngles,o="";return i.forEach((function(e,i){var a=c.polarToCartesian(n,r,t,e);o+=i?"L "+a.x+","+a.y:"M "+a.x+","+a.y})),o+="Z"},e.prototype.renderPolarAngles=function(){var t=this.props,e=t.cx,n=t.cy,r=t.innerRadius,i=t.outerRadius,a=t.polarAngles,u=t.radialLines;if(!a||!a.length||!u)return null;var s=o({stroke:"#ccc"},f.filterProps(this.props));return l.default.createElement("g",{className:"recharts-polar-grid-angle"},a.map((function(t,a){var u=c.polarToCartesian(e,n,r,t),f=c.polarToCartesian(e,n,i,t);return l.default.createElement("line",o({},s,{key:"line-"+a,x1:u.x,y1:u.y,x2:f.x,y2:f.y}))})))},e.prototype.renderConcentricCircle=function(t,e,n){var r=this.props,i=r.cx,a=r.cy,u=o(o(o({stroke:"#ccc"},f.filterProps(this.props)),{fill:"none"}),n);return l.default.createElement("circle",o({},u,{className:"recharts-polar-grid-concentric-circle",key:"circle-"+e,cx:i,cy:a,r:t}))},e.prototype.renderConcentricPolygon=function(t,e,n){var r=o(o(o({stroke:"#ccc"},f.filterProps(this.props)),{fill:"none"}),n);return l.default.createElement("path",o({},r,{className:"recharts-polar-grid-concentric-polygon",key:"path-"+e,d:this.getPolygonPath(t)}))},e.prototype.renderConcentricPath=function(){var t=this,e=this.props,n=e.polarRadius,r=e.gridType;return n&&n.length?l.default.createElement("g",{className:"recharts-polar-grid-concentric"},n.map((function(e,n){return"circle"===r?t.renderConcentricCircle(e,n):t.renderConcentricPolygon(e,n)}))):null},e.prototype.render=function(){return this.props.outerRadius<=0?null:l.default.createElement("g",{className:"recharts-polar-grid"},this.renderPolarAngles(),this.renderConcentricPath())},e.displayName="PolarGrid",e.defaultProps={cx:0,cy:0,innerRadius:0,outerRadius:0,gridType:"polygon",radialLines:!0},e}(l.PureComponent);e.PolarGrid=h},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.generatePrefixStyle=void 0;var i=["Webkit","Moz","O","ms"];e.generatePrefixStyle=function(t,e){if(!t)return null;var n=t.replace(/(\w)/,(function(t){return t.toUpperCase()})),o=i.reduce((function(t,i){var o;return r(r({},t),((o={})[i+n]=e,o))}),{});return o[t]=e,o}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.CartesianGrid=void 0;var f=s(n(0)),h=c(n(3)),p=n(5),d=n(2),y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.renderLineItem=function(t,e){var n;if(f.default.isValidElement(t))n=f.default.cloneElement(t,e);else if(h.default.isFunction(t))n=t(e);else{var r=e.x1,i=e.y1,a=e.x2,u=e.y2,s=e.key,c=l(e,["x1","y1","x2","y2","key"]);n=f.default.createElement("line",o({},d.filterProps(c),{x1:r,y1:i,x2:a,y2:u,fill:"none",key:s}))}return n},e.prototype.renderHorizontal=function(t){var n=this,r=this.props,i=r.x,a=r.width,u=r.horizontal;if(!t||!t.length)return null;var s=t.map((function(t,r){var s=o(o({},n.props),{x1:i,y1:t,x2:i+a,y2:t,key:"line-"+r,index:r});return e.renderLineItem(u,s)}));return f.default.createElement("g",{className:"recharts-cartesian-grid-horizontal"},s)},e.prototype.renderVertical=function(t){var n=this,r=this.props,i=r.y,a=r.height,u=r.vertical;if(!t||!t.length)return null;var s=t.map((function(t,r){var s=o(o({},n.props),{x1:t,y1:i,x2:t,y2:i+a,key:"line-"+r,index:r});return e.renderLineItem(u,s)}));return f.default.createElement("g",{className:"recharts-cartesian-grid-vertical"},s)},e.prototype.renderVerticalStripes=function(t){var e=this.props.verticalFill;if(!e||!e.length)return null;var n=this.props,r=n.fillOpacity,i=n.x,o=n.y,a=n.width,u=n.height,s=t.slice().sort((function(t,e){return t-e}));i!==s[0]&&s.unshift(0);var l=s.map((function(t,n){var l=s[n+1]?s[n+1]-t:i+a-t;if(l<=0)return null;var c=n%e.length;return f.default.createElement("rect",{key:"react-"+n,x:Math.round(t+i-i),y:o,width:l,height:u,stroke:"none",fill:e[c],fillOpacity:r,className:"recharts-cartesian-grid-bg"})}));return f.default.createElement("g",{className:"recharts-cartesian-gridstripes-vertical"},l)},e.prototype.renderHorizontalStripes=function(t){var e=this.props.horizontalFill;if(!e||!e.length)return null;var n=this.props,r=n.fillOpacity,i=n.x,o=n.y,a=n.width,u=n.height,s=t.slice().sort((function(t,e){return t-e}));o!==s[0]&&s.unshift(0);var l=s.map((function(t,n){var l=s[n+1]?s[n+1]-t:o+u-t;if(l<=0)return null;var c=n%e.length;return f.default.createElement("rect",{key:"react-"+n,y:Math.round(t+o-o),x:i,height:l,width:a,stroke:"none",fill:e[c],fillOpacity:r,className:"recharts-cartesian-grid-bg"})}));return f.default.createElement("g",{className:"recharts-cartesian-gridstripes-horizontal"},l)},e.prototype.renderBackground=function(){var t=this.props.fill;if(!t||"none"===t)return null;var e=this.props,n=e.fillOpacity,r=e.x,i=e.y,o=e.width,a=e.height;return f.default.createElement("rect",{x:r,y:i,width:o,height:a,stroke:"none",fill:t,fillOpacity:n,className:"recharts-cartesian-grid-bg"})},e.prototype.render=function(){var t=this.props,e=t.x,n=t.y,r=t.width,i=t.height,o=t.horizontal,a=t.vertical,u=t.horizontalCoordinatesGenerator,s=t.verticalCoordinatesGenerator,l=t.xAxis,c=t.yAxis,d=t.offset,y=t.chartWidth,v=t.chartHeight;if(!p.isNumber(r)||r<=0||!p.isNumber(i)||i<=0||!p.isNumber(e)||e!==+e||!p.isNumber(n)||n!==+n)return null;var g=this.props,m=g.horizontalPoints,_=g.verticalPoints;return m&&m.length||!h.default.isFunction(u)||(m=u({yAxis:c,width:y,height:v,offset:d})),_&&_.length||!h.default.isFunction(s)||(_=s({xAxis:l,width:y,height:v,offset:d})),f.default.createElement("g",{className:"recharts-cartesian-grid"},this.renderBackground(),o&&this.renderHorizontal(m),a&&this.renderVertical(_),o&&this.renderHorizontalStripes(m),a&&this.renderVerticalStripes(_))},e.displayName="CartesianGrid",e.defaultProps={horizontal:!0,vertical:!0,horizontalPoints:[],verticalPoints:[],stroke:"#ccc",fill:"none",verticalFill:[],horizontalFill:[]},e}(f.PureComponent);e.CartesianGrid=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LineChart=void 0;var r=n(16),i=n(66),o=n(30),a=n(31),u=n(18);e.LineChart=r.generateCategoricalChart({chartName:"LineChart",GraphicalChild:i.Line,axisComponents:[{axisType:"xAxis",AxisComp:o.XAxis},{axisType:"yAxis",AxisComp:a.YAxis}],formatAxisMap:u.formatAxisMap})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.detectReferenceElementsDomain=void 0;var r=n(106),i=n(105),o=n(107),a=n(49),u=n(9),s=n(5);e.detectReferenceElementsDomain=function(t,e,n,l,c){var f=u.findAllByType(t,i.ReferenceLine.displayName),h=u.findAllByType(t,r.ReferenceDot.displayName),p=f.concat(h),d=u.findAllByType(t,o.ReferenceArea.displayName),y=l+"Id",v=l[0],g=e;if(p.length&&(g=p.reduce((function(t,e){if(e.props[y]===n&&a.ifOverflowMatches(e.props,"extendDomain")&&s.isNumber(e.props[v])){var r=e.props[v];return[Math.min(t[0],r),Math.max(t[1],r)]}return t}),g)),d.length){var m=v+"1",_=v+"2";g=d.reduce((function(t,e){if(e.props[y]===n&&a.ifOverflowMatches(e.props,"extendDomain")&&s.isNumber(e.props[m])&&s.isNumber(e.props[_])){var r=e.props[m],i=e.props[_];return[Math.min(t[0],r,i),Math.max(t[1],r,i)]}return t}),g)}return c&&c.length&&(g=c.reduce((function(t,e){return s.isNumber(e)?[Math.min(t[0],e),Math.max(t[1],e)]:t}),g)),g}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.SYNC_EVENT=e.eventCenter=void 0;var i=new(r(n(252)).default);e.eventCenter=i,i.setMaxListeners&&i.setMaxListeners(10),e.SYNC_EVENT="recharts.syncMouseEvents"},function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty,i="~";function o(){}function a(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function u(t,e,n,r,o){if("function"!=typeof n)throw new TypeError("The listener must be a function");var u=new a(n,r||t,o),s=i?i+e:e;return t._events[s]?t._events[s].fn?t._events[s]=[t._events[s],u]:t._events[s].push(u):(t._events[s]=u,t._eventsCount++),t}function s(t,e){0==--t._eventsCount?t._events=new o:delete t._events[e]}function l(){this._events=new o,this._eventsCount=0}Object.create&&(o.prototype=Object.create(null),(new o).__proto__||(i=!1)),l.prototype.eventNames=function(){var t,e,n=[];if(0===this._eventsCount)return n;for(e in t=this._events)r.call(t,e)&&n.push(i?e.slice(1):e);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(t)):n},l.prototype.listeners=function(t){var e=i?i+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var r=0,o=n.length,a=new Array(o);r<o;r++)a[r]=n[r].fn;return a},l.prototype.listenerCount=function(t){var e=i?i+t:t,n=this._events[e];return n?n.fn?1:n.length:0},l.prototype.emit=function(t,e,n,r,o,a){var u=i?i+t:t;if(!this._events[u])return!1;var s,l,c=this._events[u],f=arguments.length;if(c.fn){switch(c.once&&this.removeListener(t,c.fn,void 0,!0),f){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,e),!0;case 3:return c.fn.call(c.context,e,n),!0;case 4:return c.fn.call(c.context,e,n,r),!0;case 5:return c.fn.call(c.context,e,n,r,o),!0;case 6:return c.fn.call(c.context,e,n,r,o,a),!0}for(l=1,s=new Array(f-1);l<f;l++)s[l-1]=arguments[l];c.fn.apply(c.context,s)}else{var h,p=c.length;for(l=0;l<p;l++)switch(c[l].once&&this.removeListener(t,c[l].fn,void 0,!0),f){case 1:c[l].fn.call(c[l].context);break;case 2:c[l].fn.call(c[l].context,e);break;case 3:c[l].fn.call(c[l].context,e,n);break;case 4:c[l].fn.call(c[l].context,e,n,r);break;default:if(!s)for(h=1,s=new Array(f-1);h<f;h++)s[h-1]=arguments[h];c[l].fn.apply(c[l].context,s)}}return!0},l.prototype.on=function(t,e,n){return u(this,t,e,n,!1)},l.prototype.once=function(t,e,n){return u(this,t,e,n,!0)},l.prototype.removeListener=function(t,e,n,r){var o=i?i+t:t;if(!this._events[o])return this;if(!e)return s(this,o),this;var a=this._events[o];if(a.fn)a.fn!==e||r&&!a.once||n&&a.context!==n||s(this,o);else{for(var u=0,l=[],c=a.length;u<c;u++)(a[u].fn!==e||r&&!a[u].once||n&&a[u].context!==n)&&l.push(a[u]);l.length?this._events[o]=1===l.length?l[0]:l:s(this,o)}return this},l.prototype.removeAllListeners=function(t){var e;return t?(e=i?i+t:t,this._events[e]&&s(this,e)):(this._events=new o,this._eventsCount=0),this},l.prototype.off=l.prototype.removeListener,l.prototype.addListener=l.prototype.on,l.prefixed=i,l.EventEmitter=l,t.exports=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BarChart=void 0;var r=n(16),i=n(68),o=n(30),a=n(31),u=n(18);e.BarChart=r.generateCategoricalChart({chartName:"BarChart",GraphicalChild:i.Bar,axisComponents:[{axisType:"xAxis",AxisComp:o.XAxis},{axisType:"yAxis",AxisComp:a.YAxis}],formatAxisMap:u.formatAxisMap})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PieChart=void 0;var r=n(16),i=n(48),o=n(47),a=n(11),u=n(101);e.PieChart=r.generateCategoricalChart({chartName:"PieChart",GraphicalChild:u.Pie,eventType:"item",legendContent:"children",axisComponents:[{axisType:"angleAxis",AxisComp:i.PolarAngleAxis},{axisType:"radiusAxis",AxisComp:o.PolarRadiusAxis}],formatAxisMap:a.formatAxisMap,defaultProps:{layout:"centric",startAngle:0,endAngle:360,cx:"50%",cy:"50%",innerRadius:0,outerRadius:"80%"}})},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Treemap=void 0;var f=s(n(0)),h=c(n(10)),p=c(n(4)),d=c(n(3)),y=n(32),v=n(6),g=n(29),m=n(9),_=n(8),b=n(35),x=n(46),O=n(7),w=n(256),A=n(43),E=n(5),M=n(2),P=function t(e){var n,r=e.depth,i=e.node,a=e.index,u=e.valueKey,s=i.children,l=r+1,c=s&&s.length?s.map((function(e,n){return t({depth:l,node:e,index:n,valueKey:u})})):null;return n=s&&s.length?c.reduce((function(t,e){return t+e.value}),0):d.default.isNaN(i[u])||i[u]<=0?0:i[u],o(o({},i),{children:c,value:n,depth:r,index:a})},S=function(t,e,n){var r=e*e,i=t.area*t.area,o=t.reduce((function(t,e){return{min:Math.min(t.min,e.area),max:Math.max(t.max,e.area)}}),{min:1/0,max:0}),a=o.min,u=o.max;return i?Math.max(r*u*n/i,i/(r*a*n)):1/0},k=function(t,e,n,r){return e===n.width?function(t,e,n,r){var i=e?Math.round(t.area/e):0;(r||i>n.height)&&(i=n.height);for(var a,u=n.x,s=0,l=t.length;s<l;s++)(a=t[s]).x=u,a.y=n.y,a.height=i,a.width=Math.min(i?Math.round(a.area/i):0,n.x+n.width-u),u+=a.width;return a.z=!0,a.width+=n.x+n.width-u,o(o({},n),{y:n.y+i,height:n.height-i})}(t,e,n,r):function(t,e,n,r){var i=e?Math.round(t.area/e):0;(r||i>n.width)&&(i=n.width);for(var a,u=n.y,s=0,l=t.length;s<l;s++)(a=t[s]).x=n.x,a.y=u,a.width=i,a.height=Math.min(i?Math.round(a.area/i):0,n.y+n.height-u),u+=a.height;return a&&(a.z=!1,a.height+=n.y+n.height-u),o(o({},n),{x:n.x+i,width:n.width-i})}(t,e,n,r)},C=function t(e,n){var r=e.children;if(r&&r.length){var i=function(t){return{x:t.x,y:t.y,width:t.width,height:t.height}}(e),a=[],u=1/0,s=void 0,l=void 0,c=Math.min(i.width,i.height),f=function(t,e){var n=e<0?0:e;return t.map((function(t){var e=t.value*n;return o(o({},t),{area:d.default.isNaN(e)||e<=0?0:e})}))}(r,i.width*i.height/e.value),h=f.slice();for(a.area=0;h.length>0;)a.push(s=h[0]),a.area+=s.area,(l=S(a,c,n))<=u?(h.shift(),u=l):(a.area-=a.pop().area,i=k(a,c,i,!1),c=Math.min(i.width,i.height),a.length=a.area=0,u=1/0);return a.length&&(i=k(a,c,i,!0),a.length=a.area=0),o(o({},e),{children:f.map((function(e){return t(e,n)}))})}return e},j={isTooltipActive:!1,isAnimationFinished:!1,activeNode:null,formatRoot:null,currentRoot:null,nestIndex:[]},T=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state=o({},j),e.handleAnimationEnd=function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),d.default.isFunction(t)&&t()},e.handleAnimationStart=function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),d.default.isFunction(t)&&t()},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){if(t.data!==e.prevData||t.type!==e.prevType||t.width!==e.prevWidth||t.height!==e.prevHeight||t.dataKey!==e.prevDataKey||t.aspectRatio!==e.prevAspectRatio){var n=P({depth:0,node:{children:t.data,x:0,y:0,width:t.width,height:t.height},index:0,valueKey:t.dataKey}),r=C(n,t.aspectRatio);return o(o({},j),{formatRoot:r,currentRoot:n,nestIndex:[n],prevAspectRatio:t.aspectRatio,prevData:t.data,prevWidth:t.width,prevHeight:t.height,prevDataKey:t.dataKey,prevType:t.type})}return null},e.prototype.handleMouseEnter=function(t,e){var n=this.props,r=n.onMouseEnter,i=n.children;m.findChildByType(i,b.Tooltip.displayName)?this.setState({isTooltipActive:!0,activeNode:t},(function(){r&&r(t,e)})):r&&r(t,e)},e.prototype.handleMouseLeave=function(t,e){var n=this.props,r=n.onMouseLeave,i=n.children;m.findChildByType(i,b.Tooltip.displayName)?this.setState({isTooltipActive:!1,activeNode:null},(function(){r&&r(t,e)})):r&&r(t,e)},e.prototype.handleClick=function(t){var e=this.props,n=e.onClick;if("nest"===e.type&&t.children){var r=this.props,i=r.width,a=r.height,u=r.dataKey,s=r.aspectRatio,l=P({depth:0,node:o(o({},t),{x:0,y:0,width:i,height:a}),index:0,valueKey:u}),c=C(l,s),f=this.state.nestIndex;f.push(t),this.setState({formatRoot:c,currentRoot:l,nestIndex:f})}n&&n(t)},e.prototype.handleNestIndex=function(t,e){var n=this.state.nestIndex,r=this.props,i=r.width,a=r.height,u=r.dataKey,s=r.aspectRatio,l=P({depth:0,node:o(o({},t),{x:0,y:0,width:i,height:a}),index:0,valueKey:u}),c=C(l,s);n=n.slice(0,e+1),this.setState({formatRoot:c,currentRoot:t,nestIndex:n})},e.prototype.renderItem=function(t,e,n){var r=this,i=this.props,a=i.isAnimationActive,u=i.animationBegin,s=i.animationDuration,l=i.animationEasing,c=i.isUpdateAnimationActive,p=i.type,d=i.animationId,y=i.colorPanel,g=this.state.isAnimationFinished,m=e.width,_=e.height,b=e.x,x=e.y,O=e.depth,w=parseInt(""+(2*Math.random()-1)*m,10),A={};return(n||"nest"===p)&&(A={onMouseEnter:this.handleMouseEnter.bind(this,e),onMouseLeave:this.handleMouseLeave.bind(this,e),onClick:this.handleClick.bind(this,e)}),a?f.default.createElement(h.default,{begin:u,duration:s,isActive:a,easing:l,key:"treemap-"+d,from:{x:b,y:x,width:m,height:_},to:{x:b,y:x,width:m,height:_},onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(n){var i=n.x,d=n.y,m=n.width,_=n.height;return f.default.createElement(h.default,{from:"translate("+w+"px, "+w+"px)",to:"translate(0, 0)",attributeName:"transform",begin:u,easing:l,isActive:a,duration:s},f.default.createElement(v.Layer,o({},A),O>2&&!g?null:r.constructor.renderContentItem(t,o(o({},e),{isAnimationActive:a,isUpdateAnimationActive:!c,width:m,height:_,x:i,y:d}),p,y)))})):f.default.createElement(v.Layer,o({},A),this.constructor.renderContentItem(t,o(o({},e),{isAnimationActive:!1,isUpdateAnimationActive:!1,width:m,height:_,x:b,y:x}),p,y))},e.renderContentItem=function(t,e,n,r){if(f.default.isValidElement(t))return f.default.cloneElement(t,e);if(d.default.isFunction(t))return t(e);var i=e.x,a=e.y,u=e.width,s=e.height,l=e.index,c=null;u>10&&s>10&&e.children&&"nest"===n&&(c=f.default.createElement(x.Polygon,{points:[{x:i+2,y:a+s/2},{x:i+6,y:a+s/2+3},{x:i+2,y:a+s/2+6}]}));var h=null,p=A.getStringSize(e.name);u>20&&s>20&&p.width<u&&p.height<s&&(h=f.default.createElement("text",{x:i+8,y:a+s/2+7,fontSize:14},e.name));var y=r||w.COLOR_PANEL;return f.default.createElement("g",null,f.default.createElement(g.Rectangle,o({fill:e.depth<2?y[l%y.length]:"rgba(255,255,255,0)",stroke:"#fff"},d.default.omit(e,"children"))),c,h)},e.prototype.renderNode=function(t,e,n){var r=this,i=this.props,a=i.content,u=i.type,s=o(o(o({},M.filterProps(this.props)),e),{root:t}),l=!e.children||!e.children.length;return!(this.state.currentRoot.children||[]).filter((function(t){return t.depth===e.depth&&t.name===e.name})).length&&t.depth&&"nest"===u?null:f.default.createElement(v.Layer,{key:"recharts-treemap-node-"+n,className:"recharts-treemap-depth-"+e.depth},this.renderItem(a,s,l),e.children&&e.children.length?e.children.map((function(t,n){return r.renderNode(e,t,n)})):null)},e.prototype.renderAllNodes=function(){var t=this.state.formatRoot;return t?this.renderNode(t,t,0):null},e.prototype.renderTooltip=function(){var t=this.props,e=t.children,n=t.nameKey,r=m.findChildByType(e,b.Tooltip.displayName);if(!r)return null;var i=this.props,o=i.width,a=i.height,u=i.dataKey,s=this.state,l=s.isTooltipActive,c=s.activeNode,h={x:0,y:0,width:o,height:a},p=c?{x:c.x+c.width/2,y:c.y+c.height/2}:null,d=l&&c?[{payload:c,name:O.getValueByDataKey(c,n,""),value:O.getValueByDataKey(c,u)}]:[];return f.default.cloneElement(r,{viewBox:h,active:l,coordinate:p,label:"",payload:d})},e.prototype.renderNestIndex=function(){var t=this,e=this.props,n=e.nameKey,r=e.nestIndexContent,i=this.state.nestIndex;return f.default.createElement("div",{className:"recharts-treemap-nest-index-wrapper",style:{marginTop:"8px",textAlign:"center"}},i.map((function(e,i){var o=d.default.get(e,n,"root"),a=null;return f.default.isValidElement(r)&&(a=f.default.cloneElement(r,e,i)),a=d.default.isFunction(r)?r(e,i):o,f.default.createElement("div",{onClick:t.handleNestIndex.bind(t,e,i),key:"nest-index-"+E.uniqueId(),className:"recharts-treemap-nest-index-box",style:{cursor:"pointer",display:"inline-block",padding:"0 7px",background:"#000",color:"#fff",marginRight:"3px"}},a)})))},e.prototype.render=function(){if(!m.validateWidthHeight(this))return null;var t=this.props,e=t.width,n=t.height,r=t.className,i=t.style,a=t.children,u=t.type,s=l(t,["width","height","className","style","children","type"]),c=M.filterProps(s);return f.default.createElement("div",{className:p.default("recharts-wrapper",r),style:o(o({},i),{position:"relative",cursor:"default",width:e,height:n})},f.default.createElement(y.Surface,o({},c,{width:e,height:"nest"===u?n-30:n}),this.renderAllNodes(),m.filterSvgElements(a)),this.renderTooltip(),"nest"===u&&this.renderNestIndex())},e.displayName="Treemap",e.defaultProps={aspectRatio:.5*(1+Math.sqrt(5)),dataKey:"value",type:"flat",isAnimationActive:!_.Global.isSsr,isUpdateAnimationActive:!_.Global.isSsr,animationBegin:0,animationDuration:1500,animationEasing:"linear"},e}(f.PureComponent);e.Treemap=T},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.COLOR_PANEL=void 0,e.COLOR_PANEL=["#1890FF","#66B5FF","#41D9C7","#2FC25B","#6EDB8F","#9AE65C","#FACC14","#E6965C","#57AD71","#223273","#738AE6","#7564CC","#8543E0","#A877ED","#5C8EE6","#13C2C2","#70E0E0","#5CA3E6","#3436C7","#8082FF","#DD81E6","#F04864","#FA7D92","#D598D9"]},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),u=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&a(e,t,n);return u(e,t),e},l=this&&this.__rest||function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Sankey=void 0;var f=s(n(0)),h=c(n(4)),p=c(n(3)),d=n(32),y=n(6),v=n(35),g=n(29),m=n(44),_=n(9),b=n(7),x=n(2),O={x:0,y:0},w=function(t){return t.y+t.dy/2},A=function(t){return t&&t.value||0},E=function(t,e){return e.reduce((function(e,n){return e+A(t[n])}),0)},M=function(t,e,n){return n.reduce((function(n,r){var i=e[r],o=t[i.source];return n+w(o)*A(e[r])}),0)},P=function(t,e,n){return n.reduce((function(n,r){var i=e[r],o=t[i.target];return n+w(o)*A(e[r])}),0)},S=function(t,e){return t.y-e.y},k=function t(e,n){for(var r=n.targetNodes,i=0,o=r.length;i<o;i++){var a=e[r[i]];a&&(a.depth=Math.max(n.depth+1,a.depth),t(e,a))}},C=function(t,e,n){for(var r=0,i=t.length;r<i;r++){var o=t[r],a=o.length;o.sort(S);for(var u=0,s=0;s<a;s++){(c=u-(l=o[s]).y)>0&&(l.y+=c),u=l.y+l.dy+n}u=e+n;for(s=a-1;s>=0;s--){var l,c;if(!((c=(l=o[s]).y+l.dy+n-u)>0))break;l.y-=c,u=l.y}}},j=function(t,e,n,r){for(var i=0,o=e.length;i<o;i++)for(var a=e[i],u=0,s=a.length;u<s;u++){var l=a[u];if(l.sourceLinks.length){var c=E(n,l.sourceLinks),f=M(t,n,l.sourceLinks)/c;l.y+=(f-w(l))*r}}},T=function(t,e,n,r){for(var i=e.length-1;i>=0;i--)for(var o=e[i],a=0,u=o.length;a<u;a++){var s=o[a];if(s.targetLinks.length){var l=E(n,s.targetLinks),c=P(t,n,s.targetLinks)/l;s.y+=(c-w(s))*r}}},N=function(t){var e=t.data,n=t.width,r=t.height,i=t.iterations,a=t.nodeWidth,u=t.nodePadding,s=e.links,l=function(t,e,n){for(var r=t.nodes,i=t.links,a=r.map((function(t,e){var n=function(t,e){for(var n=[],r=[],i=[],o=[],a=0,u=t.length;a<u;a++){var s=t[a];s.source===e&&(i.push(s.target),o.push(a)),s.target===e&&(n.push(s.source),r.push(a))}return{sourceNodes:n,sourceLinks:r,targetLinks:o,targetNodes:i}}(i,e);return o(o(o({},t),n),{value:Math.max(E(i,n.sourceLinks),E(i,n.targetLinks)),depth:0})})),u=0,s=a.length;u<s;u++){(f=a[u]).sourceNodes.length||k(a,f)}var l=p.default.maxBy(a,(function(t){return t.depth})).depth;if(l>=1){var c=(e-n)/l;for(u=0,s=a.length;u<s;u++){var f;(f=a[u]).targetNodes.length||(f.depth=l),f.x=f.depth*c,f.dx=n}}return{tree:a,maxDepth:l}}(e,n,a).tree,c=function(t){for(var e=[],n=0,r=t.length;n<r;n++){var i=t[n];e[i.depth]||(e[i.depth]=[]),e[i.depth].push(i)}return e}(l),f=function(t,e,n,r){for(var i=p.default.min(t.map((function(t){return(e-(t.length-1)*n)/p.default.sumBy(t,A)}))),a=0,u=t.length;a<u;a++)for(var s=0,l=t[a].length;s<l;s++){var c=t[a][s];c.y=s,c.dy=c.value*i}return r.map((function(t){return o(o({},t),{dy:A(t)*i})}))}(c,r,u,s);C(c,r,u);for(var h=1,d=1;d<=i;d++)T(l,c,f,h*=.99),C(c,r,u),j(l,c,f,h),C(c,r,u);return function(t,e){for(var n=0,r=t.length;n<r;n++){var i=t[n],o=0,a=0;i.targetLinks.sort((function(n,r){return t[e[n].target].y-t[e[r].target].y})),i.sourceLinks.sort((function(n,r){return t[e[n].source].y-t[e[r].source].y}));for(var u=0,s=i.targetLinks.length;u<s;u++){(c=e[i.targetLinks[u]])&&(c.sy=o,o+=c.dy)}u=0;for(var l=i.sourceLinks.length;u<l;u++){var c;(c=e[i.sourceLinks[u]])&&(c.ty=a,a+=c.dy)}}}(l,f),{nodes:l,links:f}},D=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.state={activeElement:null,activeElementType:null,isTooltipActive:!1,nodes:[],links:[]},e}return i(e,t),e.getDerivedStateFromProps=function(t,e){var n=t.data,r=t.width,i=t.height,o=t.margin,a=t.iterations,u=t.nodeWidth,s=t.nodePadding;if(n!==e.prevData||r!==e.prevWidth||i!==e.prevHeight||!m.shallowEqual(o,e.prevMargin)||a!==e.prevIterations||u!==e.prevNodeWidth||s!==e.prevNodePadding){var l=r-(o&&o.left||0)-(o&&o.right||0),c=i-(o&&o.top||0)-(o&&o.bottom||0),f=N({data:n,width:l,height:c,iterations:a,nodeWidth:u,nodePadding:s}),h=f.links;return{activeElement:null,activeElementType:null,isTooltipActive:!1,nodes:f.nodes,links:h,prevData:n,prevWidth:a,prevHeight:i,prevMargin:o,prevNodePadding:s,prevNodeWidth:u,prevIterations:a}}return null},e.prototype.handleMouseEnter=function(t,e,n){var r=this.props,i=r.onMouseEnter,o=r.children;_.findChildByType(o,v.Tooltip.displayName)?this.setState({activeElement:t,activeElementType:e,isTooltipActive:!0},(function(){i&&i(t,e,n)})):i&&i(t,e,n)},e.prototype.handleMouseLeave=function(t,e,n){var r=this.props,i=r.onMouseLeave,o=r.children;_.findChildByType(o,v.Tooltip.displayName)?this.setState({isTooltipActive:!1},(function(){i&&i(t,e,n)})):i&&i(t,e,n)},e.prototype.handleClick=function(t,e,n){var r=this.props.onClick;r&&r(t,e,n)},e.renderLinkItem=function(t,e){if(f.default.isValidElement(t))return f.default.cloneElement(t,e);if(p.default.isFunction(t))return t(e);var n=e.sourceX,r=e.sourceY,i=e.sourceControlX,a=e.targetX,u=e.targetY,s=e.targetControlX,c=e.linkWidth,h=l(e,["sourceX","sourceY","sourceControlX","targetX","targetY","targetControlX","linkWidth"]);return f.default.createElement("path",o({className:"recharts-sankey-link",d:"\n          M"+n+","+r+"\n          C"+i+","+r+" "+s+","+u+" "+a+","+u+"\n        ",fill:"none",stroke:"#333",strokeWidth:c,strokeOpacity:"0.2"},x.filterProps(h)))},e.prototype.renderLinks=function(t,e){var n=this,r=this.props,i=r.linkCurvature,a=r.link,u=r.margin,s=p.default.get(u,"top")||0,l=p.default.get(u,"left")||0;return f.default.createElement(y.Layer,{className:"recharts-sankey-links",key:"recharts-sankey-links"},t.map((function(t,r){var u,c,h=t.sy,p=t.ty,d=t.dy,v=e[t.source],g=e[t.target],m=v.x+v.dx+l,_=g.x+l,b=(c=_-(u=+m),function(t){return u+c*t}),O=b(i),w=b(1-i),A=v.y+h+d/2+s,E=g.y+p+d/2+s,M=o({sourceX:m,targetX:_,sourceY:A,targetY:E,sourceControlX:O,targetControlX:w,sourceRelativeY:h,targetRelativeY:p,linkWidth:d,index:r,payload:o(o({},t),{source:v,target:g})},x.filterProps(a)),P={onMouseEnter:n.handleMouseEnter.bind(n,M,"link"),onMouseLeave:n.handleMouseLeave.bind(n,M,"link"),onClick:n.handleClick.bind(n,M,"link")};return f.default.createElement(y.Layer,o({key:"link"+r},P),n.constructor.renderLinkItem(a,M))})))},e.renderNodeItem=function(t,e){return f.default.isValidElement(t)?f.default.cloneElement(t,e):p.default.isFunction(t)?t(e):f.default.createElement(g.Rectangle,o({className:"recharts-sankey-node",fill:"#0088fe",fillOpacity:"0.8"},x.filterProps(e)))},e.prototype.renderNodes=function(t){var e=this,n=this.props,r=n.node,i=n.margin,a=p.default.get(i,"top")||0,u=p.default.get(i,"left")||0;return f.default.createElement(y.Layer,{className:"recharts-sankey-nodes",key:"recharts-sankey-nodes"},t.map((function(t,n){var i=t.x,s=t.y,l=t.dx,c=t.dy,h=o(o({},x.filterProps(r)),{x:i+u,y:s+a,width:l,height:c,index:n,payload:t}),p={onMouseEnter:e.handleMouseEnter.bind(e,h,"node"),onMouseLeave:e.handleMouseLeave.bind(e,h,"node"),onClick:e.handleClick.bind(e,h,"node")};return f.default.createElement(y.Layer,o({key:"node"+n},p),e.constructor.renderNodeItem(r,h))})))},e.prototype.renderTooltip=function(){var t=this.props,e=t.children,n=t.width,r=t.height,i=t.nameKey,o=_.findChildByType(e,v.Tooltip.displayName);if(!o)return null;var a,u=this.state,s=u.isTooltipActive,l=u.activeElement,c=u.activeElementType,h={x:0,y:0,width:n,height:r},p=l?(a=l,"node"===c?{x:a.x+a.width/2,y:a.y+a.height/2}:{x:(a.sourceX+a.targetX)/2,y:(a.sourceY+a.targetY)/2}):O,d=l?function(t,e,n){var r=t.payload;return"node"===e?[{payload:t,name:b.getValueByDataKey(r,n,""),value:b.getValueByDataKey(r,"value")}]:r.source&&r.target?[{payload:t,name:b.getValueByDataKey(r.source,n,"")+" - "+b.getValueByDataKey(r.target,n,""),value:b.getValueByDataKey(r,"value")}]:[]}(l,c,i):[];return f.default.cloneElement(o,{viewBox:h,active:s,coordinate:p,label:"",payload:d})},e.prototype.render=function(){if(!_.validateWidthHeight(this))return null;var t=this.props,e=t.width,n=t.height,r=t.className,i=t.style,a=t.children,u=l(t,["width","height","className","style","children"]),s=this.state,c=s.links,p=s.nodes,y=x.filterProps(u);return f.default.createElement("div",{className:h.default("recharts-wrapper",r),style:o(o({},i),{position:"relative",cursor:"default",width:e,height:n})},f.default.createElement(d.Surface,o({},y,{width:e,height:n}),_.filterSvgElements(a),this.renderLinks(c,p),this.renderNodes(p)),this.renderTooltip())},e.displayName="Sankey",e.defaultProps={nameKey:"name",dataKey:"value",nodePadding:10,nodeWidth:10,linkCurvature:.5,iterations:32,margin:{top:5,right:5,bottom:5,left:5}},e}(f.PureComponent);e.Sankey=D},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RadarChart=void 0;var r=n(16),i=n(102),o=n(48),a=n(47),u=n(11);e.RadarChart=r.generateCategoricalChart({chartName:"RadarChart",GraphicalChild:i.Radar,axisComponents:[{axisType:"angleAxis",AxisComp:o.PolarAngleAxis},{axisType:"radiusAxis",AxisComp:a.PolarRadiusAxis}],formatAxisMap:u.formatAxisMap,defaultProps:{layout:"centric",startAngle:90,endAngle:-270,cx:"50%",cy:"50%",innerRadius:0,outerRadius:"80%"}})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ScatterChart=void 0;var r=n(16),i=n(69),o=n(30),a=n(31),u=n(51),s=n(18);e.ScatterChart=r.generateCategoricalChart({chartName:"ScatterChart",GraphicalChild:i.Scatter,eventType:"single",axisComponents:[{axisType:"xAxis",AxisComp:o.XAxis},{axisType:"yAxis",AxisComp:a.YAxis},{axisType:"zAxis",AxisComp:u.ZAxis}],formatAxisMap:s.formatAxisMap})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AreaChart=void 0;var r=n(16),i=n(67),o=n(30),a=n(31),u=n(18);e.AreaChart=r.generateCategoricalChart({chartName:"AreaChart",GraphicalChild:i.Area,axisComponents:[{axisType:"xAxis",AxisComp:o.XAxis},{axisType:"yAxis",AxisComp:a.YAxis}],formatAxisMap:u.formatAxisMap})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RadialBarChart=void 0;var r=n(16),i=n(48),o=n(47),a=n(11),u=n(103);e.RadialBarChart=r.generateCategoricalChart({chartName:"RadialBarChart",GraphicalChild:u.RadialBar,legendContent:"children",axisComponents:[{axisType:"angleAxis",AxisComp:i.PolarAngleAxis},{axisType:"radiusAxis",AxisComp:o.PolarRadiusAxis}],formatAxisMap:a.formatAxisMap,defaultProps:{layout:"radial",startAngle:0,endAngle:360,cx:"50%",cy:"50%",innerRadius:0,outerRadius:"80%"}})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ComposedChart=void 0;var r=n(16),i=n(67),o=n(68),a=n(66),u=n(69),s=n(30),l=n(31),c=n(51),f=n(18);e.ComposedChart=r.generateCategoricalChart({chartName:"ComposedChart",GraphicalChild:[a.Line,i.Area,o.Bar,u.Scatter],axisComponents:[{axisType:"xAxis",AxisComp:s.XAxis},{axisType:"yAxis",AxisComp:l.YAxis},{axisType:"zAxis",AxisComp:c.ZAxis}],formatAxisMap:f.formatAxisMap})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FunnelChart=void 0;var r=n(16),i=n(109);e.FunnelChart=r.generateCategoricalChart({chartName:"FunnelChart",GraphicalChild:i.Funnel,eventType:"item",axisComponents:[],defaultProps:{layout:"centric"}})},function(t,e,n){"use strict";n.r(e),n.d(e,"withResizeDetector",(function(){return F}));var r=n(0),i=n.n(r),o=n(52),a=n(115),u=function(t){var e=[],n=null,r=function(){for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];e=i,n||(n=requestAnimationFrame((function(){n=null,t.apply(void 0,e)})))};return r.cancel=function(){n&&(cancelAnimationFrame(n),n=null)},r},s=n(71),l=n.n(s),c=n(116),f=n.n(c),h={debounce:l.a,throttle:f.a},p=function(t){return"function"==typeof t},d=function(){return"undefined"==typeof window},y=function(t){return t instanceof Element||t instanceof HTMLDocument};function v(t){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function g(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function m(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _(t,e){return(_=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function b(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=w(t);if(e){var i=w(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return x(this,n)}}function x(t,e){return!e||"object"!==v(e)&&"function"!=typeof e?O(t):e}function O(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function w(t){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function A(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var E=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_(t,e)}(c,t);var e,n,s,l=b(c);function c(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),A(O(e=l.call(this,t)),"cancelHandler",(function(){e.resizeHandler&&e.resizeHandler.cancel&&(e.resizeHandler.cancel(),e.resizeHandler=null)})),A(O(e),"rafClean",(function(){e.raf&&e.raf.cancel&&(e.raf.cancel(),e.raf=null)})),A(O(e),"attachObserver",(function(){var t=e.props.targetRef;t&&t.current&&(e.targetRef.current=t.current);var n=e.getElement();n&&(e.observableElement&&e.observableElement===n||(e.observableElement=n,e.resizeObserver.observe(n)))})),A(O(e),"getElement",(function(){var t=e.props,n=t.querySelector,r=t.targetDomEl;if(!d()){if(n)return document.querySelector(n);if(r&&y(r))return r;if(e.targetRef&&y(e.targetRef.current))return e.targetRef.current;var i=Object(o.findDOMNode)(O(e));if(i)switch(e.getRenderType()){case"renderProp":case"childFunction":case"child":case"childArray":return i;default:return i.parentElement}}})),A(O(e),"createUpdater",(function(){return e.rafClean(),e.raf=u((function(t){var n=t.width,r=t.height,i=e.props.onResize;p(i)&&i(n,r),e.setState({width:n,height:r})})),e.raf})),A(O(e),"createResizeHandler",(function(t){var n=e.state,r=n.width,i=n.height,o=e.props,a=o.handleWidth,u=o.handleHeight;if(a||u){var s=e.createUpdater();t.forEach((function(t){var n=t&&t.contentRect||{},o=n.width,l=n.height,c=a&&r!==o||u&&i!==l;!e.skipOnMount&&c&&!d()&&s({width:o,height:l}),e.skipOnMount=!1}))}})),A(O(e),"getRenderType",(function(){var t=e.props,n=t.render,i=t.children;return p(n)?"renderProp":p(i)?"childFunction":Object(r.isValidElement)(i)?"child":Array.isArray(i)?"childArray":"parent"}));var n=t.skipOnMount,i=t.refreshMode,s=t.refreshRate,f=t.refreshOptions;e.state={width:void 0,height:void 0},e.skipOnMount=n,e.raf=null,e.unmounted=!1,e.targetRef=Object(r.createRef)(),e.observableElement=null;var v=h[i];return e.resizeHandler=v?v(e.createResizeHandler,s,f):e.createResizeHandler,e.resizeObserver=new a.a(e.resizeHandler),e}return e=c,(n=[{key:"componentDidMount",value:function(){this.attachObserver()}},{key:"componentDidUpdate",value:function(){this.attachObserver()}},{key:"componentWillUnmount",value:function(){this.resizeObserver.disconnect(),this.rafClean(),this.cancelHandler(),this.unmounted=!0}},{key:"render",value:function(){var t=this.props,e=t.render,n=t.children,o=t.nodeType,a=this.state,u={width:a.width,height:a.height,targetRef:this.targetRef};switch(this.getRenderType()){case"renderProp":return e(u);case"childFunction":return n(u);case"child":if("string"==typeof n.type){var s=g(u,["targetRef"]);return Object(r.cloneElement)(n,s)}return Object(r.cloneElement)(n,u);case"childArray":return n.map((function(t){return!!t&&Object(r.cloneElement)(t,u)}));default:return i.a.createElement(o,null)}}}])&&m(e.prototype,n),s&&m(e,s),c}(r.PureComponent);E.defaultProps={handleWidth:!0,handleHeight:!0,skipOnMount:!1,refreshRate:1e3,refreshMode:void 0,refreshOptions:void 0,querySelector:null,targetDomEl:null,targetRef:null,onResize:null,render:void 0,children:null,nodeType:"div"};var M=E;function P(t){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function S(){return(S=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function k(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function C(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function j(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function T(t,e,n){return e&&j(t.prototype,e),n&&j(t,n),t}function N(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&D(t,e)}function D(t,e){return(D=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function I(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=B(t);if(e){var i=B(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return L(this,n)}}function L(t,e){return!e||"object"!==P(e)&&"function"!=typeof e?R(t):e}function R(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function B(t){return(B=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function z(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var F=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{handleWidth:!0,handleHeight:!0},n=function(n){N(a,n);var o=I(a);function a(){var t;C(this,a);for(var e=arguments.length,n=new Array(e),i=0;i<e;i++)n[i]=arguments[i];return z(R(t=o.call.apply(o,[this].concat(n))),"ref",Object(r.createRef)()),t}return T(a,[{key:"render",value:function(){var n=this.props,r=n.forwardedRef,o=k(n,["forwardedRef"]),a=r||this.ref;return i.a.createElement(M,S({},e,{targetRef:a}),i.a.createElement(t,S({targetRef:a},o)))}}]),a}(i.a.Component);function o(t,e){return i.a.createElement(n,S({},t,{forwardedRef:e}))}var a=t.displayName||t.name;return o.displayName="withResizeDetector(".concat(a,")"),n.defaultProps={forwardedRef:void 0},Object(r.forwardRef)(o)};e.default=M}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,